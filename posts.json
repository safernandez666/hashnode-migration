[{"ID":"18","Title":"Creando una API con Python y Flask para dialogar contra MySQL","Content":"<!-- wp:paragraph -->\n<p>En esta ocasi\u00f3n vamos a crear una <strong>API<\/strong>, como dice el titulo, para interactuar con nuestra base de datos <strong>MySQL<\/strong>. La idea es poder agregar, modificar o eliminar registros a trav\u00e9s de nuestra API (Application Programming Interface). Para ello utilizaremos <strong>Python<\/strong> y <strong>Flask<\/strong> que es un \u201cmicro\u201d Framework concebido para facilitar el desarrollo de Aplicaciones Web. Ademas utilizaremos <strong>Flask-SQLAlchemy<\/strong> una herramienta hecha en <strong>Python<\/strong>, que es un <em>Toolkit <\/em>y <strong>ORM <\/strong>que da a los desarrolladores poder total y flexibilidad sobre SQL junto con <strong>Flask-marshmallow<\/strong> que convertir\u00e1 los objetos <strong>ORM<\/strong> en <strong>JSON<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear una base de datos, en <strong>MySQL<\/strong>, con las siguientes tablas. Las mismas se crearan autom\u00e1ticamente por <strong>ORM<\/strong>. Esta sera la estructura, de la tabla.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":104,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-4.png\" alt=\"\" class=\"wp-image-104\"\/><figcaption>Base de Datos <em>test_api <\/em>con la tabla <em>user<\/em>.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ac\u00e1 un bosquejo de la arquitectura, con sus diferentes componentes. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":66,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"http:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Merediths-80th-1.png\" alt=\"\" class=\"wp-image-66\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2>Instalaci\u00f3n de Componentes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Podemos instalar <strong>Flask-SQLAlchemy<\/strong> y  <strong>Flask-marshmallow<\/strong> de una manera sencilla, utilizando <strong>pip<\/strong>. Antes que nada, hacemos un <em>update &amp;&amp; upgrade<\/em>, de nuestro sistema. En mi caso voy a realizar la PoC con <em>Ubuntu Server.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":98,\"align\":\"center\",\"width\":414,\"height\":265} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-1.png\" alt=\"\" class=\"wp-image-98\" width=\"414\" height=\"265\"\/><figcaption>Instalaci\u00f3n de Componentes<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar la base de datos MySQL junto con las librer\u00eda de <strong>Python<\/strong>. Para estos fines, did\u00e1cticos, voy a permitir todo. Sera necesario crear una base de datos, yo la llamo <em>test_api<\/em>, para que <strong>flask_sqlalchemy <\/strong>cree las tablas, necesarias, en base a los par\u00e1metros que indicaremos, mas adelante, en el c\u00f3digo. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":102,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-2.png\" alt=\"\" class=\"wp-image-102\"\/><figcaption>Instalaci\u00f3n y Configuraci\u00f3n de MySQL.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2>Creaci\u00f3n del C\u00f3digo<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos todo preparado. Vamos a comenzar con el c\u00f3digo, aqu\u00ed les dejo el <strong><a href=\"https:\/\/github.com\/safernandez666\/API\/blob\/master\/app.py\">repositorio<\/a><\/strong> en <strong>GitHub<\/strong>. Veamos el proyecto, completo, pero vamos a desmenuzarlo un poco, mas adelante.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":105,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-6.png\" alt=\"\" class=\"wp-image-105\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En la primer parte veremos las librer\u00edas, necesarias, como tambi\u00e9n la configuraci\u00f3n a Base de Datos. Les dejo, comentada, la de <strong>SQLite<\/strong>. La idea era realizarla con <strong>MySQL<\/strong> por la cantidad de proyectos en la que nos podemos encontrar con ella.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":129,\"align\":\"center\",\"width\":886,\"height\":466} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon.png\" alt=\"\" class=\"wp-image-129\" width=\"886\" height=\"466\"\/><figcaption>Librer\u00edas y Configuraciones<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En la siguiente parte, vemos como declaramos un modelo llamado User y definimos su campos con sus propiedades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":130,\"align\":\"center\",\"width\":566,\"height\":485} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon1.png\" alt=\"\" class=\"wp-image-130\" width=\"566\" height=\"485\"\/><figcaption>Modelo y Schem<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En el c\u00f3digo, restante, nos encontraremos con las rutas necesarias para gestionar la Base de Datos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a verlo trabajar, con los diferentes verbos <strong>HTTP<\/strong>. Voy a describir los pasos, para luego verlos del lado del Servidor y del Cliente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Listar los usuarios. \"GET\"<\/li><li>Agregar Usuarios. \"POST\"<\/li><li>Modificar Usuario, por ID. \"PUT\"<\/li><li>Eliminar Usuario, por ID. \"DELETE\"<\/li><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:image {\"id\":120,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-07-14_11_34-santiago@ubuntu_-.png\" alt=\"\" class=\"wp-image-120\"\/><figcaption>Servidor API en Ubuntu, mediante SSH.<br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ac\u00e1 los comandos <strong>cURL<\/strong>, para la gesti\u00f3n de la base por <strong>HTTP<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":121,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/VirtualBox_Ubuntu-Desktop_07_03_2019_14_12_24.png\" alt=\"\" class=\"wp-image-121\"\/><figcaption>Ejecuci\u00f3n v\u00eda cUrl<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Por ahora esto es todo. Espero que les sirva. En la pr\u00f3xima parte, vamos agregarle seguridad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saludos! <\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2019-03-04 19:49:09","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=18"},{"ID":"141","Title":"Agregando Seguridad a nuestras API's con Kong","Content":"<!-- wp:paragraph -->\n<p>En la primera <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/creando-una-api-con-python\/\"><strong>parte<\/strong><\/a>, aprendimos a generar nuestra propia API con <strong>Python<\/strong>, <strong>Flask <\/strong>contra <strong>MySQL<\/strong>. Llego el momento, de darles seguridad. Para ello utilizaremos <strong>Kong<\/strong>, un  <strong>API<\/strong>  <strong>Gateway Open Source<\/strong>. Estos nos proporcionan seguridad y control sobre el acceso al sentarse frente a cualquier n\u00famero de servicios <strong>API<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>KONG, Tyk, API Umbrella, Ambassador, Gravitee.io, etc., son algunas de los  <br><strong>API<\/strong> <strong>Gateway<\/strong> actualmente disponibles, en el mercado. Nos proporcionaran servicios como autenticaci\u00f3n, autorizacion, api keys, an\u00e1lisis, registro, transformaci\u00f3n, etc., a nuestros Endpoints.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pasaremos de una arquitectura, simple y desprotegida, a otra con un Manager, d\u00e1ndonos la posibilidad de escalar en nuestro <em>Backend <\/em>de una manera flexible. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":145,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Merediths-80th.png\" alt=\"\" class=\"wp-image-145\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2>Instalaci\u00f3n de Kong <\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a comenzar con la instalaci\u00f3n de Kong. En esta prueba de concepto, mi arquitectura es la siguiente:  <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table {\"className\":\"is-style-stripes\"} -->\n<table class=\"wp-block-table is-style-stripes\"><tbody><tr><td><strong>Servidor KONG<\/strong><\/td><td><strong>Servidor API<\/strong><\/td><\/tr><tr><td>192.168.0.139<\/td><td>192.168.0.138<\/td><\/tr><tr><td><em>kong.ironbox.local<\/em><\/td><td><em>api.ironbox.local<\/em><\/td><\/tr><\/tbody><\/table>\n<!-- \/wp:table -->\n\n<!-- wp:paragraph -->\n<p>Podr\u00edamos tener la cantidad que dese\u00e1ramos de servicios API. Ah\u00ed estar\u00eda Kong, para gestionar esos <strong>Endpoints<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para instalar <strong>Kong <\/strong>descargamos el <a href=\"https:\/\/konghq.com\/\">paquete <\/a>e instalamos <strong>Postgresql<\/strong>. Crearemos el usuario, para que Kong se conecte a la Base de Datos y lo ejecutaremos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":143,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-3-1024x805.png\" alt=\"\" class=\"wp-image-143\"\/><figcaption>Instalaci\u00f3n de Kong y Postgresql<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2>Creaci\u00f3n de Servicios y Reglas<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Una vez que tenemos el API Manager, en linea, vamos a poder crear los Servicios y las Rutas, para el manejo de los Match's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>El manejo de Kong, se realiza por API, as\u00ed que agregamos mediante POST el servicio<strong> API_Usuarios<\/strong> y una regla que maneje el verbo <strong>GET<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":144,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-1-1.png\" alt=\"\" class=\"wp-image-144\"\/><figcaption>Servicios y Rutas<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Listo! Ya tenemos el Servicio Publicado. \u00bfVamos a probarlo?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":150,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-14_48_19-santiago@kong_--1024x434.png\" alt=\"\" class=\"wp-image-150\"\/><figcaption>cURL<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"id\":148,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-14_34_39-Postman.png\" alt=\"\" class=\"wp-image-148\"\/><figcaption>Consulta, mediante Postman<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Perfecto! \u00a1Consultamos a la direcci\u00f3n, publica, con el <em>Path <\/em><strong>\/user<\/strong> y recibimos el <strong>JSON <\/strong>que esper\u00e1bamos!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Instalaci\u00f3n de Dashboard<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar un <strong>Dashboard<\/strong>, hay miles, para hacernos la vida mas f\u00e1cil.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":165,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-7.png\" alt=\"\" class=\"wp-image-165\"\/><figcaption>Instalaci\u00f3n de Dashboard<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"id\":152,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-15_07_41-santiago@kong_-.png\" alt=\"\" class=\"wp-image-152\"\/><figcaption>Iniciando el Dashboard<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Listo! \u00a1Tenemos una interfaz <strong>GUI <\/strong>para la gesti\u00f3n! Ahora podemos agregar, de una manera mas sencilla, Plugins, Usuarios, etc. En ella deber\u00edan de figurar los servicios y rutas que agregamos con <strong>cURL<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":153,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-15_07_26-Kong-Dashboard-1024x402.png\" alt=\"\" class=\"wp-image-153\"\/><figcaption>Dashboard Services<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear una <em><strong>key_auth<\/strong><\/em>, por motivos did\u00e1cticos vamos a realizarlo por linea de comando y revisar como impacta en el <em>Dashboard<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Creaci\u00f3n de key-auth<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image {\"id\":155,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-3-1.png\" alt=\"\" class=\"wp-image-155\"\/><figcaption>Creacion de key-auth<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ac\u00e1 vemos que para poder consultar el Servicio <em><strong>API_Usuario<\/strong><\/em><strong> <\/strong>sera necesario una llave.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":156,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-15_23_00-Kong-Dashboard-1024x310.png\" alt=\"\" class=\"wp-image-156\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a ver que nos responde, <em>postman<\/em>, al querer consultar nuestra <strong>API <\/strong>pero sin nuestra llave.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":158,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-16_20_57-Postman.png\" alt=\"\" class=\"wp-image-158\"\/><figcaption>GET sin Key<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como se puede observar, ya no podremos realizar la consulta sin nuestra llave de autorizaci\u00f3n. Por eso vamos a averiguarla para asi agregarla en la consulta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":160,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-5-1024x283.png\" alt=\"\" class=\"wp-image-160\"\/><figcaption>Consulta de key-auth en usuario_consultas<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Nuestra key-auth es: <em>apikey: 6xEJHFA7kONRagDMwaWdtQ2kjlPk2qZA<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":161,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-6-1-1024x499.png\" alt=\"\" class=\"wp-image-161\"\/><figcaption>GET con --header 'apikey'<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Excelente! Ahora si podemos consultar nuestra API, pero con seguridad. Realizamos la misma acci\u00f3n, v\u00eda <em>postman<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":162,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-09-16_39_22-Postman.png\" alt=\"\" class=\"wp-image-162\"\/><figcaption>postman<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Perfecto! Funciona, todo. Mientras tanto, en nuestro servidor <strong>Flask<\/strong>, vemos el registro de las consultas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":163,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/VirtualBox_Ubuntu-API-Server_09_03_2019_16_44_09.png\" alt=\"\" class=\"wp-image-163\"\/><figcaption>Servidor API<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Hay muchos plugins para agregar y jugar! Espero les sirva. Algo tan importante, como esto, debe estar controlado y monitoreado, siempre.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saludos!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Agregar Seguridad a nuestras API, con KONG.","Date":"2019-03-09 21:24:01","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=141"},{"ID":"184","Title":"Enviando nuestros Log's, de Windows, a Graylog2.","Content":"<!-- wp:paragraph -->\n<p><strong>Graylog <\/strong>es un <strong>SIEM <\/strong>libre y abierto, donde centralizaremos todos los log's de nuestro entorno sobre <em><strong>MongoDB&nbsp;<\/strong><\/em>y&nbsp;<em><strong>Elasticsearch<\/strong><\/em>. Usando <strong>Graylog <\/strong>podemos, de una manera f\u00e1cil, recolectar y analizar los Log's de todos nuestros servidores. <strong>Elasticsearch <\/strong>almacenara nuestros log's y nos proporcionara maneras sencillas de buscar en ellos. <strong>MongoDB <\/strong>guardara nuestras configuraciones y meta data. <strong>Graylog <\/strong>recolectara todos estos log's, a trav\u00e9s de <em>inputs<\/em>, y nos dar\u00e1 una interfaz Web para su manejo. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Arquitectura<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para esta prueba de concepto, nuestra infraestructura sera la siguiente:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table {\"className\":\"is-style-stripes\"} -->\n<table class=\"wp-block-table is-style-stripes\"><tbody><tr><td><strong>Graylog Server | Ubuntu 18.04<\/strong><\/td><td><strong>Windows Server 2012 R2<\/strong><\/td><\/tr><tr><td>graylog.ironbox.local<\/td><td> AD01.ironbox.local<\/td><\/tr><tr><td>10.0.2.20<\/td><td>10.0.2.19<br><\/td><\/tr><\/tbody><\/table>\n<!-- \/wp:table -->\n\n<!-- wp:image {\"id\":186,\"align\":\"center\",\"width\":820,\"height\":312} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Celebrate-diversity-_-05.21.20.png\" alt=\"\" class=\"wp-image-186\" width=\"820\" height=\"312\"\/><figcaption><em>Arquitectura<\/em><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Dejaremos la configuraci\u00f3n, de <strong>Linux<\/strong>, para una pr\u00f3xima entrada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Instalaci\u00f3n de Graylog <\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a comenzar con la instalaci\u00f3n de nuestro <strong>SIEM<\/strong> sobre nuestro <strong>Ubuntu <\/strong>18.04.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Actualizaci\u00f3n del Servidor<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Actualizamos e instalamos Java con otros componentes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":216,\"align\":\"center\",\"width\":886,\"height\":211} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-12.png\" alt=\"\" class=\"wp-image-216\" width=\"886\" height=\"211\"\/><figcaption>Actualizaci\u00f3n e Instalaci\u00f3n de Paquetes.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a comprobar la versi\u00f3n de Java. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":217,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-1-2.png\" alt=\"\" class=\"wp-image-217\"\/><figcaption>Comprobamos Java<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Instalaci\u00f3n de Elasticsearch<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Elasticsearch <\/strong>es uno de los componentes principales que requiere que <strong>Graylog <\/strong>se ejecute, act\u00faa como un servidor de b\u00fasqueda, ofrece una b\u00fasqueda distribuida en tiempo real y an\u00e1lisis con la interfaz web <strong>RESTful<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Elasticsearch <\/strong>almacena todos los registros enviados por el servidor de <strong>Graylog <\/strong>y muestra los mensajes cada vez que el usuario lo solicita a trav\u00e9s de la interfaz web incorporada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Descargamos e instalamos la clave de firma GPG.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":219,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-2-2.png?fit=640%2C188&amp;ssl=1\" alt=\"\" class=\"wp-image-219\"\/><figcaption>Instalaci\u00f3n de Elasticsearch<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a hacer que <strong>Elasticsearch <\/strong>inicie en el Boot y configuramos el <strong>cluster.name<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":221,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-3-3.png\" alt=\"\" class=\"wp-image-221\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Deber\u00eda quedarnos, de esta manera.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":222,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-16-13_54_51-santiago@graylog_-.png\" alt=\"\" class=\"wp-image-222\"\/><figcaption>Edicion de Elasticsearch<br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a reiniciar, la nueva configuraci\u00f3n y revisar si nos responde! Deber\u00edamos de tener como <em>claster.name<\/em> <em>graylog <\/em>y el status en Green. Lo revisamos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":224,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-4-3.png\" alt=\"\" class=\"wp-image-224\"\/><figcaption>Chequeos<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Instalaci\u00f3n de MongoDB<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Graylog usa MongoDB para almacenar sus datos de configuraci\u00f3n, no sus datos de registro. Solo se almacenan los metadatos, como la informaci\u00f3n del usuario o las configuraciones de flujo.\n\n<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":226,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-5-2.png?fit=640%2C267&amp;ssl=1\" alt=\"\" class=\"wp-image-226\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Instalaci\u00f3n de Graylog<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Graylog Server acepta y procesa los mensajes de registro y luego los muestra para las solicitudes que provienen de la interfaz web de graylog. Descargue e instale el repositorio graylog 3.x. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":228,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-6-3.png\" alt=\"\" class=\"wp-image-228\"\/><figcaption><br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4> Configuraci\u00f3n Graylog <\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Debe establecer un secreto para proteger las contrase\u00f1as de usuario. Usa el comando <strong>pwgen <\/strong>para el mismo y pasamos por <strong>SH256sum <\/strong>el que sera nuestra contrase\u00f1a para admin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":248,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Configuracion.png?fit=640%2C357&amp;ssl=1\" alt=\"\" class=\"wp-image-248\"\/><figcaption>Configuraci\u00f3n de Graylog. Contrase\u00f1as y http_bind_address.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Reiniciamos y configuramos para que se inicie autom\u00e1ticamente. Revisamos los log's hasta tener nuestro servidor en linea.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":232,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-9-1.png\" alt=\"\" class=\"wp-image-232\"\/><figcaption>Inicio Autom\u00e1tico de Graylog.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4> Configuraci\u00f3n de Windows Server 2012 R2 <\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Descargamos el NXLog, desde su&nbsp;<a href=\"https:\/\/nxlog.co\/system\/files\/products\/files\/348\/nxlog-ce-2.10.2102.msi\" target=\"_blank\" rel=\"noreferrer noopener\">web<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instalamos en <strong>Windows <\/strong>y vamos a configurar el archivo&nbsp;<em>nxlog.conf<\/em>&nbsp;que se encuentra en&nbsp;<em>C:\\Program Files (86x)\\nxlog\\conf\\<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a prestar atenci\u00f3n a 2 lineas. La primera, donde se define la ruta del software y la segunda, la direcci\u00f3n TCP donde enviaremos los eventos. Osea la direcci\u00f3n de nuestro servidor Graylog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":253,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/ConfiguracionNX.png\" alt=\"\" class=\"wp-image-253\"\/><figcaption>Configuraci\u00f3n NXLog<br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a configurar la Auditoria, de Windows, para poder observar el ABM de cuentas, como los Logon y Logoff. Para ello vamos a ir a <em>Local Security Policy<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":237,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/LocalPolicy.png?fit=640%2C480&amp;ssl=1\" alt=\"\" class=\"wp-image-237\"\/><figcaption>Local Security Policy<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Hacemos Inicio &gt; Ejecutar &gt;<em> services.msc<\/em> e iniciamos <strong>NXLog.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":236,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Services.png?fit=640%2C480&amp;ssl=1\" alt=\"\" class=\"wp-image-236\"\/><figcaption>Reinicio de NXLog<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Solo nos queda configurar el <strong>INPUT<\/strong>, en <strong>Graylog<\/strong>, para que comience a recibir los Log's. Siguiendo nuestra configuracion, de NXLog, vamos a crear un INPUT en el puerto 12201, GELF UDP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":238,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Input.png?fit=640%2C480&amp;ssl=1\" alt=\"\" class=\"wp-image-238\"\/><figcaption>GELF UDP | Puerto 12201<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vemos que empiezan a fluir los Log's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":239,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Dashboard.png?fit=640%2C480&amp;ssl=1\" alt=\"\" class=\"wp-image-239\"\/><figcaption>Dashboard<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En el&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/marketplace.graylog.org\/\" target=\"_blank\">Market Place de Graylog<\/a>, podr\u00e1n encontrar interesantes <strong>Dashboard's <\/strong>armados por la comunidad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Aqu\u00ed les dejo un&nbsp;<a rel=\"noreferrer noopener\" href=\"http:\/\/www.npartnertech.com\/download\/tech\/%20N-Reporter-Windows-File-Server-auditTosyslog_en.pdf\" target=\"_blank\">PDF<\/a>, interesante, para configurar Windows.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar este <a href=\"https:\/\/marketplace.graylog.org\/addons\/c537bce0-29df-4a40-aa04-22432363f7de\">Content Pack<\/a>. Con las funciones, vitales, de Active Directory. En esta PoC, creamos una cuenta para verla reflejada en nuestro Dashboard. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":240,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/ContentPack.png\" alt=\"\" class=\"wp-image-240\"\/><figcaption>Dashboad<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Picamos en <strong>AD User Object Summary<\/strong>, donde tendremos un snapshot de todos los datos de ABM en Active Directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":241,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Usuario.png\" alt=\"\" class=\"wp-image-241\"\/><figcaption>Creaci\u00f3n de Usuario<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Seguiremos sumando <strong>INPUT's <\/strong>a nuestro <strong>SIEM<\/strong>. Un componente, vital, para nuestro d\u00eda a d\u00eda y para tambi\u00e9n hacer frente a auditorias!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cualquier, duda, no duden en escribirme! Les <a href=\"https:\/\/drive.google.com\/file\/d\/1iQjFbM2jg2w2at2Y2vMM0p1xoiYFT3At\/view?usp=sharing\">comparto <\/a>los comandos, en un TXT, y el archivo de configuraci\u00f3n de <a href=\"https:\/\/docs.google.com\/document\/d\/1k9RbgvibVOCWUgZuiu69CTY_r1rEir5kK1znm2DeMaw\/edit?usp=sharing\">NXLog<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Les dejo los comandos, de Instalaci\u00f3n, para que puedan hacer copy \/ paste.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hasta la pr\u00f3xima!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Enviando nuestros Log's, de Windows, a Graylog2.","Date":"2019-03-17 16:07:08","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=184"},{"ID":"259","Title":"Visualizando los Log's de Kong, nuestro API Manager, en Graylog.","Content":"<!-- wp:paragraph -->\n<p>Hace unos d\u00edas aprendimos a <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/creando-una-api-con-python\/\">crear una API<\/a>, con <strong>Python <\/strong>y <strong>Flask<\/strong>, e <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/seguridad-api-kong-flask-python\/\">implementamos un API Manager<\/a>, con <strong>Kong<\/strong>, para manejar la seguridad de nuestro servicio.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a enviar los log's de <strong>Kong <\/strong>a nuestro servidor <strong>Graylog<\/strong>, que instalamos  en otra <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/envio-logs-windows-server-a-graylog-siem\/\">entrada<\/a>, <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4> Instalaci\u00f3n de Plugin Syslog en Kong <\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos al <strong>Dashboard<\/strong>, de Kong, e instalamos el <strong>Plugin<\/strong>. Para los fines pr\u00e1cticos, vamos a logear todo. Pero podr\u00edamos agregar granularidad, seleccionado la ruta, el servicio o el usuario de consumo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":260,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_06_50-Kong-Dashboard.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-260\"\/><figcaption>Agregamos Plugin<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"id\":261,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_08_58-Kong-Dashboard.png?fit=640%2C303&amp;ssl=1\" alt=\"\" class=\"wp-image-261\"\/><figcaption>Manejo del Status del Plugin<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos, listo el logeo. Ahora vamos a modificar el rsyslog, para direccionarlo a nuestro servidor Graylog. En este caso, como en el de las entradas anteriores, el mismo tiene la direcci\u00f3n 10.0.2.20. Voy a editar la Regla por defecto, en la ruta \/etc\/rsyslog\/50-default.conf, agregando:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>*.* @10.0.2.20:5014;RSYSLOG_SyslogProtocol23Format<\/em><\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a enviar a Graylog, en el puerto 5014. Es importante el puerto para la creaci\u00f3n del INPUT. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":262,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_14_02-santiago@kong_-_etc_rsyslog.d.png\" alt=\"\" class=\"wp-image-262\"\/><figcaption>rsyslog<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Reiniciamos el rsyslog, para que tome los cambios. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":263,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/carbon-11.png\" alt=\"\" class=\"wp-image-263\"\/><figcaption>Reinicio de Rsyslog<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Creaci\u00f3n del Input en Graylog<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Creamos el input en System\/Inputs &gt; Syslog UDP. Recordemos, que debemos escuchar en el puerto 5014.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":264,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_29_05-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-264\"\/><figcaption> Input Syslog UDP en el Puerto 5014<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Si seleccionamos <em>Show received messages:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":265,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_31_44-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-265\"\/><figcaption>Filtramos los Logs de Kong<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos al Input, para poder realizar un <strong>Extrator<\/strong>. El campo message, del log, tiene un <strong>JSON <\/strong>con toda la informaci\u00f3n que necesitamos. El extractar, va a segmentar el <strong>JSON<\/strong>. Acomodando las Key's con sus valores, de una manera que <strong>Graylog<\/strong>, pueda trabajar con ellos. Una manera de normalizarlo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ejecutamos alguna consulta, para generar trafico.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":267,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_43_33-Postman.png\" alt=\"\" class=\"wp-image-267\"\/><figcaption>GET Status 200<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Revisamos el log y vemos el <strong>JSON<\/strong>, dentro del campo message.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":268,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_46_27-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-268\"\/><figcaption>Campo Message<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos agregar el <strong>Extractor<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":269,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/VirtualBox_Ubuntu-Desktop_21_03_2019_16_49_45.png\" alt=\"\" class=\"wp-image-269\"\/><figcaption>Creaci\u00f3n del Extractor<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Configuramos y probamos! Si vemos el JSON, como corresponde, guardamos el extractor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":270,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_55_17-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-270\"\/><figcaption>Extractor<br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"id\":271,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-16_55_36-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-271\"\/><figcaption>JSON del Message<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora podemos hacer el filtro, por cada campo. Podemos crear un <strong>Dashboard<\/strong>, en mi caso cree Kong API Manager que luego les compartire, para enviar las gr\u00e1ficas de datos que me interesan, ejemplo: los c\u00f3digos de respuesta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":272,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-17_01_34-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-272\"\/><figcaption>responses_status<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Picamos en <strong>Quick Values <\/strong>arriba se creara una gr\u00e1fica donde podemos ver los c\u00f3digos de respuesta! Esa gr\u00e1fica, la agregamos a nuestro Dashboard. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":273,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/2019-03-21-17_04_00-Ubuntu-Desktop-Corriendo-Oracle-VM-VirtualBox.png\" alt=\"\" class=\"wp-image-273\"\/><figcaption>Gr\u00e1fico de Torta de <strong>responses_status<\/strong><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Les muestro el mio. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":274,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/03\/Graylog_LOGS.png\" alt=\"\" class=\"wp-image-274\"\/><figcaption>Dashboard Kong<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Las opciones son infinitas. En el que les comparto podemos ver:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Metodos Utilizados<br>Rutas Consultadas<br>Respuestas de Estado<br>Usuarios <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>De esta manera tenemos un Snapshot para ver que esta pasando con nuestra API, en tiempo real.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Espero les guste! <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Dashboard de Logs del API Manager en Graylog.","Date":"2019-03-21 22:33:51","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=259"},{"ID":"289","Title":"API RESTful Serverless en Lambda y MySQL","Content":"<!-- wp:paragraph -->\n<p>Vamos a implementar un API RESTful en Serverless, en otras palabras sin utilizaci\u00f3n de servidores, como los conocemos. Existen muchos proveedores que ofrecen servicios, sin servidor, pero vamos a quedarnos con Amazon Web Services.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si no conocen el termino Serverless es buen momento para empezar a investigarlo y empaparnos de su uso.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Arquitectura<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Aca un bosquejo de la arquitectura, que utilizaremos, donde tenemos las diferentes funciones <strong>Lambdas<\/strong> que eran invocadas desde nuestro <strong>API Gateway<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":292,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Celebrate-diversity-_-05.21.20.png\" alt=\"\" class=\"wp-image-292\"\/><figcaption>API Gateway invocan a las Funciones Lambda, que se conectan contra la Base de Datos RDS MySQL<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a usar <strong>Serverless Framework<\/strong> que nos dar\u00e1 la posibilidad de manejar, localmente, nuestro c\u00f3digo para probarlo y a su vez hacer el <em>deploy,<\/em> de nuestro c\u00f3digo, con la configuraci\u00f3n del entorno. Autom\u00e1ticamente, tendremos, parametrizada nuestras rutas en el <strong>API Gateway<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table {\"align\":\"center\"} -->\n<table class=\"wp-block-table aligncenter\"><tbody><tr><td><br><\/td><td><strong>EndPoint<\/strong><\/td><td><strong>M\u00e9todo<\/strong><\/td><td><strong>Descripci\u00f3n<\/strong><\/td><\/tr><tr><td>1<\/td><td>\/usuario<\/td><td>GET<\/td><td>Lista todos los usuarios de la tabla<\/td><\/tr><tr><td>2<\/td><td>\/usuario\/{id}<\/td><td>GET<\/td><td>Lista el usuario, especifico.<\/td><\/tr><tr><td>3<\/td><td>\/usuario<\/td><td>POST<\/td><td>Crea un nuevo usuario en la tabla<\/td><\/tr><tr><td>4<\/td><td>\/usuario\/{id}<\/td><td>PUT<\/td><td>Modifica un usuario existente<\/td><\/tr><tr><td>5<\/td><td>\/usuario\/{id}<\/td><td>DELETE<\/td><td>Elimina un usuario<\/td><\/tr><\/tbody><\/table>\n<!-- \/wp:table -->\n\n<!-- wp:paragraph -->\n<p>Para esta PoC sera necesario tener instaladas las siguientes herramientas y framework's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Recursos<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><li>Node.js 8.10.<\/li><li>MySQL, Instancia RDS en AWS.<\/li><li>Editor de C\u00f3digo.<\/li><li>Postman.<\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Para crear la Base de Datos, en AWS RDS, podemos revisar este <a href=\"https:\/\/aws.amazon.com\/es\/getting-started\/tutorials\/create-mysql-db\/\">articulo<\/a> donde se crea una instancia. Es importante que tengamos su FQDN, Nombre de Instancia, Usuarios y Password. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear la Base de Datos, donde trabajaremos, en <strong>MySQL<\/strong>, luego de conectarnos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>CREATE TABLE `usuarios` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(100) DEFAULT NULL,\n  `email` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Serverless Framework<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar <strong>Node.js <\/strong>en nuestro equipo, puede variar segun nuestro sistema operativo y serverless. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lleg\u00f3 el momento de agregar nuestras credenciales de AWS. Ac\u00e1 les dejo un <a href=\"https:\/\/docs.aws.amazon.com\/es_es\/IAM\/latest\/UserGuide\/id_users_create.html\">documento<\/a>, para crear un perfil IAM. En mi caso, cada perfil tiene sus credenciales. En mi caso ~\/.aws\/credentials<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":303,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-5.png\" alt=\"\" class=\"wp-image-303\"\/><figcaption>Perfiles de AWS<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Creamos una carpeta y los archivos necesarios de Node.js y Serverless para comenzar!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":301,\"align\":\"center\",\"width\":454,\"height\":295} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-3.png\" alt=\"\" class=\"wp-image-301\" width=\"454\" height=\"295\"\/><figcaption>Creaci\u00f3n de Carpeta y Template<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"id\":298,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-11.23.40.png?fit=640%2C319&amp;ssl=1\" alt=\"\" class=\"wp-image-298\"\/><figcaption>Template Serverless<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a pegarle una mirada a nuestro serverless.yml. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":304,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-14.27.11.png?fit=640%2C314&amp;ssl=1\" alt=\"\" class=\"wp-image-304\"\/><figcaption>Serverless.yml<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos agregarle el perfil, que usaremos, para hacer el deploy y la region donde queremos hacerlo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":312,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-14.49.25.png?fit=640%2C300&amp;ssl=1\" alt=\"\" class=\"wp-image-312\"\/><figcaption>Profile &amp; Region<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Instalamos las dependencias. Por un lado serverless-offine, para las pruebas locales, junto con MySQL, para la conectar la base de datos, y querystring, para el parseo de los JSON. Luego inicializamos nuestro archivo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":308,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-7.png\" alt=\"\" class=\"wp-image-308\"\/><figcaption>Dependencias e Inicializaci\u00f3n<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Creamos el archivos <em>connections.js<\/em> donde pondremos todos nuestros datos de conexi\u00f3n. Vamos a AWS RDS y en base a la BBDD cargamos las variables para su funcionamiento.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":309,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-8.png\" alt=\"\" class=\"wp-image-309\"\/><figcaption>connections.js<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Creamos la carpeta <strong>CRUD\/usuarios.js<\/strong>, donde estar\u00e1n los handlers que atender\u00e1n las llamadas de nuestros Endpoints.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":310,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-9.png\" alt=\"\" class=\"wp-image-310\"\/><figcaption>crud\/usuarios.js<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora nos toca crear los Endpoints, en el YAML. Aca les dejo mi serverless.yml.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":311,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/carbon-10.png\" alt=\"\" class=\"wp-image-311\"\/><figcaption>Endpoints<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos todo listo para subirlo a AWS! Serverless creara el API Gateway, las funciones Lambda automaticamente! Hacemos: <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>sls deploy<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>En el supuesto caso de querer probar, localmente, podr\u00edamos haber utilizado <em><strong>sls offline<\/strong> <\/em>para la prueba local. Logicamente con los direccionamientos, correspondientes, de base de datos del archivo <em><strong>connections.js<\/strong><\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Deploy<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Empezo la Magia!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":313,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-14.54.04.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-313\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Aca podemos ver, varias cosas:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si revisamos el S3 Bucket, encontraremos nuestro c\u00f3digo. A su vez se crearan las funciones y las rutas en el Gateway. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Funciones Lambda<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":316,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.11.33.png?fit=640%2C366&amp;ssl=1\" alt=\"\" class=\"wp-image-316\"\/><figcaption>Lambda<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>API Gateway<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":317,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.12.02.png?fit=640%2C474&amp;ssl=1\" alt=\"\" class=\"wp-image-317\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Consumo de la API<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a jugar, con POSTMAN, para revisar nuestras API's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creamos 1 registro, para ello utilizaremos el verbo POST junto al envio del JSON, con los datos a insertar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":319,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.13.38.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-319\"\/><figcaption>POST create<br><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a realizar un GET junto con el ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":318} -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.14.44.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-318\"\/><figcaption>Get findOne<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Probamos de traer todos los registros.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":320,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.14.19.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-320\"\/><figcaption>GET findAll<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a eliminar el registro.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":321,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/04\/Captura-de-Pantalla-2019-04-24-a-las-15.20.26.png?fit=640%2C491&amp;ssl=1\" alt=\"\" class=\"wp-image-321\"\/><figcaption>DELETE delete<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Espero que les sirva! Les dejo el proyecto en <a href=\"https:\/\/github.com\/safernandez666\/APILambdaToMySQL\">GitHub<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En la pr\u00f3xima entrada, vamos a darle seguridad! Si quieren eliminar, de sus cuentas, el deploy no tienen mas que hacer<strong> <\/strong><em><strong>sls remove<\/strong>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saludos!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"API Gateway Lambda MySQL Serverless Framework","Date":"2019-04-24 18:42:07","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=289"},{"ID":"344","Title":"Organizando la Nueva Seguridad Agil: Spotify + Security Champion","Content":"<!-- wp:paragraph {\"align\":\"left\"} -->\n<p style=\"text-align:left\">Hace unos meses tome la decisi\u00f3n de cambiar de aires, cambiar de compa\u00f1\u00eda. Hacia un tiempo que estaba en b\u00fasqueda de un desaf\u00edo, algo que me mejore como profesional. Que me eleve. Sin duda alguna cuando elegimos esta carrera \u2013 inform\u00e1tica \u2013 sabemos que vamos a tener que estar en un proceso de mejora continua, constante. Si bien he estado en procesos Agile, algo que ha llegado para quedarse en v\u00edsperas de suplantar los modelos traici\u00f3nales de gesti\u00f3n, hoy me encuentro en un reto a escala. Un duelo que tiene como contrincante asegurar mas de 20 Squad\u2019s. Que son peque\u00f1os equipos de entre seis y ocho personas con perfiles multidisciplinarios que tienen que llevar a cabo una misi\u00f3n utilizando la metodolog\u00eda <strong>Scrum<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Mientras escribo intento hacer un bosquejo, en mi cabeza, de como explicar todo lo aprendido o como trasladar la manera de abordar la seguridad en un contexto \u00c1gile, a escala, donde aparecen tecnolog\u00edas y maneras de hacer las cosas de un tipo diferente al viejo <strong>Waterfall<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si sos de Seguridad, como yo, sabes que siempre - o casi llegamos al final. Nuestra primera acci\u00f3n, sin dudas, es evangelizar. Hacer el \u201cShift Left\u201d de la Seguridad. Debemos estar al comienzo del proyecto, en las primeras iteraciones. Hacerle comprender al negocio que no somos un \u201cfreno de mano\u201d, sino un \u201cAirbag\u201d o un \u201cCintur\u00f3n de Seguridad\u201d para protegerlos ante un incidente.&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lo primero que pens\u00e9, al tomar este desaf\u00edo, fue: \u00a1Agrego alguien de Seguridad en cada uno de los Squad\u2019s y listo! \u00a1Con eso vamos a estar seguros! Pero como responsables, siempre, nos toca administrar recursos y los recursos, lamentablemente, no son infinitos. \u00a1Esto me llevo a preguntar! \u00a1A ver como estaba en otros lados! Por suerte, en Tecnolog\u00eda, compartir conocimiento es algo habitual y he podido nutrirme de experiencias ajenas. Me tope con 2 conceptos: Uno la cultura&nbsp;<strong>Spotify<\/strong>, con los Guilds, y por el otro con el&nbsp;<strong>Security Champion<\/strong>. Con ese approach comenc\u00e9, en mi cabeza, a darle forma a lo que quer\u00eda de Seguridad de la Informaci\u00f3n en este nuevo modelo.&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En primer lugar, les adjunto la imagen, de como se organizan estos equipos:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":346,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/09\/0.jpeg\" alt=\"\" class=\"wp-image-346\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>F\u00edjense que el \"Guild\" esta formado por un integrante en cada Squad, de la Tribu, y transversalmente aparece la figura de\u00a0<strong>Chapter Lead<\/strong>. Nuestra idea es la siguiente, cambiar el\u00a0<strong>Chapter Lead <\/strong>por un\u00a0<strong>Security Lead<\/strong>. Una figura con alto Seniority, en Seguridad de la Informaci\u00f3n. Alguien que tenga la visi\u00f3n hol\u00edstica de lo que pretendemos. En cada Squad, un\u00a0<strong>Security Champion<\/strong>. Independientemente de que \u00e1rea sea, despu\u00e9s veremos las formas de seleccionarlo. Esta en la forma en la que vamos hacer frente a muchos proyectos, con mas de un equipo, diferentes tecnolog\u00edas y sobre todo una cultura \u201cliviana\u201d de Seguridad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seguramente te preguntas: \u00bfQu\u00e9 es es un&nbsp;<strong>Security Champion<\/strong>? La respuesta es: Developers, QA\u2019s, Arquitectos, Dise\u00f1adores, DevOps, \u00a1Cualquiera que este interesado, en Seguridad, dentro del Squad! Necesitamos alguien que este, como decimos, \u201cEn la Cocina\u201d del proyecto. Que se convierta en el hombre de Seguridad, en el mismo. Pero lo mas importante, sin lugar a dudas, es que debe querer mejorar la Seguridad. \u00bfQue vamos a ganar, con esta figura? Escalar la seguridad a trav\u00e9s de m\u00faltiples equipos, involucrar a personas que no son de seguridad, pero lo mas importante es vamos a&nbsp;<em>generar una cultura de seguridad<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seg\u00fan la encuesta del 2017 de&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/docs.google.com\/document\/d\/1t9tLkN31VsP7aRODNB4qeh7HKeA4o4OLaeiCOSElAXI\/edit#heading=h.99oob0teufg3\" target=\"_blank\"><strong>OWASP Security Champion Survey<\/strong><\/a><strong>,&nbsp;<\/strong>donde participaron profesionales de las distintas aristas, esto es lo que se espera de un Security Champion:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":347,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/09\/0.png?fit=640%2C594&amp;ssl=1\" alt=\"\" class=\"wp-image-347\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Podr\u00edamos sumarle, a vuelo de p\u00e1jaro:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Asistir a conferencias de seguridad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Definir las mejores practicas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Priorizar historias relevantes, para seguridad, en el backlog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Escribir pruebas de seguridad para riesgos identificados.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tenemos que dar soluciones a preguntas que puede generarse el Squad. Imaginemos al equipo pregunt\u00e1ndose \u00bfC\u00f3mo solucionamos este issue? \u00a1Ah\u00ed es donde el&nbsp;<strong>Security Champion <\/strong>generara valor!&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Estos serian las principales \"jugadas\" del rol, su <strong>Playbook<\/strong>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":348,\"align\":\"center\",\"width\":300,\"height\":398} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/09\/Security-Champions-Playbook.png\" alt=\"\" class=\"wp-image-348\" width=\"300\" height=\"398\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Identificar los Equipos<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Preguntas como: \u00bfUn producto un equipo? \u00bfQu\u00e9 tecnolog\u00edas se usan? \u00bfQu\u00e9 tenemos documentado? \u00bfQui\u00e9n administra? \u00bfRevisiones act\u00faales? \u00bfCalendario de lanzamiento? \u00bfBacklog? Deber\u00eda quedarnos algo, similar, a esto:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":349,\"align\":\"center\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/09\/0-2.png?fit=640%2C98&amp;ssl=1\" alt=\"\" class=\"wp-image-349\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Definir el Rol<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para tener un rol, claro, sera necesario que midamos el estado actual de seguridad entre los equipos. Deberemos definir qu\u00e9 metas se planean alcanzar a mediano plazo. Identificar en qu\u00e9 lugares el <strong>Security Champion <\/strong>podr\u00eda ayudar. Que estos tengan sus roles y responsabilidades, definidos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Dependiendo del progreso y la estrategia actual, las descripciones de los roles podr\u00edan ser:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Verificar revisiones de seguridad.<\/li><li>Controlar las mejores pr\u00e1cticas dentro del equipo.<\/li><li>Plantear problemas por riesgos en el c\u00f3digo existente.<\/li><li>Crear modelos de amenazas para nuevas caracter\u00edsticas.<\/li><li>Realizar escaneo autom\u00e1ticos para el c\u00f3digo SAST &amp; DAST.<\/li><li>Investigar informes de recompensas de errores.<\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Nominar el Security Champion<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Es importante que se auto nomine, sin dudas. Tiene que salir de \u00e9l, que se sienta atra\u00eddo por esta nueva etapa y esta responsabilidad adquirida. Es crucial tener la aprobaci\u00f3n en todos los niveles para evitar el argumento: \u00a1No tenemos tiempo para la Seguridad! \u00bfLo conocen?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Una vez que el sombrero tiene due\u00f1o, tenemos que hacerlo sentir como lo que es <strong>Un Campe\u00f3n de la Seguridad<\/strong>. Compartir las metas de Seguridad, hacerlo sentir parte, presentarlo con sus pares, darle su insignia de&nbsp;<strong>Security Champion \ud83c\udfc6\ud83d\udee1\ud83d\udcaa.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Canales de Comunicaci\u00f3n<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Opciones miles. \u00bfSlack? \u00bfKeybase? \u00bfIRC? \u00bfSkype?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Construir una Base de Conocimientos<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Una Wiki interna como fuente. Opciones de KMS hay miles. \u00a1Solo es cuesti\u00f3n de Google It!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ah\u00ed vamos a tener listados los Security Champions de los diferentes Squad\u2019s, con los Roles y Procedimientos claramente definidos. Tendremos el apartado, a seguir, de SDLC con las mejores practicas. Listados de Riesgos, por que no un resumen BIA, y Vulnerabilidades asociadas. \u00a1Y los&nbsp;<strong>Check List<\/strong>! Ejemplos:&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Lista de Verificaci\u00f3n de Seguridad Web.<\/li><li>Lista de Verificaci\u00f3n de Seguridad Mobile.<\/li><li>Lista de Verificaci\u00f3n de Terceros.<\/li><li>Lista de Verificaci\u00f3n de Privacidad.<\/li><li>Etc.<\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Algunos enlaces para tener en cuenta:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><a href=\"https:\/\/www.securityknowledgeframework.org\/index.php\" rel=\"noreferrer noopener\" target=\"_blank\">Security Knowledge Framework<\/a><\/li><li><a href=\"https:\/\/wiki.sei.cmu.edu\/confluence\/display\/seccode\/Top+10+Secure+Coding+Practices\" rel=\"noreferrer noopener\" target=\"_blank\">CERT Secure Coding<\/a><\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Mantener el Interes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para los que amamos esto, lo m\u00e1s f\u00e1cil. Veremos si para los entusiastas es igual. Ac\u00e1 algunas ideas, para armar el plan.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Workshops &amp; Trainings | Estrategia | Mejores Practicas.<\/li><li>Mi\u00e9rcoles de Hackeo.<\/li><li>Mes de Bug's.<\/li><li>Boletines mensuales de seguridad: Actualizaciones y Planes.<\/li><li>Reconocimiento para L\u00edderes.<\/li><li>Otra fuente de comunicaci\u00f3n. Tambi\u00e9n sirven como puntos de control para todos.<\/li><li>Conferencias.<\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Mantenerlos motivados!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Esto es un acercamiento de c\u00f3mo abordamos los Squads, tener voz en cada Kick Off.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para la pr\u00f3xima, entrada, les voy a compartir mi visi\u00f3n del <strong>Squad de Seguridad<\/strong>. El que brinda servicio a las Tribus, junto a Operaciones, Arquitectura, Etc. El conjunto que creara los Pipelines, con los controles de Seguridad, para que el CI\/CD tenga en cada fase nuestros Check Point's que van desde An\u00e1lisis de C\u00f3digo SAST &amp; DAST, Monitoreo, Plantillas de Infra as a Code, DevSecOps, Red Team &amp; Blue Team, Etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Muchas cosas nuevas, formas, problemas y soluciones. Espero que sirva, para copiar, para debatir, pero por sobre todo para mejorar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saludos,<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Santi.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":352,\"align\":\"left\"} -->\n<div class=\"wp-block-image\"><figure class=\"alignleft\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/09\/0-3.png\" alt=\"\" class=\"wp-image-352\"\/><figcaption>Referencias<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->","Excerpt":"Organizando Squad's de Seguridad de la Informacion en el modelo Agile.","Date":"2019-09-09 22:44:28","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=344"},{"ID":"370","Title":"An\u00e1lisis de C\u00f3digo en CI\/CD con SonarQube. Parte 1.","Content":"<!-- wp:paragraph -->\n<p>La creaci\u00f3n de un Ciclo de Vida de Desarrollo de Software seguro (sSDLC) est\u00e1 empezando a convertirse en una de las formas m\u00e1s completas de asegurar el desarrollo seguro de aplicaciones web y m\u00f3viles. En un escenario de <em>Integraci\u00f3n Continua y Entrega Continua<\/em> (CICD) podr\u00edamos utilizar <strong>SonarQube<\/strong> en nuestros Pipelines, para realizar los an\u00e1lisis de c\u00f3digo de una manera automatica.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En esta primera parte vamos a instalar un servidor de SonarQube sobre Ubuntu 18.04. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creamos el usuario.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo useradd -M -r -s \/usr\/sbin\/nologin sonar<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar Java y algunos paquetes necesarios.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo apt-get update\nsudo apt-get upgrade -y\nsudo apt-get install unzip wget net-tools openjdk-8-jre -y<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ya hemos instalado los componentes y tenemos el usuario creado, sin shell, para sonar. Vamos a instalar nuestra base de datos <strong>Postgresql<\/strong>. Las nuevas versiones de <strong>SonarQube<\/strong> han deprecado el soporte a <strong>MySQL<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo apt-get update\necho &quot;deb http:\/\/apt.postgresql.org\/pub\/repos\/apt\/ $(lsb_release -cs)-pgdg main&quot; &gt; \/etc\/apt\/sources.list.d\/pgdg.list\nwget --quiet -O - https:\/\/www.postgresql.org\/media\/keys\/ACCC4CF8.asc | sudo apt-key add - \nsudo apt-get update <\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Procedemos a la instalaci\u00f3n, en mi caso voy a ir por la version 11.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo apt-get install postgresql-11 -y<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ingresamos a <strong>Postgresql<\/strong> y creamos el usuario de Base de Datos. Tambien lo llamamos 'sonar'.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>su - postgres\ncreateuser sonar<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Creamos una base de datos y hacemos que el usuario 'sonar' sea el propietario de esa base de datos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>psql\nALTER USER sonar WITH ENCRYPTED password 'TUPASSWORD';\nCREATE DATABASE sonar OWNER sonar;<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a descargar <strong><a href=\"https:\/\/binaries.sonarsource.com\/Distribution\/sonarqube\/\">SonarQube<\/a><\/strong>. Voy a instalar la version 7.5, no es la ultima, que es compatible con Java 8.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>wget https:\/\/binaries.sonarsource.com\/Distribution\/sonarqube\/sonarqube-7.5.zip<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Descomprimimos y ubicamos en la carpeta \/opt\/ para luego crear la carpeta \/opt\/sonar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo unzip sonarqube-7.5.zip -d \/opt\/\ncd \/opt\nsudo mv sonarqube-7.5 sonar<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a darle derechos a 'sonar' a la carpeta \/opt\/sonar, reci\u00e9n creada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo chown -R sonar:sonar \/opt\/sonar<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a configurar <strong>SonarQube<\/strong>, tenemos que agregar algunas lineas en \/opt\/sonar\/conf\/sonar.properties. Entre ellas el usuario y password de Base de Datos, el puerto que vamos a consultar y desde donde se podr\u00e1 consultar. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sonar.jdbc.username=sonar\nsonar.jdbc.password='TUPASSWORD'\nsonar.jdbc.url=jdbc:postgresql:\/\/localhost\/sonar\nsonar.web.javaAdditionalOpts=-server\nsonar.web.port=30000\nsonar.web.host=0.0.0.0<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>De esta manera ya lo vamos a tener configurado para que trabaje en el puerto 30000, en localhost, y podr\u00e1 accederse de cualquier lugar. Si llegar\u00edamos a poner un Proxy Reverso, como <strong>Nginx<\/strong> o <strong>Apache<\/strong>, seria importante cambiar el 0.0.0.0 por 127.0.0.1.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear el archivo para manejar el servicio. Creamos <em>\/etc\/systemd\/system\/sonar.service<\/em> y copiamos lo siguiente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>[Unit]\nDescription=SonarQube service\nAfter=syslog.target network.target\n\n[Service]\nType=forking\n\nExecStart=\/opt\/sonar\/bin\/linux-x86-64\/sonar.sh start\nExecStop=\/opt\/sonar\/bin\/linux-x86-64\/sonar.sh stop\n\nUser=sonar\nGroup=sonar\nRestart=always\n\n[Install]\nWantedBy=multi-user.target<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ultimos retoques para levantar el servicio.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo systemctl daemon-reload\nsudo systemctl enable sonar\nsudo systemctl start sonar &amp;&amp; systemctl status sonar<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos ver si estamos en linea. Hacemos un:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>curl http:\/\/127.0.0.1:30000<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Nos deber\u00eda salir algo asi:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":373,\"sizeSlug\":\"large\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-21-a-las-21.23.01.png?fit=640%2C523&amp;ssl=1\" alt=\"\" class=\"wp-image-373\"\/><figcaption>curl<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya podr\u00edamos verlo en nuestro navegador.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":374,\"sizeSlug\":\"large\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-21-a-las-21.25.20.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-374\"\/><figcaption>http:\/\/127.0.0.1:30000<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En la pr\u00f3xima entrada conectaremos Jenkins, via Sonar Scanner, para realizar un relevamiento de C\u00f3digo sobre <strong>Python<\/strong>. <\/p>\n<!-- \/wp:paragraph -->","Excerpt":"An\u00e1lisis de C\u00f3digo SAST con SonarQube en Pipeline de Jenkins.","Date":"2019-12-22 23:24:05","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=370"},{"ID":"382","Title":"An\u00e1lisis de C\u00f3digo en CI\/CD con SonarQube. Parte 2.","Content":"<!-- wp:paragraph -->\n<p>Ya tenemos nuestro servidor de <strong>SonarQube<\/strong> funcionando, en base al <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/analisis-de-codigo-en-ci-cd-con-sonarqube-parte-1\/\">primer tutorial<\/a>. Ahora nos queda hacerlo formar parte de nuestro <em>Pipeline<\/em>.  Lo primero que debemos hacer es instalar, en <strong>Jenkins<\/strong>, sonar-scanner. Para ello vamos a conectarnos, via SSH, e instalarlo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/binaries.sonarsource.com\/Distribution\/sonar-scanner-cli\/\">Aca<\/a> les dejo para realizar la descarga y la <a href=\"https:\/\/docs.sonarqube.org\/latest\/analysis\/scan\/sonarscanner\/\">documentaci\u00f3n oficial<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Realizamos los siguientes comandos!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>wget https:\/\/binaries.sonarsource.com\/Distribution\/sonar-scanner-cli\/sonar-scanner-cli-4.2.0.1873.zip\nunzip sonar-scanner-cli-4.2.0.1873.zip\nmv sonar-scanner-cli-4.2.0.1873-linux \/opt\/sonar-scanner <\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Configuramos sonar-scanner. Para ello en <em>\/opt\/sonar-scanner\/conf\/sonar-scanner.properties<\/em>, agregamos la direcci\u00f3n de nuestro <strong>SonarQube<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"theme\":\"oceanic-next\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>#Configure here general information about the environment, such as SonarQube se&gt;\n#No information about specific project should appear here\n\n#----- Default SonarQube server\nsonar.host.url=http:\/\/DIRECCIONDELSERVIDORSONARQUBE:30000\n\n#----- Default source code encoding\n#sonar.sourceEncoding=UTF-8<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ingresamos en Jenkins para la instalaci\u00f3n del PlugIn.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Manage Jenkins<\/code>&nbsp;&gt;&nbsp;<code>Manage Plugins<\/code>&nbsp;&gt;&nbsp;<code>Avalable<\/code>&nbsp;&gt;&nbsp;<code>SonarQube scanner<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Configuramos el PlugIn, indicando la ruta de sonar-scanner.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Manage Jenkins<\/code>&nbsp;&gt;&nbsp;<code>Global Tool Configuration<\/code>&nbsp;&gt;&nbsp;<code>SonarQube Scanner<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":383,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.41.21.png\" alt=\"\" class=\"wp-image-383\"\/><figcaption>PlugIn<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Tenemos que configurar el <em>Token<\/em> de Autenticaci\u00f3n. Para ello, primero, debemos ingresar a <strong>SonarQube<\/strong>, por defecto el usuario y contrase\u00f1a es admin\/admin. Una vez autenticados:  <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":384,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.45.03.png\" alt=\"\" class=\"wp-image-384\"\/><figcaption>Generaci\u00f3n de Token<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Lo copiamos!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":385,\"sizeSlug\":\"large\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.24.48.png?fit=640%2C564&amp;ssl=1\" alt=\"\" class=\"wp-image-385\"\/><figcaption>Copiamos el Token.<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya con el <em>Token<\/em>, volvemos a configurar <strong>Jenkins<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Manage Jenkins<\/code>&nbsp;&gt;&nbsp;<code>Configure Systems<\/code>&nbsp;&gt;&nbsp;<code>SonarQube Servers<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":386,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.52.36.png\" alt=\"\" class=\"wp-image-386\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Dependiendo de la version de <strong>Jenkins<\/strong>, que esten utilizando, tengan que agregar el Token como Secret Text.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Llego el momento de crear la <em>Tarea<\/em>. En mi caso vamos a revisar el c\u00f3digo de  un proyecto, sencillo, en <strong>Python<\/strong>. Importante revisar en el MarketPlace, de <strong>SonarQube<\/strong>, si tenemos el PlugIn del lenguaje a auditar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Configuramos el Source, del proyecto:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":387,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.22.51.png\" alt=\"\" class=\"wp-image-387\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Agregamos las variables de <strong>SonarQube<\/strong>, para la conexi\u00f3n y la creaci\u00f3n del proyecto.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":388,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-20.23.14.png\" alt=\"\" class=\"wp-image-388\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Ejecutamos! Al finalizar, si obtuvimos Success, podr\u00edamos chequear los <em>Issues<\/em> del c\u00f3digo. Con esa informaci\u00f3n disparar resoluciones, bloquear el deploy, etc. Todo se basara en las configuraciones de nuestro <strong>Quality Gates<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":389,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-21.05.06.png\" alt=\"\" class=\"wp-image-389\"\/><figcaption>Success Jenkins Task<\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":390,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-21.11.56.png\" alt=\"\" class=\"wp-image-390\"\/><figcaption>Vemos el reporte del Job <em>proyectKey<\/em><\/figcaption><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":391,\"sizeSlug\":\"full\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-25-a-las-21.12.43.png\" alt=\"\" class=\"wp-image-391\"\/><\/figure><\/div>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Podemos ver las recomendaciones que nos otorga <strong>SonarQube<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seguramente tengamos mucho para mejorar u optimizar. \u00a1Espero que les sirva!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"An\u00e1lisis de C\u00f3digo SAST con SonarQube en Pipeline de Jenkins.","Date":"2019-12-26 00:54:25","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=382"},{"ID":"399","Title":"An\u00e1lisis de Dependencias con Dependency Check","Content":"<!-- wp:paragraph -->\n<p>An\u00e1lisis de Dependencias con Dependency Check. Las aplicaciones mod<a href=\"https:\/\/www.24bottlesclima.com\/\"><strong>24bottlesclima<\/strong><\/a> <a href=\"https:\/\/www.akuscarpe.com\/\"><strong>akuscarpe<\/strong><\/a> <a href=\"https:\/\/www.ovyescarpe.com\/\"><strong>ovyescarpe<\/strong><\/a> <a href=\"https:\/\/www.fracominaabiti.com\/\"><strong>fracominaabiti<\/strong><\/a> <a href=\"https:\/\/www.scarpeovye.com\/\"><strong>scarpeovye<\/strong><\/a> <a href=\"https:\/\/www.loevenichmutze.com\/\"><strong>loevenichmutze<\/strong><\/a> <a href=\"https:\/\/www.loevenichhutkaufen.com\/\"><strong>loevenichhutkaufen<\/strong><\/a>  <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.uspoloassnscarpe.com\/\"><strong>uspoloassnscarpe<\/strong><\/a>  <a href=\"https:\/\/www.bestcouplestoysonline.com\/pasante-kondom\/\"><strong>pasante  kondom<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a>  <a href=\"https:\/\/www.andcamiciesaldi.com\/\"><strong>andcamiciesaldi<\/strong><\/a>  <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne  abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.blundstoneprezzi.com\/\"><strong>blundstoneprezzi<\/strong><\/a>  <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> ernas aprovechan la disponibilidad de los componentes existentes para su uso como bloques de construcci\u00f3n en el desarrollo de aplicaciones. Al utilizar los componentes existentes, las organizaciones pueden reducir dr\u00e1sticamente sus tiempos. Sin embargo, la re utilizaci\u00f3n de los componentes existentes tiene un costo. Las organizaciones que construyen sobre los componentes existentes asumen el riesgo por el software que <em>no crearon<\/em>. Las <strong>vulnerabilidades<\/strong> de los componentes de terceros son heredadas por todas las aplicaciones que utilizan esos componentes. Los Top Ten de<a href=\"https:\/\/www.anthonyvoevodin.com\/%D1%80%D0%B0%D0%B7%D0%BA%D0%BB%D0%BE%D0%BD%D0%B8%D1%82%D0%B5%D0%BB-%D0%BF%D0%B2%D1%86-%D0%BF%D0%BF%D0%BA-%D1%8440-%D1%8440-87%D0%B3%D1%80%D0%B0%D0%B4%D1%83%D1%81%D0%B0\"><strong>\u0440\u0430\u0437\u043a\u043b\u043e\u043d\u0438\u0442\u0435\u043b \u043f\u0432\u0446 \u043f\u043f\u043a \u044440 \u044440-87\u0433\u0440\u0430\u0434\u0443\u0441\u0430\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/wildleder-portemonnaie-damen\"><strong>wildleder portemonnaie damen\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/come-pulire-una-caffettiera-di-alluminio\"><strong>come pulire una caffettiera di alluminio\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/tablo-soba\"><strong>tablo soba\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/guarnitura-kcnc-mtb\"><strong>guarnitura kcnc mtb\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/motoros-sisak-%C3%A0rg\"><strong>motoros sisak \u00e0rg\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/rte-carta\"><strong>rte carta\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/logitech-dongle\"><strong>logitech dongle\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%90%D7%95%D7%A4%D7%A0%D7%99%D7%99%D7%9D-%D7%A2%D7%9D-%D7%9E%D7%A0%D7%95%D7%A2-%D7%A2%D7%96%D7%A8-%D7%97%D7%A9%D7%9E%D7%9C%D7%99\"><strong>\u05d0\u05d5\u05e4\u05e0\u05d9\u05d9\u05dd \u05e2\u05dd \u05de\u05e0\u05d5\u05e2 \u05e2\u05d6\u05e8 \u05d7\u05e9\u05de\u05dc\u05d9\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/modern-love-%D9%85%D8%AA%D8%B1%D8%AC%D9%85-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9-2\"><strong>modern love \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u062d\u0644\u0642\u0629 2\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/adidas-t-shirt-1972\"><strong>adidas t shirt 1972\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/pianta-viola-pendente\"><strong>pianta viola pendente\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%A0%D7%97%D7%93-%D7%9E%D7%A9%D7%A7%D7%A4%D7%99%D7%99%D7%9D\"><strong>\u05e0\u05d7\u05d3 \u05de\u05e9\u05e7\u05e4\u05d9\u05d9\u05dd\u00a0<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/kinderwagen-peg-perego-pliko-p3\"><strong>kinderwagen peg perego pliko p3\u00a0<\/strong><\/a> <a href=\"https:\/\/www.idobusiness.net\/amarillo-pastel-pantone\"><strong>amarillo pastel pantone\u00a0<\/strong><\/a> OWASP (2013 y 2017) reconocen el riesgo de usar componentes con vulnerabilidades conocidas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Dependency-Check<\/strong> permite que sus equipos de DevOps aceleren mientras siguen controlando el uso de los componentes y cualquier riesgo heredado.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar <a href=\"https:\/\/jeremylong.github.io\/DependencyCheck\/dependency-check-cli\/\">Dependency-Check Cli<\/a>. Vamos a descargar y moverlo la carpeta \/opt de nuestra instalaci\u00f3n de <strong>Jenkins<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>wget https:\/\/dl.bintray.com\/jeremy-long\/owasp\/dependency-check-5.2.4-release.zip\nsudo unzip dependency-check-5.2.4-release.zip\nsudo mv dependency-check \/opt\/\nsudo chown -R $USER \/opt\/dependency-check<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Instalamos el PlugIn en <strong>Jenkins<\/strong> y configuramos la ruta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":406,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-27-a-las-12.30.42.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-406\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Reiniciamos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":407,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-27-a-las-12.33.01.png?fit=640%2C640&amp;ssl=1\" alt=\"Instalacion Dependency Check en Jenkins.\" class=\"wp-image-407\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Configuramos la ruta, correspondiente en Global Configuration Tool.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":409,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.10.35.png?fit=640%2C448&amp;ssl=1\" alt=\"Ruta Dependency Check Local\" class=\"wp-image-409\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a configurar el Job, que hicimos en los tutoriales anteriores, para revisar las dependencias que importa el <strong>Python<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":410,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.12.13.png?fit=640%2C640&amp;ssl=1\" alt=\"Dependency Check Script\" class=\"wp-image-410\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En la documentaci\u00f3n podemos ver muchos Flags para configurar. En nuestro caso vamos a ir con algo sencillo. \u00a1Lo ejecutamos! No solo hemos revisado la calidad del Software, con <strong>SonarQube<\/strong>, si no que ahora tendremos el informe de las dependencias utilizadas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":411,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.11.47.png?fit=640%2C640&amp;ssl=1\" alt=\"Output Job\" class=\"wp-image-411\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En el Flag <em>--out<\/em> ubicamos el informe en la carpeta del proyecto, pero podr\u00edamos enviarlo por mail, realizar tareas, etc. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":412,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.15.58.png?fit=640%2C640&amp;ssl=1\" alt=\"Carpeta Proyecto\" class=\"wp-image-412\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":413,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.16.20.png?fit=640%2C463&amp;ssl=1\" alt=\"Reportes de Dependency Check\" class=\"wp-image-413\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Vamos a picar, la version HTML, para darle una mirada!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":414,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2019\/12\/Captura-de-Pantalla-2019-12-28-a-las-21.16.35.png?fit=640%2C640&amp;ssl=1\" alt=\"Reporte Dependency Check\" class=\"wp-image-414\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos forma de saber si nuestras dependencias tienen Bugs. Listo para hacer un An\u00e1lisis de Dependencias con Dependency Check. Les recomiendo que le peguen una mirada a <strong><a href=\"https:\/\/dependencytrack.org\/\">Dependency-Track<\/a><\/strong> una version Web para hacer el seguimiento.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Esto es parte de mejorar nuestro Pipeline, nuestra Seguridad y sobre todo nuestros sistemas. Podr\u00eda resultar interesante el formato <strong>JSON<\/strong>, de reporte, para poder generar Tickets, por ejemplo, en <strong>JIRA<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero que les sirva!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No dejen de revisar los art\u00edculos, anteriores, de <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/analisis-de-codigo-en-ci-cd-con-sonarqube-parte-1\/\">An\u00e1lisis SAST con <strong>SonarQube<\/strong> y <strong>Jenkins<\/strong>.<\/a><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"An\u00e1lisis de dependencias con Dependency Check en el Pipeline de Jenkins.","Date":"2019-12-29 00:46:35","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=399"},{"ID":"430","Title":"Seguridad de la Informacion  Agile a Escala","Content":"<!-- wp:paragraph -->\n<p>Les dejo esta charla sobre <a href=\"http:\/\/informatica.blogs.uoc.edu\/2018\/12\/18\/modelos-de-agilidad-en-escala\/\">Agile a Escala<\/a> que dimos con los chicos de  <p>Les dejo esta charla sobre <a href=\"http:\/\/informatica.blogs.uoc.edu\/2018\/12\/18\/modelos-de-agilidad-en-escala\/\">Agile a Escala<\/a> que dimos con los chicos de ISC2, capitulo Argentina. Como nos estamos organizando, las c<a href=\"https:\/\/www.blundstoneprezzi.com\/\"><strong>blundstoneprezzi<\/strong><\/a> <a href=\"https:\/\/www.lecopavillon.com\/\"><strong>lecopavillon<\/strong><\/a> <a href=\"https:\/\/www.donkeywinkekatze.com\/\"><strong>donkeywinkekatze<\/strong><\/a> <a href=\"https:\/\/www.fracominaoutlet.com\/\"><strong>fracominaoutlet<\/strong><\/a> <a href=\"https:\/\/www.marellasaldi.com\/\"><strong>marellasaldi<\/strong><\/a> <a href=\"https:\/\/www.scarpeovye.com\/\"><strong>scarpeovye<\/strong><\/a> <a href=\"https:\/\/www.loevenichhut.com\/\"><strong>loevenichhut<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.negozigeox.com\/\"><strong>negozigeox<\/strong><\/a> <a href=\"https:\/\/www.donkeyluckycat.com\/\"><strong>donkeyluckycat<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.maisenzashop.com\/\"><strong>maisenzashop<\/strong><\/a> <a href=\"https:\/\/www.loevenichmutze.com\/\"><strong>loevenichmutze<\/strong><\/a> <a href=\"https:\/\/www.and-camicie.com\/\"><strong>and-camicie<\/strong><\/a> <a href=\"https:\/\/www.legioiedigea.com\/\"><strong>legioiedigea<\/strong><\/a>eremonias que tenemos planteadas y la implementaci\u00f3n de Security Champion.<\/p> ISC2, capitulo Argentina. Como nos estamos organizando, las ceremonias que tenemos planteadas y la implementaci\u00f3n de Security Champion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"https:\/\/www.youtube.com\/watch?v=7wMLuK8FUk8\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"aligncenter wp-embed-aspect-4-3 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube aligncenter wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/www.youtube.com\/watch?v=7wMLuK8FUk8\n<\/div><figcaption class=\"wp-element-caption\">Link a YouTube<\/figcaption><\/figure>\n<!-- \/wp:embed -->","Excerpt":"Les dejo esta charla sobre Agile a Escala que dimos con los chicos de ISC2, capitulo Argentina. Como nos estamos organizando, las ceremonias que tenemos planteadas y la implementaci\u00f3n de Security Champion.","Date":"2020-03-23 00:30:07","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=430"},{"ID":"450","Title":"Seguridad Serverless, Higiene de Cuentas IAM.","Content":"<!-- wp:paragraph -->\n<p>\u00bfC\u00f3mo hacer para mantener \u201cla Higiene\u201d de nuestos usuarios IAM? Es<a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a> <a href=\"https:\/\/www.ynotoutlet.org\/\"><strong>ynotoutlet<\/strong><\/a> <a href=\"https:\/\/www.toysonlinecheap.com\/lingerie-super-sexy\/\"><strong>lingerie super sexy<\/strong><\/a> <a href=\"https:\/\/www.negozigeox.com\/\"><strong>negozigeox<\/strong><\/a> <a href=\"https:\/\/www.borsegabsoutlet.com\/\"><strong>borsegabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a> <a href=\"https:\/\/www.blaineharmont.com\/\"><strong>blaineharmont<\/strong><\/a> <a href=\"https:\/\/www.guardianiscarpe.com\/\"><strong>guardianiscarpe<\/strong><\/a> <a href=\"https:\/\/www.von-dutch.org\/\"><strong>von-dutch<\/strong><\/a> <a href=\"https:\/\/www.maisenzashop.com\/\"><strong>maisenzashop<\/strong><\/a> <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> <a href=\"https:\/\/www.marellaabiti.com\/\"><strong>marellaabiti<\/strong><\/a> <a href=\"https:\/\/www.mandarinaducksaldi.com\/\"><strong>mandarinaducksaldi<\/strong><\/a> <a href=\"https:\/\/www.mandarinaduckoutlet.com\/\"><strong>mandarinaduckoutlet<\/strong><\/a> <a href=\"https:\/\/www.mandarinaducksaldi.com\/\"><strong>mandarinaducksaldi<\/strong><\/a> la pregunta que se me genera, sin esfuerzo operacional.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>Un poco de contexto<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>AWS Access Keys<\/strong> son las credenciales utilizadas por el usuario de IAM o el Master de la cuenta de AWS. Son utilizadas para la parte programatica de AWS, en <strong>AWS CLI <\/strong>o <strong>AWS API<\/strong> (direct<a href=\"https:\/\/www.orhanogluyapi.com\/%D7%A4%D7%90%D7%95%D7%9C%D7%99%D7%9F-%D7%A9%D7%9E%D7%9C%D7%95%D7%AA-%D7%9B%D7%9C%D7%94\"><strong>\u05e4\u05d0\u05d5\u05dc\u05d9\u05df  \u05e9\u05de\u05dc\u05d5\u05ea \u05db\u05dc\u05d4&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/cape-of-stranglethorn-quests\"><strong>cape of  stranglethorn quests&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/modern-love-%D9%85%D8%AA%D8%B1%D8%AC%D9%85-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9-2\"><strong>modern  love \u0645\u062a\u0631\u062c\u0645 \u0627\u0644\u062d\u0644\u0642\u0629 2&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/brita-wasserentkalker\"><strong>brita  wasserentkalker&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/anello-con-montatura-a-binario\"><strong>anello  con montatura a binario&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/lego-harry-potter-voldemort\"><strong>lego  harry potter voldemort&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/cizme-lungi-sclipici\"><strong>cizme lungi  sclipici&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/tommy-hilfiger-%D0%BE%D0%B1%D1%83%D0%B2%D1%8C-%D0%BE%D1%82%D0%B7%D1%8B%D0%B2%D1%8B\"><strong>tommy  hilfiger \u043e\u0431\u0443\u0432\u044c \u043e\u0442\u0437\u044b\u0432\u044b&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/oggetti-per-arredamento-moderno-amazon\"><strong>oggetti  per arredamento moderno amazon&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/%D0%BA%D0%BE%D0%BB%D0%B0%D0%BD%D0%B8-%D0%B7%D0%B0-%D0%BE%D1%82%D1%81%D0%BB%D0%B0%D0%B1%D0%B2%D0%B0%D0%BD%D0%B5-%D1%82%D0%B8%D0%BF-%D1%81%D0%B0%D1%83%D0%BD%D0%B0\"><strong>\u043a\u043e\u043b\u0430\u043d\u0438  \u0437\u0430 \u043e\u0442\u0441\u043b\u0430\u0431\u0432\u0430\u043d\u0435 \u0442\u0438\u043f \u0441\u0430\u0443\u043d\u0430&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/ecco-terracruise-low-44\"><strong>ecco  terracruise low 44&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/keds-black-slip-ons\"><strong>keds black slip  ons&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.idobusiness.net\/hetalia-merch\"><strong>hetalia  merch&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/liu-jo-muske-majice\"><strong>liu  jo muske majice&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/filtru-de-aer-matiz\"><strong>filtru de  aer matiz&nbsp;<\/strong><\/a> amente o utilizando el <strong>SDK<\/strong> de AWS). Las claves de acceso constan de dos partes: un <em>ID de clave de acceso<\/em> y una <em>clave de acceso secreta<\/em>. Al igual que el nombre de usuario y la contrase\u00f1a, tenemos que proporcionar ambos juntos para autentificar las solicitudes. Una recomendaci\u00f3n de seguridad sugiere que s\u00f3lo debemos utilizar los roles IAM en lugar de las claves de acceso, pero a\u00fan as\u00ed en algunos casos necesitamos tener las claves de acceso. Estas claves de acceso proporcionar\u00e1 a un usuario el acceso completo a un conjunto de recursos definidos por la Pol\u00edtica de Usuario IAM. Por lo tanto, si las claves de acceso se pierden o fueron a manos equivocadas, sus recursos estarian comprometidos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hay un conjunto de <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#remove-credentials\">Best Practice IAM<\/a>, definidas por AWS, para ayudar a asegurar sus recursos. Por ejemplo, relacionado con IAM tenemos:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Do Not Share Access Keys<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Las claves de acceso no deben ser compartidas en p\u00fablico y deben ser guardadas en un lugar seguro.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Rotate Credentials Regularly<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Debemos rotar las credenciales regularmente. Si una contrase\u00f1a o clave de acceso se ve comprometida sin su conocimiento, debe rotarse o deshabilitarse. Tenemos en cuenta que podriamos tener servicios comprometidos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Remove Unnecessary Credentials<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Es importante eliminar las contrase\u00f1as y las claves de acceso no utilizadas. \u00bf Para que tener cuentas, con permisos, sin utilizar? No tiene sentido y es un riesgo a mitigar. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si tenemos muchas cuentas de AWS esta tarea puede ser tediosa. Por eso, como en muchas actividades de la Seguridad moderna, debemos automatizar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>Compliance<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Si revisamos los <a href=\"https:\/\/aws.amazon.com\/es\/blogs\/aws-spanish\/10-pasos-para-evaluar-la-conformidad-de-seguridad-en-su-entorno-aws\/\"><strong>CIS Controls AWS Foundations<\/strong><\/a> vemos los siguientes consejos:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":451,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen.png?fit=640%2C423&amp;ssl=1\" alt=\"\" class=\"wp-image-451\"\/><figcaption class=\"wp-element-caption\">CIS Controls AWS<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Debemos deshabilitar las credenciales, no utilizadas, por mas de 90 dias y rotarlas, cada 90 dias. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>Estrategia<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para cumplir con los siguientes requisitos de cumplimiento, vamos a implementaremos una funci\u00f3n Lambda que se encargar\u00e1 de lo siguiente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph {\"fontSize\":\"normal\"} -->\n<p class=\"has-normal-font-size\"><strong>Auditoria<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Comprobar el cumplimiento todos los viernes, via <strong>AWS CloudWatch<\/strong>, y enviar un reporte atraves de <strong>AWS SNS<\/strong> al equipo de SecOps.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Otras cosas que podriamos agregar serian, por ejemplo:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Saneamiento<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si no se utiliza la Clave de Acceso desde que los \u00faltimos 45 d\u00edas est\u00e1n \"Activos\", deshabilite la Clave de Acceso y publique el mensaje al equipo de SecOps.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Rotacion<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si la creaci\u00f3n de la Clave de Acceso ha pasado los 85 d\u00edas, genere una nueva Clave de Acceso para el usuario y publique el mensaje al equipo de SecOps. El equipo de SecOps informar\u00e1 al usuario para que actualice todas sus aplicaciones con la nueva Clave de Acceso. Borrar la antigua Clave de Acceso, autom\u00e1ticamente, despu\u00e9s de 90 d\u00edas. Esta, en particular, habria que revisar el procedimiento.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Por el momento vamos a crear una funcion que audite, en Python.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"python\",\"mime\":\"text\/x-python\",\"theme\":\"3024-night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Lista IAM con Llaves de mas de 90 Dias.\n\nimport datetime, boto3, os, json\nfrom botocore.exceptions import ClientError\n\n# Variables Globales.\nVariableGlobal  = {}\nVariableGlobal['Owner']                 = &quot;Santiago Fernandez&quot;\nVariableGlobal['Environment']           = &quot;Test&quot;\nVariableGlobal['REGION_NAME']           = &quot;us-east-1&quot;\nVariableGlobal['tagName']               = &quot;SecOps&quot;\nVariableGlobal['key_age']               = &quot;90&quot;\nVariableGlobal['SecOpsTopicArn']        = &quot;&quot;\n\ndef get_usr_old_keys( keyAge ):\n    client = boto3.client('iam',region_name = VariableGlobal['REGION_NAME'])\n    usersList=client.list_users()\n   \n    # Delta entre dia de la fecha y los dias que ingresamos, en la viriable 'key_age'.\n    timeLimit=datetime.datetime.now() - datetime.timedelta( days = int(keyAge) )\n    # Primer linea de mensaje.\n    usrsWithOldKeys = {'Users':[],'Description':'Lista de Usuarios con llaves mas viejas que (&gt;=) {} dias'.format(keyAge),'KeyAgeCutOff':keyAge}\n\n    # Iterar a trav\u00e9s de la lista de usuarios y comparar con la &quot;edad de las llaves&quot;. Marcar los que tienen llaves antiguas.\n    for k in usersList['Users']:\n        accessKeys=client.list_access_keys(UserName=k['UserName'])\n    \n        # Iterar sobre los Usuarios.\n        for key in accessKeys['AccessKeyMetadata']:\n            if key['CreateDate'].date() &lt;= timeLimit.date():\n                usrsWithOldKeys['Users'].append({ 'UserName': k['UserName'], 'KeyAgeInDays': (datetime.date.today() - key['CreateDate'].date()).days })\n                \n        # Lineas del mensaje, con la totalidad. \n        if not usrsWithOldKeys['Users']:\n            usrsWithOldKeys['OldKeyCount'] = 'Encontramos 0 claves que son m\u00e1s antiguas que {} dias'.format(keyAge)\n        else:\n            usrsWithOldKeys['OldKeyCount'] = 'Encontramos {0} que son mas viejas que {1} dias'.format(len(usrsWithOldKeys['Users']), keyAge)\n\n    return usrsWithOldKeys\n\ndef sns_notificacion(usrsWithOldKeys):\n    snsClient = boto3.client('sns',region_name = VariableGlobal['REGION_NAME'])\n    try:\n        # Enviamos el Mensaje, via SNS. Hacemos el Dump, del mensaje.\n        snsClient.get_topic_attributes( TopicArn= VariableGlobal['SecOpsTopicArn'] )\n        snsClient.publish(TopicArn = VariableGlobal['SecOpsTopicArn'], Message = json.dumps(usrsWithOldKeys, indent=4) )\n        usrsWithOldKeys['SecOpsEmailed']=&quot;Si&quot;\n    except ClientError as e:\n        # No se pudo enviar el Mensaje.\n        usrsWithOldKeys['SecOpsEmailed']=&quot;No - SecOpsTopicArn es Incorrecto&quot;\n\n\ndef lambda_handler(event, context):   \n    # Enviamos las variables, preconfiguradas. Dias y SNS.\n    VariableGlobal['key_age'] = int(os.getenv('key_age',90))\n    VariableGlobal['SecOpsTopicArn']=str(os.getenv('SecOpsTopicArn'))\n\n    users_old_key = get_usr_old_keys( VariableGlobal['key_age'] )\n    sns_notificacion(users_old_key)\n\n    return users_old_key<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong>Hands On<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Funcion Lambda<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En la consola de Lambda de AWS usando el desplegable \"Servicios\" y busca \"Lambda\". Dentro de la consola Lambda, vaya a \"Funciones\" y presione \"Crear funci\u00f3n\". Rellene la informaci\u00f3n b\u00e1sica necesaria para la funci\u00f3n Lambda de AWS y siga adelante.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":453,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-1.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-453\"\/><figcaption class=\"wp-element-caption\">Funcion Lambda<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Se creo el Rol, automaticamente, pero podriamos reutilizar alguno con los permisos pertinentes. Depende de cada uno y como organiza su IAM.  Vamos a modificarlo para poder pulir los permisos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":455,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-3.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-455\"\/><figcaption class=\"wp-element-caption\">Edicion del Rol<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Buscamos el Rol que creamos y agregamos las politicas de permisos. En nuestro caso, por ahora, <strong>IAMReadOnlyAccess<\/strong> y <strong>AmazonSNSFullAccess<\/strong>. Tengan en cuenta si modifican la funcion Lambda para \"Inhabilitar\" deberian tener derechos de escritura sobre IAM.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":456,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-4.png?fit=640%2C499&amp;ssl=1\" alt=\"\" class=\"wp-image-456\"\/><figcaption class=\"wp-element-caption\">Politicas<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>SNS<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear un Topico en AWS SNS.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":458,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-5.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-458\"\/><figcaption class=\"wp-element-caption\">Creacion de Topico<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora agregamos los correos, del equipo de SecOps, generando las suscripciones. Podriamos haber ejecutado otra Lambda o generar un SNS Json para poder realizar diferentes acciones. \u00a1Tenemos muchas opciones para jugar!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":459,\"width\":580,\"height\":309,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large is-resized\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-6.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-459\" width=\"580\" height=\"309\"\/><figcaption class=\"wp-element-caption\">Suscripcion<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En las variables de entorno, de la funcion Lambda, debemos especificar el <strong>ARN<\/strong> del tema del <strong>AWS SNS<\/strong>. Asi que copienla para agregarla.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":470,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-12.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-470\"\/><figcaption class=\"wp-element-caption\">Variable de Entorno<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Vamos a probar nuestra funcion!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":461,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-8.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-461\"\/><figcaption class=\"wp-element-caption\">Funcion Lambda<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Excelente! Ya nos esta reportando, lo que requeriamos. \u00a1Tenemos un usuario que tiene las mismas llaves hace 126 dias! El equipo de SecOps debe de tomar cartas en el asunto. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Revisamos el correo, donde deberiamos de tener la notificacion via SNS.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":462,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-9.png?fit=640%2C424&amp;ssl=1\" alt=\"\" class=\"wp-image-462\"\/><figcaption class=\"wp-element-caption\">Bandeja de Entrada<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Vamos a automatizar el Trigger! Con AWS CloudWatch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":463,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-10.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-463\"\/><figcaption class=\"wp-element-caption\">CloudWatch<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En mi caso, voy hacer que corra todos los Viernes. Pero podemos poner las condiciones que necesitemos en el Cron.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":464,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/imagen-11.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-464\"\/><figcaption class=\"wp-element-caption\">Cron<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero que les sirva!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Todo esto es un rejunte de informaci\u00f3n de Internet. Espero lo utilicen y mejoren, a su gusto. Esto es un gran ejemplo de Seguridad Serverless. En pr\u00f3ximas entradas vamos pulir la funci\u00f3n y crear algunas Lambdas mas de Seguridad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cabe aclarar que estos servicios pueden solventarlos con Security Hub, sin necesidad de Codear. \u00a1Pero pierde la gracia!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Seguridad Serverless con AWS Lambda ejecutada por AWS CloudWatch y con notificaciones via SNS.","Date":"2020-05-13 13:52:26","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=450"},{"ID":"479","Title":"Seguridad en Containers, escaneo en b\u00fasqueda de Vulnerabilidades.","Content":"<!-- wp:paragraph -->\n<p>En esta entrada v<a href=\"https:\/\/www.saldigeox.com\/\"><strong>saldigeox<\/strong><\/a> <a href=\"https:\/\/www.blaineharmont.com\/\"><strong>blaineharmont<\/strong><\/a> <a href=\"https:\/\/www.marellaoutlet.com\/\"><strong>marellaoutlet<\/strong><\/a> <a href=\"https:\/\/www.saldigeox.com\/\"><strong>saldigeox<\/strong><\/a> <a href=\"https:\/\/www.ovyescarpe.com\/\"><strong>ovyescarpe<\/strong><\/a> <a href=\"https:\/\/www.akutrekkingshop.com\/\"><strong>akutrekkingshop<\/strong><\/a> <a href=\"https:\/\/www.harmontblainescarpe.com\/\"><strong>harmontblainescarpe<\/strong><\/a> <a href=\"https:\/\/www.donkeyluckycat.com\/\"><strong>donkeyluckycat<\/strong><\/a> <a href=\"https:\/\/www.24bottles.org\/\"><strong>24bottles<\/strong><\/a> <a href=\"https:\/\/www.ynotsaldi.com\/\"><strong>ynotsaldi<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> <a href=\"https:\/\/www.tatacalzature.com\/\"><strong>tatacalzature<\/strong><\/a> <a href=\"https:\/\/www.moorecains.com\/\"><strong>moorecains<\/strong><\/a> <a href=\"https:\/\/www.ynotsaldi.com\/\"><strong>ynotsaldi<\/strong><\/a>amos a ver como podemos realizar un escaneado de nuestros contenedores con <strong>Trivy<\/strong> de <a href=\"https:\/\/www.aquasec.com\/\">AquaSec<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><a href=\"https:\/\/github.com\/aquasecurity\/trivy#installation\" target=\"_blank\" rel=\"noreferrer noopener\">Trivy<\/a><\/strong> es una herramienta Open Source para escanear im\u00e1genes de contenedores en busca de vulnerabilidades en los paquetes del sistema operativo y las dependencias de las aplicaciones.Vam<a href=\"https:\/\/www.skateplaceinc.com\/adidas-superstar-bot-metalic\"><strong>adidas  superstar bot metalic&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/s85956-adidas\"><strong>s85956  adidas&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/basket-veja-argent%C3%A9\"><strong>basket  veja argent\u00e9&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/modifica-per-giochi-3ds\"><strong>modifica per  giochi 3ds&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/%D1%87%D0%B5%D1%80%D0%B2%D0%B8%D0%BB%D0%BE-%D0%B2-%D1%80%D1%8A%D1%87%D0%B5%D0%BD-%D0%B1%D0%B0%D0%B3%D0%B0%D0%B6\"><strong>\u0447\u0435\u0440\u0432\u0438\u043b\u043e  \u0432 \u0440\u044a\u0447\u0435\u043d \u0431\u0430\u0433\u0430\u0436&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/plantronics-airpods\"><strong>plantronics  airpods&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/%D8%B1%D8%B3%D9%85-%D9%81%D9%86%D8%AC%D8%A7%D9%86-%D9%82%D9%87%D9%88%D8%A9-%D8%B3%D9%87%D9%84\"><strong>\u0631\u0633\u0645  \u0641\u0646\u062c\u0627\u0646 \u0642\u0647\u0648\u0629 \u0633\u0647\u0644&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%AA%D7%A0%D7%95%D7%A8-%D7%91%D7%99%D7%9C%D7%93-%D7%90%D7%99%D7%9F-%D7%90%D7%99%D7%99%D7%A1-%D7%9E%D7%95%D7%A6%D7%A8%D7%99-%D7%97%D7%A9%D7%9E%D7%9C\"><strong>\u05ea\u05e0\u05d5\u05e8  \u05d1\u05d9\u05dc\u05d3 \u05d0\u05d9\u05df \u05d0\u05d9\u05d9\u05e1 \u05de\u05d5\u05e6\u05e8\u05d9 \u05d7\u05e9\u05de\u05dc&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/%D7%93%D7%99%D7%95-%D7%9C%D7%9E%D7%93%D7%A4%D7%A1%D7%AA-%D7%91%D7%96%D7%95%D7%9C\"><strong>\u05d3\u05d9\u05d5  \u05dc\u05de\u05d3\u05e4\u05e1\u05ea \u05d1\u05d6\u05d5\u05dc&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/marine-stickers-for-boat\"><strong>marine  stickers for boat&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/obelink-tipi-tent\"><strong>obelink tipi  tent&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/suport-telefon-auto-allview\"><strong>suport  telefon auto allview&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/tapijt-kleden\"><strong>tapijt  kleden&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/frozen-schminktisch-toys-r-us\"><strong>frozen  schminktisch toys r us&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/%D0%B4%D0%B5%D1%82%D1%81%D0%BA%D0%B8-%D1%84%D0%BE%D0%BB%D0%BA%D0%BB%D0%BE%D1%80%D0%BD%D0%B8-%D0%BC%D1%83%D0%B7%D0%B8%D0%BA%D0%B0%D0%BB%D0%BD%D0%B8-%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B8\"><strong>\u0434\u0435\u0442\u0441\u043a\u0438  \u0444\u043e\u043b\u043a\u043b\u043e\u0440\u043d\u0438 \u043c\u0443\u0437\u0438\u043a\u0430\u043b\u043d\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438&nbsp;<\/strong><\/a> os a cubrir caracter\u00edsticas, uso y otras opciones disponibles. Lo mejor de todo que podemos agregarlo a nuestra CI, lo cual lo hace mas poderosa.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-vivid-cyan-blue-color\">Instalaci\u00f3n<\/mark><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>En mi caso voy hacerlo en Ubuntu agregando la fuente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"material\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo apt-get install wget apt-transport-https gnupg lsb-release\nwget -qO - https:\/\/aquasecurity.github.io\/trivy-repo\/deb\/public.key | sudo apt-key add -\necho deb https:\/\/aquasecurity.github.io\/trivy-repo\/deb $(lsb_release -sc) main | sudo tee -a \/etc\/apt\/sources.list.d\/trivy.list\nsudo apt-get update\nsudo apt-get install trivy<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p><strong>Trivy<\/strong> no es la unica opci\u00f3n que tenemos para esta tarea, podemos usar <a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/arminc\/clair-scanner\" target=\"_blank\">Clair<\/a> o <a rel=\"noreferrer noopener\" href=\"https:\/\/anchore.com\/\" target=\"_blank\">Anchore<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a trabajar, para esta prueba, en una imagen de mi DockerHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":480,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image.png?fit=640%2C545&amp;ssl=1\" alt=\"\" class=\"wp-image-480\"\/><figcaption class=\"wp-element-caption\">Docker Hub<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a bajar la imagen.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":483,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-3.png?fit=640%2C529&amp;ssl=1\" alt=\"\" class=\"wp-image-483\"\/><figcaption class=\"wp-element-caption\">docker pull<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-vivid-cyan-blue-color\">Uso<\/mark><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Hora de correr <strong>Trivy<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"fileName\":\"Shell\",\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"material\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>trivy safernandez666\/cicd_num5\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Seleccione una imagen a\u00f1eja, adrede, para que nos evidencie problemas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":484,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-4.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-484\"\/><figcaption class=\"wp-element-caption\">Output<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como ven esta imagen esta en un estado calamitoso. Podr\u00edamos ver el c\u00f3digo de salida, para poder jugar con el. Se puede forzar con --exit-code=1 para poder saber si pasa o no. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Con este comando, podemos ver la salida.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"material\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>echo $?<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Voy a probarlo una imagen de alpine, vieja, y otra nueva que no deber\u00eda tener vulnerabilidades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":486,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-6.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-486\"\/><figcaption class=\"wp-element-caption\">Imagen alpine:3.9.2<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>C\u00f3digo de salida igual a 1, por ende tiene vulnerabilidades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":488,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-8.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-488\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p> C\u00f3digo de salida igual a 0, por ende <strong>no<\/strong> tiene vulnerabilidades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Trivy<\/strong> soporta gran cantidad de Sistemas Operativos y dependencias, soporta gran cantidad de formatos de imagenes, .tar o OCI, y se puede agregar a diferentes CI's como Travis CI, CircleCI, Jenkins, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Podemos, tambien, tener salidas en <strong>JSON<\/strong> o Template y filtrar por <strong>Severidad<\/strong> o <strong>Tipo<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cuando <strong>Trivy<\/strong> comienza a escanear la imagen siempre actualiza la base de datos para tener la \u00faltima informaci\u00f3n almacenada y generalmente es r\u00e1pido. Pero esto se puede saltar usando la opci\u00f3n <em>-skip-update<\/em>. Es posible ignorar las vulnerabilidades que no pueden ser solucionadas usando la opci\u00f3n <em>--ignore-unfixed<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hagamos la prueba activando la salida y filtrando las Vulnerabilidades <strong>CRITICAS<\/strong> y <strong>HIGH<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":491,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-10.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-491\"\/><figcaption class=\"wp-element-caption\">Salida 1 con Filtros<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Aca les dejo la documentaci\u00f3n para agregar <strong>Trivy<\/strong> a los <a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/aquasecurity\/trivy#continuous-integration-ci\" target=\"_blank\">Pipeline<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Espero que les sirva para mejorar su infraestructura. \u00a1No solo de SAST &amp; DAST vive el DevSecOps!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><strong><span class=\"has-inline-color has-vivid-cyan-blue-color\">Referencias<\/span><\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/medium.com\/faun\/container-security-101-scanning-images-for-vulnerabilities-8030af2441ba\" target=\"_blank\" rel=\"noreferrer noopener\">Container Security<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a rel=\"noreferrer noopener\" href=\"https:\/\/www.youtube.com\/watch?v=wFIGUjcRLnU\" target=\"_blank\">Tweaking Trivy output to fit your workflow<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http:\/\/youtube.com\/watch?v=AzOBGm7XxOA&amp;t=66s\" target=\"_blank\" rel=\"noreferrer noopener\">Trivy - container image scanning<\/a><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2020-05-23 23:45:50","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=479"},{"ID":"501","Title":"Buscar Llaves & Secretos en Repositorios de GitHub & GitLab","Content":"<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Introducci\u00f3n<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Uno de los<a href=\"https:\/\/www.mandarinaduckoutlet.com\/\"><strong>mandarinaduckoutlet<\/strong><\/a> <a href=\"https:\/\/www.fracominasaldi.com\/\"><strong>fracominasaldi<\/strong><\/a> <a href=\"https:\/\/www.and-camicie.com\/\"><strong>and-camicie<\/strong><\/a> <a href=\"https:\/\/www.harmonte-blaine.com\/\"><strong>harmonte-blaine<\/strong><\/a> <a href=\"https:\/\/www.marellasaldi.com\/\"><strong>marellasaldi<\/strong><\/a> <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> <a href=\"https:\/\/www.saldibenetton.com\/\"><strong>saldibenetton<\/strong><\/a> <a href=\"https:\/\/www.moorecains.com\/\"><strong>moorecains<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.diego-dalla-palma.com\/\"><strong>diego-dalla-palma<\/strong><\/a> <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.lamilanesaborse.com\/\"><strong>lamilanesaborse<\/strong><\/a> <a href=\"https:\/\/www.24hbottle.com\/\"><strong>24hbottle<\/strong><\/a> grandes problemas que tenemos en nuestras compa\u00f1\u00edas es que los Dev's guardan contrase\u00f1as no encriptadas, secretos y cualquier tipo de datos no deseados en los repositorios GitHub y GitLab. Gitleaks te da una forma de escanear t<a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%AA%D7%A0%D7%95%D7%A8-%D7%91%D7%99%D7%9C%D7%93-%D7%90%D7%99%D7%9F-%D7%90%D7%99%D7%99%D7%A1-%D7%9E%D7%95%D7%A6%D7%A8%D7%99-%D7%97%D7%A9%D7%9E%D7%9C\"><strong>\u05ea\u05e0\u05d5\u05e8 \u05d1\u05d9\u05dc\u05d3 \u05d0\u05d9\u05df \u05d0\u05d9\u05d9\u05e1 \u05de\u05d5\u05e6\u05e8\u05d9 \u05d7\u05e9\u05de\u05dc\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/porto-moniz-madeira-live-webcam\"><strong>porto moniz madeira live webcam\u00a0<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/k%C3%A4rring-moppe\"><strong>k\u00e4rring moppe\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/tutto-echarpes-feulles-enfant\"><strong>tutto echarpes feulles enfant\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/can-you-connect-usb-microphone-to-soubd-card\"><strong>can you connect usb microphone to soubd card\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/puma-basket-trim-block\"><strong>puma basket trim block\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/jimmy-hex-tricouri\"><strong>jimmy hex tricouri\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/bioscalin-nutricolor-prezzo\"><strong>bioscalin nutricolor prezzo\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%97%D7%A0%D7%95%D7%AA-%D7%A6%D7%99%D7%9C%D7%95%D7%9D-%D7%95%D7%A4%D7%99%D7%AA%D7%95%D7%97-%D7%AA%D7%9E%D7%95%D7%A0%D7%95%D7%AA-%D7%91%D7%90%D7%96%D7%A8%D7%99%D7%90%D7%9C%D7%99\"><strong>\u05d7\u05e0\u05d5\u05ea \u05e6\u05d9\u05dc\u05d5\u05dd \u05d5\u05e4\u05d9\u05ea\u05d5\u05d7 \u05ea\u05de\u05d5\u05e0\u05d5\u05ea \u05d1\u05d0\u05d6\u05e8\u05d9\u05d0\u05dc\u05d9\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/nike-tennis-herren\"><strong>nike tennis herren\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/haider-maula-mp3\"><strong>haider maula mp3\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/accessori-moda-menesello\"><strong>accessori moda menesello\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/vesta-ko%C5%BEe%C5%A1inov%C3%A1\"><strong>vesta ko\u017ee\u0161inov\u00e1\u00a0<\/strong><\/a>us repositorios de Git en busca de estos datos no deseados que deber\u00edan ser privados. Los escaneos pueden ser automatizados para que encajen perfectamente en el flujo de trabajo de CI\/CD para la identificaci\u00f3n de secretos antes de que se profundice en la base de c\u00f3digo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Caracter\u00edsticas Gitleaks<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Escaneo para commited Secrets.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Escaneo para uncommited Secrets, parte del Shift to the Left.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Despinible&nbsp;<a href=\"https:\/\/github.com\/marketplace\/actions\/gitleaks\">Github Action<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Gitlab &amp; Github Soporte API.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Reglas de Configuracion Basadas en TOML &amp; Regex.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Alta performance basada en&nbsp;<a href=\"https:\/\/github.com\/go-git\/go-git\">go-git<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>JSON &amp; CSV Output.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Escaneo de Repositorios Privados.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Instalaci\u00f3n<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Descargamos el release para nuestro Sistema Operativo. En mi caso lo voy a realizar sobre <strong>Ubuntu<\/strong>, donde tengo <strong>Jenkins<\/strong>. Aca el <a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/zricethezav\/gitleaks\/releases\" target=\"_blank\">link<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"3024-night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>cd \/tmp\nwget https:\/\/github.com\/zricethezav\/gitleaks\/releases\/download\/v4.2.0\/gitleaks-linux-amd64\t \nsudo chmod +x gitleaks\nsudo mv gitleaks \/usr\/local\/bin\/<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a correrlo sobre dos repositorios publicos. Uno con Leaks y otro sin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":502,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-11.png?fit=640%2C235&amp;ssl=1\" alt=\"\" class=\"wp-image-502\"\/><figcaption class=\"wp-element-caption\">Leaks<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Gitleaks proporciona c\u00f3digos de salida consistentes para ayudar a automatizar los flujos de trabajo, como las plataformas CI\/CD y el escaneo en masa.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"3024-night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>0: no leaks\n1: leaks present\n2: error encountered<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a colgarlo de nuestro Pipeline de Jenkins. Aqui mi Clone a GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":503,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-12.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-503\"\/><figcaption class=\"wp-element-caption\">GitHub Clone Jenkins<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Agregamos un paso apenas salimos de la clonacion. El an\u00e1lisis podemos hacerlo local o contra el repositorio. Para que quede, mejor, graficado lo hare contra el repositorio.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":504,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i2.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-13.png?fit=640%2C470&amp;ssl=1\" alt=\"\" class=\"wp-image-504\"\/><figcaption class=\"wp-element-caption\">Linea de Comando<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Donde dice 0, cambiamos por 1. Si la salida es 1, de GitLeaks, abortar el CI. \u00a1Vamos a ver que pasa!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":506,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i0.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/05\/image-15.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-506\"\/><figcaption class=\"wp-element-caption\">Jenkins Job Failure<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como ven nuestro CI fallo, debido a la salida = 1. Haciendo que el Pipeline no continue.  <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero que les sirva! Es algo rapido que nos ayuda a que nuestros Dev's &amp; DevOps no compartan, sin querer, las llaves del Reino.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Algo muy interesante es agregar pre-commit-hook agregando lo siguiente en esta ruta del repositorio&nbsp;<code>&lt;repo&gt;\/.git\/hooks\/pre-commit<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"3024-night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>#!\/bin\/sh\n# This is an example of what adding gitleaks to a pre-commit hook would look like.\n\ngitleaksEnabled=$(git config --bool hooks.gitleaks)\ncmd=&quot;gitleaks --verbose --redact --pretty&quot;\nif [ $gitleaksEnabled == &quot;true&quot; ]; then\n    $cmd\n    if [ $? -eq 1 ]; then\ncat &lt;&lt;\\EOF\nError: gitleaks has detected sensitive information in your changes.\nIf you know what you are doing you can disable this check using:\n    git config hooks.gitleaks false\nEOF\nexit 1\n    fi\nfi<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora antes de realizar un Commit, se revisara. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero les sirva y puedan sacarle provecho!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Referencias<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/zricethezav\/gitleaks\">https:\/\/github.com\/zricethezav\/gitleaks<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/githooks.com\/\">https:\/\/githooks.com\/<\/a><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2020-05-26 19:29:16","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=501"},{"ID":"525","Title":"An\u00e1lisis DAST en nuestro Pipeline con OWASP ZAP","Content":"<!-- wp:paragraph -->\n<p>En esta entrada vamos a configurar <a aria-label=\"undefined (abre en una nueva pesta\u00f1a)\" href=\"https:\/\/owasp.org\/www-project-zap\/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>OWASP<\/strong> <strong>ZAP<\/strong><\/a> en nuestro Pipe<a href=\"https:\/\/www.akuscarpe.com\/\"><strong>akuscarpe<\/strong><\/a> <a href=\"https:\/\/www.donkeywinkekatze.com\/\"><strong>donkeywinkekatze<\/strong><\/a> <a href=\"https:\/\/www.24bottles.org\/\"><strong>24bottles<\/strong><\/a> <a href=\"https:\/\/www.scarpeovye.com\/\"><strong>scarpeovye<\/strong><\/a> <a href=\"https:\/\/www.gabssaldi.com\/\"><strong>gabssaldi<\/strong><\/a> <a href=\"https:\/\/www.ynotborse.com\/\"><strong>ynotborse<\/strong><\/a> <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.borsalamilanesa.com\/\"><strong>borsalamilanesa<\/strong><\/a> <a href=\"https:\/\/www.maisenzashop.com\/\"><strong>maisenzashop<\/strong><\/a> <a href=\"https:\/\/www.saldibenetton.com\/\"><strong>saldibenetton<\/strong><\/a> <a href=\"https:\/\/www.donkeywinkekatze.com\/\"><strong>donkeywinkekatze<\/strong><\/a> <a href=\"https:\/\/www.akutrekkingshop.com\/\"><strong>akutrekkingshop<\/strong><\/a> <a href=\"https:\/\/www.diego-dalla-palma.com\/\"><strong>diego-dalla-palma<\/strong><\/a> <a href=\"https:\/\/www.fracominaoutlet.com\/\"><strong>fracominaoutlet<\/strong><\/a> <a href=\"https:\/\/www.gabssaldi.com\/\"><strong>gabssaldi<\/strong><\/a>line Jenkins. En esta ocasi\u00f3n no vamos a hacer una instalaci\u00f3n de <strong>OWASP<\/strong> <strong>ZAP<\/strong>, vamos a ejecutarlo en un contenedor Docker en el mismo host que Jenkins y sumarlo al \"Stage\" a nuestro Pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para comenzar, en el ho<a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%AA%D7%A0%D7%95%D7%A8-%D7%91%D7%99%D7%9C%D7%93-%D7%90%D7%99%D7%9F-%D7%90%D7%99%D7%99%D7%A1-%D7%9E%D7%95%D7%A6%D7%A8%D7%99-%D7%97%D7%A9%D7%9E%D7%9C\"><strong>\u05ea\u05e0\u05d5\u05e8 \u05d1\u05d9\u05dc\u05d3 \u05d0\u05d9\u05df \u05d0\u05d9\u05d9\u05e1 \u05de\u05d5\u05e6\u05e8\u05d9 \u05d7\u05e9\u05de\u05dc&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/porto-moniz-madeira-live-webcam\"><strong>porto moniz madeira live webcam&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/k%C3%A4rring-moppe\"><strong>k\u00e4rring moppe&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/tutto-echarpes-feulles-enfant\"><strong>tutto echarpes feulles enfant&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/can-you-connect-usb-microphone-to-soubd-card\"><strong>can you connect usb microphone to soubd card&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/puma-basket-trim-block\"><strong>puma basket trim block&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/jimmy-hex-tricouri\"><strong>jimmy hex tricouri&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/bioscalin-nutricolor-prezzo\"><strong>bioscalin nutricolor prezzo&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%97%D7%A0%D7%95%D7%AA-%D7%A6%D7%99%D7%9C%D7%95%D7%9D-%D7%95%D7%A4%D7%99%D7%AA%D7%95%D7%97-%D7%AA%D7%9E%D7%95%D7%A0%D7%95%D7%AA-%D7%91%D7%90%D7%96%D7%A8%D7%99%D7%90%D7%9C%D7%99\"><strong>\u05d7\u05e0\u05d5\u05ea \u05e6\u05d9\u05dc\u05d5\u05dd \u05d5\u05e4\u05d9\u05ea\u05d5\u05d7 \u05ea\u05de\u05d5\u05e0\u05d5\u05ea \u05d1\u05d0\u05d6\u05e8\u05d9\u05d0\u05dc\u05d9&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/nike-tennis-herren\"><strong>nike tennis herren&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/haider-maula-mp3\"><strong>haider maula mp3&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/accessori-moda-menesello\"><strong>accessori moda menesello&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/vesta-ko%C5%BEe%C5%A1inov%C3%A1\"><strong>vesta ko\u017ee\u0161inov\u00e1&nbsp;<\/strong><\/a>st que contiene Jenkins, vamos a correr el Docker de OWASP ZAP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker run --detach --name zap -u zap -v &quot;\/opt\/dast\/reports&quot;:\/zap\/reports\/:rw \\\n  -i owasp\/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080 \\\n  -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true \\\n  -config api.disablekey=true<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Como ven el tag -v apunta a una carpeta nuestro SO, para poder depositar los reportes que generemos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a hacer una llamada directa al Docker con el comando <strong>zap-cli<\/strong>. Eleg\u00ed el quick-scan y agregamos un tag de <em>Medium<\/em>. La finalidad es que no me reporte los <em>Low<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker exec zap zap-cli --verbose quick-scan http:\/\/pipeline.ironbox.com.ar:8090 -l Medium<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear un Stage en nuestro c\u00f3digo Groovy de Jenkins. Agregue un Try &amp; Catch. Me interesa, por los falsos positivos, que el Pipeline continue aun si tenemos vulenrabilidades <em>Medium<\/em> o <em>High<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A continuaci\u00f3n creamos el reporte. En este caso, para su posterior publicaci\u00f3n, la salida es html pero podr\u00edamos jugar con otros formatos para alimentar otro sistema. Por ejemplo JSON para utilizar <a href=\"https:\/\/github.com\/archerysec\/archerysec\" target=\"_blank\" aria-label=\"undefined (abre en una nueva pesta\u00f1a)\" rel=\"noreferrer noopener\">ArcherySec<\/a> o <a href=\"https:\/\/owasp.org\/www-project-defectdojo\/\" target=\"_blank\" aria-label=\"undefined (abre en una nueva pesta\u00f1a)\" rel=\"noreferrer noopener\">DefectDojo<\/a> y poder gestionar la vulnerabilidad hallada. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"groovy\",\"mime\":\"text\/x-groovy\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>        stage('DAST') {\n            steps {\n                script {\n                    try {\n                        echo &quot;Inicio de Scanneo Dinamico&quot;\n                        sh &quot;docker exec zap zap-cli --verbose quick-scan http:\/\/pipeline.ironbox.com.ar:8090 -l Medium&quot; \n                        \/\/sh &quot;docker exec zap zap-cli --verbose alerts --alert-level Medium -f json | jq length&quot;\n                        currentBuild.result = 'SUCCESS' \n                    }\n                    catch (Exception e) {\n                            \/\/echo e.getMessage() \n                            \/\/currentBuild.result = 'FAILURE'\n                            println (&quot;Revisar Reporte ZAP. Se encontraron Vulnerabilidades.&quot;)\n\n                        }\n                    }  \n                    echo currentBuild.result \n                    echo &quot;Generacion de Reporte&quot;\n                    sh &quot;docker exec zap zap-cli --verbose report -o \/zap\/reports\/owasp-quick-scan-report.html --output-format html&quot;\n                    publishHTML target: [\n                        allowMissing: false,\n                        alwaysLinkToLastBuild: false,\n                        keepAll: true,\n                        reportDir: '\/opt\/dast\/reports',\n                        reportFiles: 'owasp-quick-scan-report.html',\n                        reportName: 'Analisis DAST'\n                      ]          \n            }\n        }<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Vamos a correr ese Pipeline! A ver que nos entrega.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":526,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image aligncenter size-large\"><img src=\"https:\/\/i1.wp.com\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/07\/Captura-de-Pantalla-2020-07-06-a-las-20.31.32.png?fit=640%2C640&amp;ssl=1\" alt=\"\" class=\"wp-image-526\"\/><figcaption class=\"wp-element-caption\">Pipeline OWASP ZAP<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como hab\u00edamos configurado el Pipeline continuo aun habiendo encontrado una vulnerabilidad <em>Medium<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ahora podemos revisar el reporte.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:gallery {\"linkTo\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-gallery aligncenter has-nested-images columns-default is-cropped\"><!-- wp:image {\"id\":528,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/07\/Captura-de-Pantalla-2020-07-06-a-las-20.34.32-1-1024x1024.png\" alt=\"\" class=\"wp-image-528\"\/><\/figure>\n<!-- \/wp:image --><figcaption class=\"blocks-gallery-caption wp-element-caption\">Reporte ZAP<\/figcaption><\/figure>\n<!-- \/wp:gallery -->\n\n<!-- wp:paragraph -->\n<p>Muchas cosas para configurar y seguir jugando. Espero que les sea de utilidad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Nos vemos en la pr\u00f3xima entrada!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Como implementar an\u00e1lisis DAST en nuestro Pipeline Jenkins. Generaci\u00f3n de reportes. Utilizamos OWASP ZAP, en Docker, para la evaluaci\u00f3n y generaci\u00f3n de reportes. ","Date":"2020-07-06 23:46:56","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=525"},{"ID":"545","Title":"Escaneando IaC en b\u00fasqueda de Vulnerabilidades con Terrascan","Content":"<!-- wp:paragraph -->\n<p>Si le pregunta es: \u00bfPodemos automatizar una infraestructu<a href=\"https:\/\/www.marellaabiti.com\/\"><strong>marellaabiti<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.loevenichhutkaufen.com\/\"><strong>loevenichhutkaufen<\/strong><\/a>  <a href=\"https:\/\/www.ynotoutlet.org\/\"><strong>ynotoutlet<\/strong><\/a> <a href=\"https:\/\/www.ovyescarpe.com\/\"><strong>ovyescarpe<\/strong><\/a> <a href=\"https:\/\/www.andcamicienegozi.com\/\"><strong>andcamicienegozi<\/strong><\/a>  <a href=\"https:\/\/www.kleankanteenkinder.com\/\"><strong>kleankanteenkinder<\/strong><\/a>  <a href=\"https:\/\/www.maisenzashop.com\/\"><strong>maisenzashop<\/strong><\/a> <a href=\"https:\/\/www.andcamicienegozi.com\/\"><strong>andcamicienegozi<\/strong><\/a>  <a href=\"https:\/\/www.blaineharmont.com\/\"><strong>blaineharmont<\/strong><\/a> <a href=\"https:\/\/www.borsalamilanesa.com\/\"><strong>borsalamilanesa<\/strong><\/a> <a href=\"https:\/\/www.harmonte-blaine.com\/\"><strong>harmonte-blaine<\/strong><\/a> <a href=\"https:\/\/www.andcamicienegozi.com\/\"><strong>andcamicienegozi<\/strong><\/a>  <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne  abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.cainsmooredonna.com\/\"><strong>cainsmooredonna<\/strong><\/a> ra? La respuesta sera: \u00a1Si!. Muchas empresas estan optando por tener su Infraestructura como C\u00f3digo, conocida como IaC. Es por ello que nosotros, los de Seguridad, tenemos que poner ojo en ese \"Template\" y cuanto antes lo hagamos, mej<a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%AA%D7%A0%D7%95%D7%A8-%D7%91%D7%99%D7%9C%D7%93-%D7%90%D7%99%D7%9F-%D7%90%D7%99%D7%99%D7%A1-%D7%9E%D7%95%D7%A6%D7%A8%D7%99-%D7%97%D7%A9%D7%9E%D7%9C\"><strong>\u05ea\u05e0\u05d5\u05e8 \u05d1\u05d9\u05dc\u05d3 \u05d0\u05d9\u05df \u05d0\u05d9\u05d9\u05e1 \u05de\u05d5\u05e6\u05e8\u05d9 \u05d7\u05e9\u05de\u05dc\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/porto-moniz-madeira-live-webcam\"><strong>porto moniz madeira live webcam\u00a0<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/k%C3%A4rring-moppe\"><strong>k\u00e4rring moppe\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/tutto-echarpes-feulles-enfant\"><strong>tutto echarpes feulles enfant\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/can-you-connect-usb-microphone-to-soubd-card\"><strong>can you connect usb microphone to soubd card\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/puma-basket-trim-block\"><strong>puma basket trim block\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/jimmy-hex-tricouri\"><strong>jimmy hex tricouri\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/bioscalin-nutricolor-prezzo\"><strong>bioscalin nutricolor prezzo\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/zasto-su-mini-suknje-seksi\"><strong>zasto su mini suknje seksi\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%97%D7%A0%D7%95%D7%AA-%D7%A6%D7%99%D7%9C%D7%95%D7%9D-%D7%95%D7%A4%D7%99%D7%AA%D7%95%D7%97-%D7%AA%D7%9E%D7%95%D7%A0%D7%95%D7%AA-%D7%91%D7%90%D7%96%D7%A8%D7%99%D7%90%D7%9C%D7%99\"><strong>\u05d7\u05e0\u05d5\u05ea \u05e6\u05d9\u05dc\u05d5\u05dd \u05d5\u05e4\u05d9\u05ea\u05d5\u05d7 \u05ea\u05de\u05d5\u05e0\u05d5\u05ea \u05d1\u05d0\u05d6\u05e8\u05d9\u05d0\u05dc\u05d9\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/nike-tennis-herren\"><strong>nike tennis herren\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/haider-maula-mp3\"><strong>haider maula mp3\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/accessori-moda-menesello\"><strong>accessori moda menesello\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/vesta-ko%C5%BEe%C5%A1inov%C3%A1\"><strong>vesta ko\u017ee\u0161inov\u00e1\u00a0<\/strong><\/a>or. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A medida que se adopta IoC, como practica, como Terraform, Kubernetes o AWS CloudFormation, es importante observar las mejores practicas de Seguridad y los requisitos de Cumplimiento. Para ello vamos a probar una herramienta, reci\u00e9n liberada por <a href=\"https:\/\/www.accurics.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Accurics<\/a>, llamada <a href=\"https:\/\/github.com\/accurics\/terrascan\" target=\"_blank\" rel=\"noreferrer noopener\">Terrascan<\/a> que nos proporciona m\u00e1s de 500 pol\u00edticas listas para usar para que pueda escanear IaC frente a est\u00e1ndares de pol\u00edticas comunes, como CIS Benchmark. Nos da la posibilidad de optar por el motor <a href=\"https:\/\/www.openpolicyagent.org\/\" target=\"_blank\" rel=\"noreferrer noopener\">Open Policy Agent<\/a> (OPA) para crear pol\u00edticas personalizadas utilizando el lenguaje de consulta Rego. Terrascan soporta AWS GCP y Azure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para probar vamos a utilizar nuestro primer c\u00f3digo <a href=\"https:\/\/learn.hashicorp.com\/terraform\" target=\"_blank\" rel=\"noreferrer noopener\">Terraform<\/a>. Vamos a crear una VPC, en AWS, con sus respectivas Subredes, una privada y otra publica, Internet Gateway, NAT Gateway y Rutas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creamos nuestro Workspace y los archivos, de configuraci\u00f3n, necesarios.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>mkdir terraform\ncd terraform\/\nterraform init\ntouch main.tf\ntouch variables.tf\ntouch terraform.tfvars<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Nos deber\u00eda quedar algo asi, luego explicaremos un poco cada fichero.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"fileName\":\"Shell\",\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre> ~\/Terraform  tree                                      ok\n.\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u2514\u2500\u2500 variables.tf\n\n0 directories, 3 files<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>En nuestro main.tf vamos a crear todos los recursos necesarios para darle forma a nuestra VPC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>provider &quot;aws&quot; {\n      region     = var.region}\n      access_key = {var.access_key}\n      secret_key = {var.secret_key}\n}\n\n\n# VPC Rercursos: Vamos a crear 1 VPC con 4 Subnets, 1 Internet Gateway, 4 Rutas.\n\nresource &quot;aws_vpc&quot; &quot;default&quot; {\n  cidr_block           = var.cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n}\n\nresource &quot;aws_internet_gateway&quot; &quot;default&quot; {\n  vpc_id = aws_vpc.default.id\n}\n\nresource &quot;aws_route_table&quot; &quot;private&quot; {\n  count = length(var.private_subnet_cidr_blocks)\n\n  vpc_id = aws_vpc.default.id\n}\n\nresource &quot;aws_route&quot; &quot;private&quot; {\n  count = length(var.private_subnet_cidr_blocks)\n\n  route_table_id         = aws_route_table.private[count.index].id\n  destination_cidr_block = &quot;0.0.0.0\/0&quot;\n  nat_gateway_id         = aws_nat_gateway.default[count.index].id\n}\n\nresource &quot;aws_route_table&quot; &quot;public&quot; {\n  vpc_id = aws_vpc.default.id\n}\n\nresource &quot;aws_route&quot; &quot;public&quot; {\n  route_table_id         = aws_route_table.public.id\n  destination_cidr_block = &quot;0.0.0.0\/0&quot;\n  gateway_id             = aws_internet_gateway.default.id\n}\n\nresource &quot;aws_subnet&quot; &quot;private&quot; {\n  count = length(var.private_subnet_cidr_blocks)\n\n  vpc_id            = aws_vpc.default.id\n  cidr_block        = var.private_subnet_cidr_blocks[count.index]\n  availability_zone = var.availability_zones[count.index]\n}\n\nresource &quot;aws_subnet&quot; &quot;public&quot; {\n  count = length(var.public_subnet_cidr_blocks)\n\n  vpc_id                  = aws_vpc.default.id\n  cidr_block              = var.public_subnet_cidr_blocks[count.index]\n  availability_zone       = var.availability_zones[count.index]\n  map_public_ip_on_launch = true\n}\n\nresource &quot;aws_route_table_association&quot; &quot;private&quot; {\n  count = length(var.private_subnet_cidr_blocks)\n\n  subnet_id      = aws_subnet.private[count.index].id\n  route_table_id = aws_route_table.private[count.index].id\n}\n\nresource &quot;aws_route_table_association&quot; &quot;public&quot; {\n  count = length(var.public_subnet_cidr_blocks)\n\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n\n# Recursos NAT: Esto crear\u00e1 2 puertas de enlace NAT en 2 subredes p\u00fablicas para 2 subredes privadas diferentes.\n\nresource &quot;aws_eip&quot; &quot;nat&quot; {\n  count = length(var.public_subnet_cidr_blocks)\n\n  vpc = true\n}\n\nresource &quot;aws_nat_gateway&quot; &quot;default&quot; {\n  depends_on = [&quot;aws_internet_gateway.default&quot;]\n\n  count = length(var.public_subnet_cidr_blocks)\n\n  allocation_id = aws_eip.nat[count.index].id\n  subnet_id     = aws_subnet.public[count.index].id\n}<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Luego tenemos el archivo <strong>variables.tf<\/strong>. Revisen que son objetos tipos lista, por ello en el <strong>main.tf<\/strong> hacemos el count, para recorrerla e ir creando los recursos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>variable &quot;access_key&quot; {\n     description = &quot;Access key to AWS console&quot;\n     \n}\nvariable &quot;secret_key&quot; {\n     description = &quot;Secret key to AWS console&quot;\n     \n}\n\nvariable &quot;region&quot; {\n  default     = &quot;eu-east-3&quot;\n  type        = string\n  description = &quot;Region of the VPC&quot;\n}\n\n\nvariable &quot;cidr_block&quot; {\n  default     = &quot;10.0.0.0\/16&quot;\n  type        = string\n  description = &quot;CIDR block for the VPC&quot;\n}\n\nvariable &quot;public_subnet_cidr_blocks&quot; {\n  default     = [&quot;10.0.0.0\/24&quot;, &quot;10.0.2.0\/24&quot;]\n  type        = list\n  description = &quot;List of public subnet CIDR blocks&quot;\n}\n\nvariable &quot;private_subnet_cidr_blocks&quot; {\n  default     = [&quot;10.0.1.0\/24&quot;, &quot;10.0.3.0\/24&quot;]\n  type        = list\n  description = &quot;List of private subnet CIDR blocks&quot;\n}\n\nvariable &quot;availability_zones&quot; {\n  default     = [&quot;eu-east-3a&quot;, &quot;eu-east-3b&quot;]\n  type        = list\n  description = &quot;List of availability zones&quot;\n}<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Por ultimo, las lleves del reino, en el <strong>terraform.tfvars<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>access_key = &quot;XXXXX&quot;\nsecret_key = &quot;XXXXX&quot;<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a probar a ver que nos dice, si esta todo bien con <strong>terraform plan<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":548,\"width\":401,\"height\":570,\"sizeSlug\":\"full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/08\/Captura-de-Pantalla-2020-08-19-a-las-16.36.30.png\" alt=\"\" class=\"wp-image-548\" width=\"401\" height=\"570\"\/><figcaption class=\"wp-element-caption\">terraform plan<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos aplicar la infraestructura con <strong>terraform apply<\/strong>. Esperamos unos minutos y \u00a1listo!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":550,\"width\":401,\"height\":570,\"sizeSlug\":\"full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/08\/Captura-de-Pantalla-2020-08-19-a-las-16.44.48.png\" alt=\"\" class=\"wp-image-550\" width=\"401\" height=\"570\"\/><figcaption class=\"wp-element-caption\">terraform apply<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Listo la parte <strong>DevOps<\/strong>, ahora vamos a meterle un poco de <strong>Sec<\/strong>. Para ello vamos a instalar terrascan.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>$ curl --location https:\/\/github.com\/accurics\/terrascan\/releases\/download\/v1.0.0\/terrascan_1.0.0_Darwin_x86_64.tar.gz --output terrascan.tar.gz\n$ tar -xvf terrascan.tar.gz\n  x CHANGELOG.md\n  x LICENSE\n  x README.md\nx terrascan\n$ install terrascan \/usr\/local\/bin\n$ terrascan<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Listo! Vamos a probar nuestro IoC. Para ello ejecutamos <strong>terrascan scan -t aws<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":551,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/08\/Captura-de-Pantalla-2020-08-19-a-las-16.56.51.png\" alt=\"\" class=\"wp-image-551\"\/><figcaption class=\"wp-element-caption\">terraform scan -t<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Belleza! Tenemos un <strong>Medium<\/strong>. No estamos habilitando, por gastos, el VPC Flow Logs. \u00bfEsta bien? No. \u00bfEs mas barato? Si. Con esas salidas, podemos jugar para integrarlo con nuestro Jenkins. Espero que les sirva la info. Saludos.<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Escaneo de IoC con terrascan. Revisar la infraestructura como codigo no es un dolor de cabeza. ","Date":"2020-08-19 20:13:33","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=545"},{"ID":"568","Title":"Hardening de Servidores Linux Ubuntu con Ansible","Content":"<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfQue es Ansible?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Con Ansible podemos instalar aplicaciones, orquestar servicios y tareas m\u00e1s avanzas. Tambi\u00e9n se puede utilizar para la es<a href=\"https:\/\/www.bestcouplestoysonline.com\/pasante-kondom\/\"><strong>pasante kondom<\/strong><\/a> <a href=\"https:\/\/www.fracominaoutlet.com\/\"><strong>fracominaoutlet<\/strong><\/a> <a href=\"https:\/\/www.akuschuhe.com\/\"><strong>akuschuhe<\/strong><\/a> <a href=\"https:\/\/www.menairmaxsneaker.com\/air-max-goaterra-2-0\/\"><strong>air max goaterra 2.0<\/strong><\/a> <a href=\"https:\/\/www.gabssaldi.com\/\"><strong>gabssaldi<\/strong><\/a> <a href=\"https:\/\/www.kleankanteentrinkflasche.com\/\"><strong>kleankanteentrinkflasche<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.kleankanteenkinder.com\/\"><strong>kleankanteenkinder<\/strong><\/a> <a href=\"https:\/\/www.diegodallapalmaoutlet.com\/\"><strong>diegodallapalmaoutlet<\/strong><\/a> <a href=\"https:\/\/www.lamilanesaborse.com\/\"><strong>lamilanesaborse<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a> <a href=\"https:\/\/www.fracominasaldi.com\/\"><strong>fracominasaldi<\/strong><\/a> <a href=\"https:\/\/www.airmaxmensshoes.com\/nike-air-max-97-gucci\/\"><strong>nike ispa 270<\/strong><\/a> <a href=\"https:\/\/www.loevenichmutze.com\/\"><strong>loevenichmutze<\/strong><\/a> <a href=\"https:\/\/www.diegodallapalmaoutlet.com\/\"><strong>diegodallapalmaoutlet<\/strong><\/a>tandarizaci\u00f3n de sistema operativo (Estandarizaci\u00f3n de servicios instalados, de configuraci\u00f3n de ficheros, versiones de software, etc\u00e9tera) y la administraci\u00f3n de servicios centralizados, como por ejemplo DNS.<a href=\"https:\/\/www.3dprintkala.com\/%D7%97%D7%A0%D7%95%D7%AA-%D7%A8%D7%99%D7%94%D7%95%D7%98-%D7%92%D7%9F-%D7%92%D7%A2%D7%A9\"><strong>\u05d7\u05e0\u05d5\u05ea \u05e8\u05d9\u05d4\u05d5\u05d8 \u05d2\u05df \u05d2\u05e2\u05e9\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/adidas-superstar-bot-metalic\"><strong>adidas superstar bot metalic\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/ssd-adata-s40g\"><strong>ssd adata s40g\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%A8%D7%A6%D7%95%D7%A2%D7%94-suunto\"><strong>\u05e8\u05e6\u05d5\u05e2\u05d4 suunto\u00a0<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/%C3%B6rh%C3%A4nge-tatueringstudio\"><strong>\u00f6rh\u00e4nge tatueringstudio\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/nike-w-internationalist-premium-black-black-summit-white\"><strong>nike w internationalist premium black black summit white\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/%D1%81%D0%BF%D0%B0%D0%BB%D0%B5%D0%BD-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82-100-%D0%BF%D0%B0%D0%BC%D1%83%D0%BA-%D1%86%D0%B2%D0%B5%D1%82%D0%B5%D0%BD%D1%86%D0%B0\"><strong>\u0441\u043f\u0430\u043b\u0435\u043d \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 100 \u043f\u0430\u043c\u0443\u043a \u0446\u0432\u0435\u0442\u0435\u043d\u0446\u0430\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%97%D7%A1%D7%A0%D7%99-%D7%97%D7%A9%D7%9E%D7%9C-%D7%9E%D7%91%D7%A6%D7%A2%D7%99%D7%9D-%D7%91%D7%90%D7%A8-%D7%A9%D7%91%D7%A2-%D7%9E%D7%9B%D7%95%D7%A0%D7%AA-%D7%9B%D7%91%D7%99%D7%A1%D7%94\"><strong>\u05de\u05d7\u05e1\u05e0\u05d9 \u05d7\u05e9\u05de\u05dc \u05de\u05d1\u05e6\u05e2\u05d9\u05dd \u05d1\u05d0\u05e8 \u05e9\u05d1\u05e2 \u05de\u05db\u05d5\u05e0\u05ea \u05db\u05d1\u05d9\u05e1\u05d4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/%D1%87%D0%B0%D0%BD%D1%82%D0%B8-%D0%B7%D0%B0-%D0%BB%D0%B0%D0%BF%D1%82%D0%BE%D0%BF-dell\"><strong>\u0447\u0430\u043d\u0442\u0438 \u0437\u0430 \u043b\u0430\u043f\u0442\u043e\u043f dell\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/best-looking-nike-air-max\"><strong>best looking nike air max\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/canon-reflex-in-offerta\"><strong>canon reflex in offerta\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/felpa-fedez-bershka-amazon\"><strong>felpa fedez bershka amazon\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/trendyol-hm-ti%C5%9F%C3%B6rt\"><strong>trendyol hm ti\u015f\u00f6rt\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/%D7%9E%D7%99%D7%A7%D7%A8%D7%95%D7%92%D7%9C-lg-%D7%9C%D7%A7%D7%A0%D7%95%D7%AA\"><strong>\u05de\u05d9\u05e7\u05e8\u05d5\u05d2\u05dc lg \u05dc\u05e7\u05e0\u05d5\u05ea\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/come-pulire-una-caffettiera-di-alluminio\"><strong>come pulire una caffettiera di alluminio\u00a0<\/strong><\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para este laboratorio vamos a utilizar 2 Ubuntu Server's. Tendremos un Ansible Master y un Ansible Worker. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ansible lo encontramos, por defecto, en la mayoria de las distribuciones de linux. La instalacion es sencilla. Para ello ejecutamos:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apt install ansible<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td>ansiblemaster<\/td><td>192.168.247.224<\/td><\/tr><tr><td>ansibleworker<\/td><td>192.168.247.225<\/td><\/tr><\/tbody><\/table><\/figure>\n<!-- \/wp:table -->\n\n<!-- wp:paragraph -->\n<p>Vamos a utilizar estos nombres, en los hosts, con estas direcciones IP's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Instalacion Master Node<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ya hemos instalado ansbile, en el servidor, ahora vamos a realizar las configuraciones. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ansible se conecta a su cliente a trav\u00e9s de SSH, primero generaremos una clave p\u00fablica en el servidor ansible, para copiarla en los clientes ansible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Genere la clave usando <code><strong>ssh-keygen<\/strong><\/code> comando como se muestra a continuaci\u00f3n.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ ssh-keygen\nGenerating public\/private rsa key pair.\nEnter file in which to save the key (\/home\/santiago\/.ssh\/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in \/home\/santiago\/.ssh\/id_rsa.\nYour public key has been saved in \/home\/santiago\/.ssh\/id_rsa.pub.\nThe key fingerprint is:\nSHA256:AT62rfaL7zq06CUlxUP\/DKDmyZH3kM\/OLJEFQmhlSnw santiago@ansiblemaster\nThe key's randomart image is:\n+---[RSA 2048]----+\n| ..+= =          |\n| .+oEB *         |\n| ...= @ =        |\n|   + * % =       |\n|    = = S o      |\n|     o.*         |\n|    .o=.+        |\n|    .+o+         |\n|   .. o==.       |\n+----[SHA256]-----+<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Cambiamos los permisos en la llave publica y privada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ sudo chmod 0400 \/home\/santiago\/.ssh\/id_rsa.pub\nsantiago@ansiblemaster:\/etc\/ansible$ sudo chmod 0400 \/home\/santiago\/.ssh\/id_rsa<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Copiemos la clave p\u00fablica al host Ansible cuya direcci\u00f3n IP es <strong>192.168.247.225<\/strong>, con <strong>ssh-copy-id<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ ssh-copy-id -i ~\/.ssh\/id_rsa.pub santiago@192.168.247.225\n\/usr\/bin\/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;\/home\/santiago\/.ssh\/id_rsa.pub&quot;\n\/usr\/bin\/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n\/usr\/bin\/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nsantiago@192.168.247.225's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   &quot;ssh 'santiago@192.168.247.225'&quot;\nand check to make sure that only the key(s) you wanted were added.<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a configurar el inventario, en el Master. Completamos, como en el ejemplo, el <strong>\/etc\/ansible\/hosts<\/strong>. Como se puede ver agregamos, dentro de [servers], nuestro worker. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>servers:\n  hosts:\n    192.168.247.225:\n    192.168.247.224:<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a probar la conexion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ ansible -m ping servers\nansibleworker | SUCCESS =&gt; {\n    &quot;changed&quot;: false,\n    &quot;ping&quot;: &quot;pong&quot;\n}<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Hacemos un <strong>ping<\/strong> y recibimos un <strong>pong<\/strong>. Ya estamos llegando al Worker. \u00a1Podriamos tener, miles!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Algunos comandos<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a consultar nuestro inventario y revisar los discos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ ansible-inventory --list -y\nall:\n  children:\n    servers:\n      hosts:\n        ansiblemaster:\n          ansible_host: 192.168.247.224\n          ansible_python_interpreter: \/usr\/bin\/python3\n        ansibleworker:\n          ansible_host: 192.168.247.225\n          ansible_python_interpreter: \/usr\/bin\/python3\n    ungrouped: {}\nsantiago@ansiblemaster:\/etc\/ansible$ ansible all -a &quot;df -h&quot; -u santiago\nansibleworker | SUCCESS | rc=0 &gt;&gt;\nFilesystem      Size  Used Avail Use% Mounted on\nudev            955M     0  955M   0% \/dev\ntmpfs           198M  1,2M  196M   1% \/run\n\/dev\/sda2        20G  4,0G   15G  22% \/\ntmpfs           986M     0  986M   0% \/dev\/shm\ntmpfs           5,0M     0  5,0M   0% \/run\/lock\ntmpfs           986M     0  986M   0% \/sys\/fs\/cgroup\n\/dev\/loop0       89M   89M     0 100% \/snap\/core\/7270\ntmpfs           198M     0  198M   0% \/run\/user\/1000\n\nansiblemaster | SUCCESS | rc=0 &gt;&gt;\nFilesystem      Size  Used Avail Use% Mounted on\nudev            955M     0  955M   0% \/dev\ntmpfs           198M  1,3M  196M   1% \/run\n\/dev\/sda2        20G  4,3G   15G  23% \/\ntmpfs           986M  144K  985M   1% \/dev\/shm\ntmpfs           5,0M     0  5,0M   0% \/run\/lock\ntmpfs           986M     0  986M   0% \/sys\/fs\/cgroup\n\/dev\/loop0       89M   89M     0 100% \/snap\/core\/7270\ntmpfs           198M     0  198M   0% \/run\/user\/1000\n\/dev\/loop1       98M   98M     0 100% \/snap\/core\/10444<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Hardening Ubuntu<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Uno de los blogs mas importantes para realizar un Hardening de Ubuntu 18.04 es el de <a rel=\"noreferrer noopener\" href=\"https:\/\/cloudsecuritylife.com\/cis-ubuntu-script-to-automate-server-hardening\/\" target=\"_blank\">Florian Utz<\/a>. Vamos a utilizar ese playbook y aplicar los <a href=\"https:\/\/www.cisecurity.org\/benchmark\/ubuntu_linux\/\">CIS Benchmark Controls<\/a>. Es imporante saber que los niveles 1 y 2 se corregiran de forma predeterminada. El rol podria \"romper cosas\" por eso es imporante leer la documentacion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear nuestro <strong>requirements.yml<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo sh -c &quot;echo '- src: https:\/\/github.com\/joelradon\/ubuntu1804-desktop-cis.git' &gt;&gt; \/etc\/ansible\/requirements.yml&quot;<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Una vez que creamos el archivo instalamos el rol con el comando ansible-galaxy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ sudo ansible-galaxy install -p roles -r \/etc\/ansible\/requirements.yml\n- extracting ubuntu1804-desktop-cis to \/etc\/ansible\/roles\/ubuntu1804-desktop-cis\n- ubuntu1804-desktop-cis was installed successfully<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a nuestro playbook para iniciar el Hardening. Se le dira a ansible que use el rol, que acabamos de crear, y corra la \"receta\" en nuestros servidores. Para ello creamos site.yml.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>- name: Hardenizar Servidores Ubuntu\n  hosts: servers\n  become: yes\n  roles:\n    - ubuntu1804-desktop-cis<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos cambiar algunas configuraciones para no ingresar con la llave privada y revisar el potencial de Ansible. Hay varias configuraciones posibles para hacerlo, <a href=\"https:\/\/tech.davidfield.co.uk\/setting-up-ansible-on-my-homelan\/\" target=\"_blank\" rel=\"noreferrer noopener\">aca<\/a> les dejo un instructivo que me resulto muy interesante. Pasando el password, como variable, usando Vault de Ansible. Revisenlo. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a ingresar el usuario y el password en nuestro inventario. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"toml\",\"mime\":\"text\/x-toml\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>servers:\n  hosts:\n    192.168.247.225:\n    192.168.247.224:\n  vars:\n    ansible_user: santiago\n    ansible_become: True\n    ansible_become_pass: TUPASSWORD<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Vamos a correr el playbook! Y que comience la magia. Ejecutamos <strong>ansible-playbook -i hosts site.yml<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ansiblemaster:\/etc\/ansible$ ansible-playbook -i hosts site.yml\n\nPLAY [Harden Server] *****************************************************************************************************************************************************************************************\n\nTASK [Gathering Facts] ***************************************************************************************************************************************************************************************\nok: [192.168.247.225]\nok: [192.168.247.224]\n\nTASK [ubuntu1804-desktop-cis : Check OS version and family] **************************************************************************************************************************************************\nskipping: [192.168.247.225]\nskipping: [192.168.247.224]\n\nTASK [ubuntu1804-desktop-cis : Check ansible version] ********************************************************************************************************************************************************\nskipping: [192.168.247.225]\nskipping: [192.168.247.224]\n\nTASK [ubuntu1804-desktop-cis : PRELIM | List users accounts] *************************************************************************************************************************************************\nok: [192.168.247.225]\nok: [192.168.247.224]\n\nTASK [ubuntu1804-desktop-cis : PRELIM | Gather accounts with empty password fields] **************************************************************************************************************************\nok: [192.168.247.225]\nok: [192.168.247.224]\n\nTASK [ubuntu1804-desktop-cis : PRELIM | Gather UID 0 accounts other than root] *******************************************************************************************************************************\nok: [192.168.247.225]\nok: [192.168.247.224]\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>De esta manera vamos a tener nuestros servidores Ubuntu en compliance con CIS Controls. Se puede usar <a href=\"https:\/\/www.open-scap.org\/\" target=\"_blank\" rel=\"noreferrer noopener\">OpenSCAP<\/a> para realizar Compliance As a Code, basado diferentes Standars. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Espero que les sirva para empezar a conocer el poder de Ansible.<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Como hacer un Hardening de servidores Linux Ubuntu con Ansible y que sean compliance con diferentes Standers.","Date":"2020-12-08 20:38:12","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=568"},{"ID":"571","Title":"Creando nuestro CI\/CD con Github Actions y Okteto.","Content":"<!-- wp:paragraph -->\n<p>Muchas vec<a href=\"https:\/\/www.tatacalzature.com\/\"><strong>tatacalzature<\/strong><\/a> <a href=\"https:\/\/www.guardianiscarpe.com\/\"><strong>guardianiscarpe<\/strong><\/a> <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.ynotsaldi.com\/\"><strong>ynotsaldi<\/strong><\/a> <a href=\"https:\/\/www.marellaabiti.com\/\"><strong>marellaabiti<\/strong><\/a> <a href=\"https:\/\/www.negozigeox.com\/\"><strong>negozigeox<\/strong><\/a> <a href=\"https:\/\/www.gabssaldi.com\/\"><strong>gabssaldi<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a>  <a href=\"https:\/\/www.tatascarpe.com\/\"><strong>tatascarpe<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a>  <a href=\"https:\/\/www.and-camicie.com\/\"><strong>and-camicie<\/strong><\/a> <a href=\"https:\/\/www.ynotoutlet.org\/\"><strong>ynotoutlet<\/strong><\/a> <a href=\"https:\/\/www.cainsmooredonna.com\/\"><strong>cainsmooredonna<\/strong><\/a> <a href=\"https:\/\/www.lecosonnenschirm.com\/\"><strong>lecosonnenschirm<\/strong><\/a>  <a href=\"https:\/\/www.24bottles.org\/\"><strong>24bottles<\/strong><\/a> es me consultan sobre pipelines, Docker o Kubernetes. Siempre he cre\u00eddo que el Hands On es la mejor forma de aprender, es por ello que vamos hacer una peque\u00f1a aplicaci\u00f3n con Python &amp; Flask, dockerizarla y luego hacer el deployment en un cluster Kubernetes. Vamos a utilizar servicios gratuitos como GitHub Actions, para la creacion de nuestro Pipeline &amp; <a href=\"https:\/\/okteto.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Okteto<\/a>, para soportar nuestro deployment de Kubernetes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/safernandez666\/Okteto\" target=\"_blank\"><strong>Aca<\/strong><\/a> encontraran el proyecto y todo lo necesario para la implementaci\u00f3n.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lo primero que haremos ser\u00e1 crear la imag<a href=\"https:\/\/www.dovafrica.com\/barbie-h%C3%A1z-f%C3%A1b%C3%B3l\"><strong>barbie h\u00e1z f\u00e1b\u00f3l&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/%C3%B6rh%C3%A4nge-tatueringstudio\"><strong>\u00f6rh\u00e4nge tatueringstudio&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%97%D7%A1%D7%A0%D7%99-%D7%97%D7%A9%D7%9E%D7%9C-%D7%9E%D7%91%D7%A6%D7%A2%D7%99%D7%9D-%D7%91%D7%90%D7%A8-%D7%A9%D7%91%D7%A2-%D7%9E%D7%9B%D7%95%D7%A0%D7%AA-%D7%9B%D7%91%D7%99%D7%A1%D7%94\"><strong>\u05de\u05d7\u05e1\u05e0\u05d9 \u05d7\u05e9\u05de\u05dc \u05de\u05d1\u05e6\u05e2\u05d9\u05dd \u05d1\u05d0\u05e8 \u05e9\u05d1\u05e2 \u05de\u05db\u05d5\u05e0\u05ea \u05db\u05d1\u05d9\u05e1\u05d4&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/nike-air-pegasus-30-women-39\"><strong>nike air pegasus 30 women 39&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/barba-barbati\"><strong>barba barbati&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/hyra-v%C3%A4ska\"><strong>hyra v\u00e4ska&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/pantalon-ski-columbia-femme\"><strong>pantalon ski columbia femme&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/piatti-di-plastica-dorati\"><strong>piatti di plastica dorati&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/%CF%80%CE%B1%CF%80%CE%B1%CE%B3%CE%B9%CE%B1%CE%BD%CE%BD%CE%BF%CF%80%CE%BF%CF%85%CE%BB%CE%BF%CF%83-%CF%84%CE%B1%CE%B9%CE%BD%CE%AF%CE%B1-%CE%BF-%CE%B1%CF%87%CF%8C%CF%81%CF%84%CE%B1%CE%B3%CE%BF%CF%83\"><strong>\u03c0\u03b1\u03c0\u03b1\u03b3\u03b9\u03b1\u03bd\u03bd\u03bf\u03c0\u03bf\u03c5\u03bb\u03bf\u03c3 \u03c4\u03b1\u03b9\u03bd\u03af\u03b1 \u03bf \u03b1\u03c7\u03cc\u03c1\u03c4\u03b1\u03b3\u03bf\u03c3&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/casio-rangeman-gpr-b1000-1ber\"><strong>casio rangeman gpr b1000 1ber&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/basket-veja-argent%C3%A9\"><strong>basket veja argent\u00e9&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/youtube-link-to-mp3-converter\"><strong>youtube link to mp3 converter&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/bouquet-per-addio-al-nubilato-amazon\"><strong>bouquet per addio al nubilato amazon&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/nike-tennis-herren\"><strong>nike tennis herren&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/logitech-g-hub-download\"><strong>logitech g hub download&nbsp;<\/strong><\/a>en, de Docker, que subiremos a Docker Hub para que sea pulleada por nuestro deployment de Kubernetes. Es necesario que ingresemos las credenciales para poder hacer el push a Docker Hub y el Config File del Cluster de Kubernetes. Cada vez que actualicemos nuestro proyecto, en GitHub, correra nuestro YAML en GitHub Actions, que realizara todos estos pasos en nuestro Pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Creacion de la Imagen Docker<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a revisar los archivos que son necesarios, para la creaci\u00f3n de nuestra imagen.&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"dracula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 style.css\n\u2514\u2500\u2500 template\n    \u2514\u2500\u2500 index.html\n\n2 directories, 5 files<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear la imagen, con <strong>docker build -t flask --no-cache=true .<\/strong>, para probarla localmente. Para ello es necesario el <strong>Dockerfile<\/strong>, que tenemos en nuestro proyecto.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre> \/tmp\/Okteto  main !8  docker build -t flask --no-cache=true .   ok  4s\n[+] Building 19.7s (12\/12) FINISHED\n =&gt; [internal] load .dockerignore                                   0.1s\n =&gt; =&gt; transferring context: 2B                                     0.0s\n =&gt; [internal] load build definition from Dockerfile                0.1s\n =&gt; =&gt; transferring dockerfile: 496B                                0.0s\n =&gt; [internal] load metadata for docker.io\/library\/python:alpine    2.3s\n =&gt; [1\/7] FROM docker.io\/library\/python:alpine@sha256:4228f7566ffd  0.0s\n =&gt; [internal] load build context                                   0.1s\n =&gt; =&gt; transferring context: 816B                                   0.0s\n =&gt; CACHED [2\/7] WORKDIR \/usr\/src\/app                               0.0s\n =&gt; [3\/7] RUN pip install --upgrade pip                             8.1s\n =&gt; [4\/7] RUN pip install --no-cache-dir flask flask-api ifaddr     8.6s\n =&gt; [5\/7] COPY app.py .\/                                            0.0s\n =&gt; [6\/7] ADD static .\/static                                       0.0s\n =&gt; [7\/7] ADD template .\/template                                   0.1s\n =&gt; exporting to image                                              0.4s\n =&gt; =&gt; exporting layers                                             0.4s\n =&gt; =&gt; writing image sha256:0af8866c65c1eff632e6ed2a3ad9e932344000  0.0s\n =&gt; =&gt; naming to docker.io\/library\/flask                            0.0s\n \/tmp\/Okteto  main !8<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Corremos el Docker<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Revisamos si tenemos la imagen creada, con <strong>docker images<\/strong>,  y luego corremos los comando para crear el contenedor en base dicha imagen con <strong>docker run --publish 80:80<\/strong> <strong>flask <\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre> \/tmp\/Okteto  main !8  docker images                                                                        ok\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nflask               latest              0af8866c65c1        About a minute ago   56.8MB\n \/tmp\/Okteto  main !8  docker run  --publish 80:80 flask                                                                    ok\n2a4609ac3706\n * Serving Flask app &quot;app&quot; (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http:\/\/0.0.0.0:80\/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 294-411-388<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora pobemos probar si esta corriendo nuestro contenedor en <a href=\"http:\/\/localhost\" target=\"_blank\" rel=\"noreferrer noopener\">http:\/\/localhost<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":573,\"width\":537,\"height\":380,\"sizeSlug\":\"full\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Captura-de-Pantalla-2020-11-28-a-las-11.42.33.png\" alt=\"\" class=\"wp-image-573\" width=\"537\" height=\"380\"\/><figcaption class=\"wp-element-caption\">Aplicacion Python &amp; Flask corriendo en el contenedor.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Creacion del YAML para que corra nuestro Pipeline<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Podemos crear la carpeta <em>.github\/workflows\/NOMBRE.YAML<\/em> o hacerlo desde el proyecto, en GitHub. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":574,\"width\":640,\"height\":197,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Actions-scaled.jpg\" alt=\"\" class=\"wp-image-574\" width=\"640\" height=\"197\"\/><figcaption class=\"wp-element-caption\">Actions<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a ver la primer parte donde realizamos el build &amp; push a Dockerhub. En mi caso lo llame <strong>push.yaml<\/strong>. Van a encontrarlo en la ruta que comente anteriormente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>on: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions\/checkout@master\n    - name: Publish to Registry\n      uses: elgohr\/Publish-Docker-Github-Action@master\n      with:\n        name: safernandez666\/okteto\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        dockerfile: .\/Dockerfile\n        tags: &quot;latest,${{ github.sha }}&quot;\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Sera necesario agregar los secretos, para conectarnos a Dockerhub y poder realizar el Push de nuestra imagen creada. Como pueden ver le agrego un tag que representa este build en particular y latest.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Agregamos los Secretos<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para agregar las variables de enterno lo haremos en Settings | Secrets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":575,\"width\":640,\"height\":301,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Secrets-scaled.jpg\" alt=\"\" class=\"wp-image-575\" width=\"640\" height=\"301\"\/><figcaption class=\"wp-element-caption\">Secrets GitHub<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como ven no solo agregue <strong>DOCKER_USERNAME<\/strong> &amp; <strong>DOCKER_PASSWORD<\/strong> para conectarme a Dockerhub, si no que tambien agregue el archivo de configuracion <strong>KUBE_CONFIG_DATA<\/strong> de Okteto, para obtener el valor de esa variable tenemos que descargar el arcivo de configuracion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":576,\"width\":526,\"height\":347,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Captura-de-Pantalla-2020-11-28-a-las-12.03.06.png\" alt=\"\" class=\"wp-image-576\" width=\"526\" height=\"347\"\/><figcaption class=\"wp-element-caption\">Okteto<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Obtenemos el varlo para cargarla en GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:group -->\n<div class=\"wp-block-group\"><!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>cat okteto-kube.config | base64<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block --><\/div>\n<!-- \/wp:group -->\n\n<!-- wp:paragraph -->\n<p>Ahora si, tenemos casi todo listo. Vamos a revisar el push.yaml, completo, que realiza todos los pasos del pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">YAML GitHub Actions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>name: Publish To Docker &amp; Okteto\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions\/checkout@master\n    - name: Publish to Registry\n      uses: elgohr\/Publish-Docker-Github-Action@master\n      with:\n        name: safernandez666\/okteto\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        dockerfile: .\/Dockerfile\n        tags: &quot;latest,${{ github.sha }}&quot;\n\n    - name: Deploy to Cluster\n      uses: steebchen\/kubectl@master\n      env:\n        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}\n      with:\n        args: set image --record deployment\/nginx-deployment nginx=safernandez666\/okteto:${{ github.sha }}\n    \n    - name: Verify Deployment\n      uses: steebchen\/kubectl@master\n      env:\n        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}\n        KUBECTL_VERSION: &quot;1.15&quot;\n      with:\n        args: '&quot;rollout status deployment\/nginx-deployment&quot;'<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>En este YAML vemos como hacemos el build &amp; push y como se hace el deployment de kubernetes. El argumento mas importante es <strong>set image --record deployment\/nginx-deployment nginx=safernandez666\/okteto:${{ github.sha }}<\/strong> donde en cada push se refenciara la imagen creada. El primer deployment es necesario hacerlo a mano, para que se cree en Okteto. Podriamos crear la logica para consultar si esta creado y en el caso de no estarlo crearlo, pero para los fines practicos no suma. \u00a1Vamos a crearlo!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Configuracion del Contexto<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>export KUBECONFIG=$HOME\/Downloads\/okteto-kube.config:${KUBECONFIG:-$HOME\/.kube\/config}\n\nkubectl apply -f .\/deployment\/deployment.yaml<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a revisar el archivo <strong>deployment.yaml <\/strong>donde tenemos del deploy y el servicio. Es muy sencillo, no les va costar comprenderlo, donde creamos 3 replicas de nuestra imagen y sera balanceada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apiVersion: apps\/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: safernandez666\/okteto:latest \n        ports:\n        - containerPort: 80\n        imagePullPolicy: &quot;Always&quot;\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-deployment\nspec:\n  type: LoadBalancer \n  ports:\n    - name: http\n      port: 80\n  selector:\n    app: nginx<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Push a GitHub<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a modificar algo del index.html, para probar, y hacer el push necesario para que corra nuestro pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"darcula\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>git add .\ngit commit -m &quot;Flask App&quot;\ngit push origin main<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos nuestro pipeline corriendo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":577,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Captura-de-Pantalla-2020-11-28-a-las-12.18.14.png\" alt=\"\" class=\"wp-image-577\"\/><figcaption class=\"wp-element-caption\">Pipeline GitHub Actions<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>De esta manera ya tenemos nuestra imagen en Docker Hub, que luego sera pulleada por el deployment. Vamos a revisar en Okteto el nombre de nuestro Endpoint.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":578,\"width\":640,\"height\":408,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Endpoint-scaled.jpg\" alt=\"\" class=\"wp-image-578\" width=\"640\" height=\"408\"\/><figcaption class=\"wp-element-caption\">Panel de Okteto<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Podemos visitar el Endpoint y probar el balanceo a nuestros Pods. Aca les muestro como responden, via <strong>curl<\/strong>. Como resultado vamos a obtener en el HTML los Id de los Dockers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":579,\"sizeSlug\":\"full\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/11\/Kubectl.jpg\" alt=\"\" class=\"wp-image-579\"\/><figcaption class=\"wp-element-caption\">Kubectl get all &amp; Curl <\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Espero que les haya gustado y les sirva para crear su  CI \/ CD, completo, gratis. \u00a1A disposicion por cualquier consulta! En la proxima vamos a agregarle seguridad a nuestro Pipeline. Por ejemplo agregar una revision de la imager docker que hemos generado. ( Ver <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/seguridad-en-containers-escaneo-en-busqueda-de-vulnerabilidades\/\" target=\"_blank\" rel=\"noreferrer noopener\">Post de Trivy<\/a> )<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Muchas veces me consultan sobre pipelines, Docker o Kubernetes. Siempre he cre\u00eddo que el Hands On es la mejor forma de aprender, es por ello que vamos hacer una peque\u00f1a aplicaci\u00f3n con Python & Flask, dockerizarla y luego hacer el deployment en un cluster Kubernetes. Vamos a utilizar servicios gratis como GitHub Actions, para la creacion de nuestro Pipeline, & Okteto, para soportar nuestros deployment de Kubernetes.","Date":"2020-11-28 15:43:39","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=571"},{"ID":"610","Title":"Pasando de DevOps a DevSecOps en nuestro CI\/CD con GitHub Actions y Okteto.","Content":"<!-- wp:paragraph -->\n<p>Esta es la segunda parte de la <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/creando-nuestro-ci-cd-con-github-actions-y-okteto\/\" target=\"_blank\" rel=\"noreferrer noopener\">entrada<\/a> de CI\/CD, gratis, con <strong>GitHub Ac<\/strong><a href=\"https:\/\/www.kleankanteenkinder.com\/\"><strong>kleankanteenkinder<\/strong><\/a>  <a href=\"https:\/\/www.diegodallapalmaoutlet.com\/\"><strong>diegodallapalmaoutlet<\/strong><\/a>  <a href=\"http:\/\/www.admeve-toys.com\/completini-intimi-molto-sexy\/\"><strong>completini  intimi molto sexy<\/strong><\/a> <a href=\"https:\/\/www.saldibenetton.com\/\"><strong>saldibenetton<\/strong><\/a> <a href=\"https:\/\/www.harmontblainescarpe.com\/\"><strong>harmontblainescarpe<\/strong><\/a>  <a href=\"https:\/\/www.gioie-di-gea.com\/\"><strong>gioie-di-gea<\/strong><\/a> <a href=\"https:\/\/www.lamilanesaborse.com\/\"><strong>lamilanesaborse<\/strong><\/a> <a href=\"https:\/\/www.donkeywinkekatze.com\/\"><strong>donkeywinkekatze<\/strong><\/a>  <a href=\"https:\/\/www.negozigeox.com\/\"><strong>negozigeox<\/strong><\/a> <a href=\"https:\/\/www.24h-bottle.com\/\"><strong>24h-bottle<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne  abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.akuscarpe.com\/\"><strong>akuscarpe<\/strong><\/a> <a href=\"https:\/\/www.ovyeshop.com\/\"><strong>ovyeshop<\/strong><\/a> <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <strong>tions<\/strong> &amp; <strong>Okteto<\/strong> como cluster de Kubernetes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Ya tenemos nuestro Pipeline funcionando! Ahora vamos a transformarnos en DevSecOps y vamos a integrar un poco de Seguridad, que nunca viene mal, a nuestro CI\/CD.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Me puse a revisar y creo que si pensamos en Analisis de Codigo, pensamos<a href=\"https:\/\/www.associazioneautaut.it\/hawaiian-prodotti-solari\"><strong>hawaiian prodotti solari&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/kinderwagen-peg-perego-pliko-p3\"><strong>kinderwagen peg perego pliko p3&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/logitech-dongle\"><strong>logitech dongle&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%A6%D7%99%D7%A4%D7%95%D7%99-%D7%9E%D7%92%D7%A0%D7%98%D7%99-%D7%9C%D7%93%D7%9C%D7%AA%D7%95%D7%AA\"><strong>\u05e6\u05d9\u05e4\u05d5\u05d9 \u05de\u05d2\u05e0\u05d8\u05d9 \u05dc\u05d3\u05dc\u05ea\u05d5\u05ea&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/%D1%80%D0%B0%D0%B7%D0%BA%D0%BB%D0%BE%D0%BD%D0%B8%D1%82%D0%B5%D0%BB-%D0%BF%D0%B2%D1%86-%D0%BF%D0%BF%D0%BA-%D1%8440-%D1%8440-87%D0%B3%D1%80%D0%B0%D0%B4%D1%83%D1%81%D0%B0\"><strong>\u0440\u0430\u0437\u043a\u043b\u043e\u043d\u0438\u0442\u0435\u043b \u043f\u0432\u0446 \u043f\u043f\u043a \u044440 \u044440-87\u0433\u0440\u0430\u0434\u0443\u0441\u0430&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/oliver-dragojevic-majica\"><strong>oliver dragojevic majica&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/dulap-exterior-dedeman\"><strong>dulap exterior dedeman&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/przez-te-dresy-zielone\"><strong>przez te dresy zielone&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/come-pulire-una-caffettiera-di-alluminio\"><strong>come pulire una caffettiera di alluminio&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%9B%D7%A8%D7%99%D7%AA-%D7%A4%D7%A8%D7%99%D7%93-%D7%A7%D7%9C%D7%90%D7%A1%D7%99%D7%A7\"><strong>\u05db\u05e8\u05d9\u05ea \u05e4\u05e8\u05d9\u05d3 \u05e7\u05dc\u05d0\u05e1\u05d9\u05e7&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/sklopka-za-mje%C5%A1alicu-betona\"><strong>sklopka za mje\u0161alicu betona&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/prevent-jacke\"><strong>prevent jacke&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/dita-logo-%D7%9E%D7%A9%D7%A7%D7%A4%D7%99-%D7%A9%D7%9E%D7%A9\"><strong>dita logo \u05de\u05e9\u05e7\u05e4\u05d9 \u05e9\u05de\u05e9&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%97%D7%96%D7%9F-%D7%A6%D7%95%D7%A7%D7%A8%D7%9E%D7%9F-%D7%A9%D7%9E%D7%9C%D7%95%D7%AA-%D7%9B%D7%9C%D7%94-%D7%9E%D7%97%D7%99%D7%A8%D7%99%D7%9D\"><strong>\u05d7\u05d6\u05df \u05e6\u05d5\u05e7\u05e8\u05de\u05df \u05e9\u05de\u05dc\u05d5\u05ea \u05db\u05dc\u05d4 \u05de\u05d7\u05d9\u05e8\u05d9\u05dd&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/liu-jo-muske-majice\"><strong>liu jo muske majice&nbsp;<\/strong><\/a> en SAST &amp; DAST. Entiendo que es un buen comienzo, pero \u00a1Vamos a revisar un poco mas! Vamos agregar funcionalidades como:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7 SAST con SonarCloud<br>\u00b7 Detect Secrets<br>\u00b7 An\u00e1lisis de Imagen Docker con Trivy de AquaSec<br>\u00b7 DAST con OWASP ZAP<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">SAST con SonarCloud<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Como muchos saben <strong>SonarQube<\/strong> es una plataforma para la calidad del codigo. Usa diversas herramientas de <a href=\"https:\/\/es.wikipedia.org\/wiki\/An%C3%A1lisis_est%C3%A1tico_de_software\">an\u00e1lisis est\u00e1tico de c\u00f3digo fuente<\/a> o SAST como <a href=\"https:\/\/es.wikipedia.org\/wiki\/Checkstyle\">Checkstyle<\/a>, <a href=\"https:\/\/es.wikipedia.org\/wiki\/PMD_(software)\">PMD<\/a> o <a href=\"https:\/\/es.wikipedia.org\/wiki\/FindBugs\">FindBugs<\/a> para obtener m\u00e9tricas que pueden ayudar a mejorar la calidad del c\u00f3digo de un programa.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a usar la version SaaS <strong>SonarCloud<\/strong>, que para proyectos publicos es gratis. Para poder agregarlo a nuestro GitHub Actions es necesita interactuar con el servicio, para ello vamos a gestionar el Token, requerido. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Primero creamos el proyecto en SonarCloud.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":611,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Captura-de-Pantalla-2020-12-21-a-las-18.59.57.png\" alt=\"\" class=\"wp-image-611\"\/><figcaption class=\"wp-element-caption\">Nuevo Proyecto<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a picar el el logo de GitHub Actions y seguimos los pasos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":612,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud1-scaled.jpg\" alt=\"\" class=\"wp-image-612\"\/><figcaption class=\"wp-element-caption\">GitHub Actions<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Seguimos con los pasos. Copiamos el Token, que luego lo utilizaremos en GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":613,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud2-scaled.jpg\" alt=\"\" class=\"wp-image-613\"\/><figcaption class=\"wp-element-caption\">GitHub Secrets<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Este es el YAML para crear el \"Actions\" que formara parate del Workflow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":614,\"width\":580,\"height\":368,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud3.png\" alt=\"\" class=\"wp-image-614\" width=\"580\" height=\"368\"\/><figcaption class=\"wp-element-caption\">YAML<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Sera necesario crear el archivo de propiedades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":615,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud4.png\" alt=\"\" class=\"wp-image-615\"\/><figcaption class=\"wp-element-caption\">SonarCloud Properties<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Luego de haber realizado el push, podremos revisar la calidad del codigo y las sugerencias de seguridad que arrojo en Analisis SAST en <a href=\"http:\/\/sonarcloud.io\" target=\"_blank\" rel=\"noreferrer noopener\">sonarcloud.io<\/a>.<br><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En la documentacion del <a href=\"https:\/\/github.com\/SonarSource\/sonarcloud-github-action\">GitHub Actions<\/a> se pueden encontrar como manejar los umbrales para recharzar el deploy, en base a lo que configuremos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":616,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud5-scaled.jpg\" alt=\"\" class=\"wp-image-616\"\/><figcaption class=\"wp-element-caption\">SonarCloud<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Cargamos el Token, que habiamos copiado.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":632,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Captura-de-Pantalla-2020-12-22-a-las-21.01.13.png\" alt=\"\" class=\"wp-image-632\"\/><figcaption class=\"wp-element-caption\">Token SONAR_TOKEN<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Detect Secrets<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos agregar este codigo a nuestro YAML. Estan son algunas de las cosas que estara revisando:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00b7 AWSKeyDetector<br>\u00b7 ArtifactoryDetector<br>\u00b7 Base64HighEntropyString<br>\u00b7 BasicAuthDetector<br>\u00b7 HexHighEntropyString<br>\u00b7 JwtTokenDetector<br>\u00b7 KeywordDetector<br>\u00b7 MailchimpDetector<br>\u00b7 PrivateKeyDetector<br>\u00b7 SlackDetector<br>\u00b7 SoftlayerDetector<br>\u00b7 StripeDetector<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>    ##########################\n    #     Detect Secrets     #\n    ##########################\n    - name: Detect Secrets\n      uses: evanextreme\/detect-secrets-action@1.0.0<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Esta es una buena manera de revisar si se filtra alg\u00fan acceso. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">An\u00e1lisis de Imagen Docker <\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Muy importante, revisar nuestras imagen de Docker. Para ello utilizaremos <a href=\"https:\/\/github.com\/aquasecurity\/trivy-action\" target=\"_blank\" rel=\"noreferrer noopener\">Trivy<\/a> de AquaSec. \u00a1Vamos agregar el c\u00f3digo al YAML!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>    ##########################\n    #       Trivy Scan       #\n    ##########################\n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity\/trivy-action@master\n      with:\n        image-ref: 'docker.io\/safernandez666\/okteto:${{ github.sha }}'\n        format: 'template'\n        template: '@\/contrib\/sarif.tpl'\n        output: 'trivy-results.sarif'\n\n    - name: Upload Trivy scan results to GitHub Security tab\n      uses: github\/codeql-action\/upload-sarif@v1\n      with:\n        sarif_file: 'trivy-results.sarif'<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Si miran el segundo Step la salida se sube al Tab de GitHub. Es ahi donde revisaremos los resultados. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":619,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Cloud_6-scaled.jpg\" alt=\"\" class=\"wp-image-619\"\/><figcaption class=\"wp-element-caption\">Trivy Scanning<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">DAST con OWASP ZAP Scan<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos agregar el An\u00e1lisis DAST. Es importante apuntar al EndPoint del Deployment. En nuestro caso el Kubernetes en Okteto.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>    ##########################\n    #      DAST Analisys     #\n    ##########################\n    - name: ZAP Scan\n      uses: zaproxy\/action-baseline@v0.4.0\n      with:\n        target: 'https:\/\/flaskapp-deployment-safernandez666.cloud.okteto.net\/'<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Los resultados, segun las configuraciones que hagamos, van a salir en la salida del Push o tambien via Email si hemos configurado el Dependanbot Alert. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":620,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Captura-de-Pantalla-2020-12-22-a-las-09.11.58.png\" alt=\"\" class=\"wp-image-620\"\/><figcaption class=\"wp-element-caption\">Salida<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":621,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2020\/12\/Captura-de-Pantalla-2020-12-22-a-las-09.12.22.png\" alt=\"\" class=\"wp-image-621\"\/><figcaption class=\"wp-element-caption\">Email<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Creo que estos cuatro controles nos dan un baseline de seguridad apropiado. Podemos agregar Linter o revisar los YAML's de los manifiestos de Kubernetes. Deber\u00e1n ustedes generar los umbrales para truncar o no el despliegue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero les sirva!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Les dejo el <a href=\"https:\/\/github.com\/safernandez666\/Okteto\" target=\"_blank\" rel=\"noreferrer noopener\">link<\/a> del proyecto.<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Esta es la segunda parte de la entrada de CI\/CD, gratis, con GitHub Actions & Okteto como cluster de Kubernetes.\n\n\u00a1Ya tenemos nuestro Pipeline funcionando! Ahora vamos a transformarnos en DevSecOps y vamos a integrar un poco de Seguridad, que nunca viene mal, a nuestro CI\/CD.","Date":"2020-12-22 12:55:16","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=610"},{"ID":"641","Title":"Centralizando Secretos con Hashicorp Vault","Content":"<!-- wp:paragraph -->\n<p>\u00bfComo hacer para que los secretos, que manejan nuestros DevOps, no q<a href=\"https:\/\/www.capsvondutch.com\/\"><strong>capsvondutch<\/strong><\/a> <a href=\"https:\/\/www.andcamiciesaldi.com\/\"><strong>andcamiciesaldi<\/strong><\/a> <a href=\"https:\/\/www.fracominaabiti.com\/\"><strong>fracominaabiti<\/strong><\/a> <a href=\"https:\/\/www.diego-dalla-palma.com\/\"><strong>diego-dalla-palma<\/strong><\/a>  <a href=\"https:\/\/www.legioiedigea.com\/\"><strong>legioiedigea<\/strong><\/a> <a href=\"https:\/\/www.toysonlinecheap.com\/lingerie-super-sexy\/\"><strong>lingerie  super sexy<\/strong><\/a> <a href=\"https:\/\/www.diegodellapalma.org\/\"><strong>diegodellapalma<\/strong><\/a> <a href=\"https:\/\/www.blundstoneprezzi.com\/\"><strong>blundstoneprezzi<\/strong><\/a>  <a href=\"https:\/\/www.von-dutch.org\/\"><strong>von-dutch<\/strong><\/a> <a href=\"https:\/\/www.harmontblainescarpe.com\/\"><strong>harmontblainescarpe<\/strong><\/a>  <a href=\"https:\/\/www.blundstoneoutlet.org\/\"><strong>blundstoneoutlet<\/strong><\/a>  <a href=\"https:\/\/www.mandarinaducksaldi.com\/\"><strong>mandarinaducksaldi<\/strong><\/a>  <a href=\"https:\/\/www.von-dutch.org\/\"><strong>von-dutch<\/strong><\/a> <a href=\"https:\/\/www.24h-bottle.com\/\"><strong>24h-bottle<\/strong><\/a> <a href=\"https:\/\/www.marellaoutlet.com\/\"><strong>marellaoutlet<\/strong><\/a> ueden en los servicios hardcodeados?. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>La soluci\u00f3n es centralizarlos en <a href=\"https:\/\/www.vaultproject.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Vault<\/a>. Este manejara secretos est\u00e1ticos y din\u00e1micos. Vamos a explorar el concepto de \"Encryption As a Service\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a utilizar Docker, para esta prueba. Vamos a crear las carpetas, que requerimos para la gestion del <strong>docker-compose.yaml<\/strong>.<a href=\"https:\/\/www.associazioneautaut.it\/hawaiian-prodotti-solari\"><strong>hawaiian prodotti solari&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/kinderwagen-peg-perego-pliko-p3\"><strong>kinderwagen peg perego pliko p3&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/logitech-dongle\"><strong>logitech dongle&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%A6%D7%99%D7%A4%D7%95%D7%99-%D7%9E%D7%92%D7%A0%D7%98%D7%99-%D7%9C%D7%93%D7%9C%D7%AA%D7%95%D7%AA\"><strong>\u05e6\u05d9\u05e4\u05d5\u05d9 \u05de\u05d2\u05e0\u05d8\u05d9 \u05dc\u05d3\u05dc\u05ea\u05d5\u05ea&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/%D1%80%D0%B0%D0%B7%D0%BA%D0%BB%D0%BE%D0%BD%D0%B8%D1%82%D0%B5%D0%BB-%D0%BF%D0%B2%D1%86-%D0%BF%D0%BF%D0%BA-%D1%8440-%D1%8440-87%D0%B3%D1%80%D0%B0%D0%B4%D1%83%D1%81%D0%B0\"><strong>\u0440\u0430\u0437\u043a\u043b\u043e\u043d\u0438\u0442\u0435\u043b \u043f\u0432\u0446 \u043f\u043f\u043a \u044440 \u044440-87\u0433\u0440\u0430\u0434\u0443\u0441\u0430&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/oliver-dragojevic-majica\"><strong>oliver dragojevic majica&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/dulap-exterior-dedeman\"><strong>dulap exterior dedeman&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/przez-te-dresy-zielone\"><strong>przez te dresy zielone&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/come-pulire-una-caffettiera-di-alluminio\"><strong>come pulire una caffettiera di alluminio&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%9B%D7%A8%D7%99%D7%AA-%D7%A4%D7%A8%D7%99%D7%93-%D7%A7%D7%9C%D7%90%D7%A1%D7%99%D7%A7\"><strong>\u05db\u05e8\u05d9\u05ea \u05e4\u05e8\u05d9\u05d3 \u05e7\u05dc\u05d0\u05e1\u05d9\u05e7&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/sklopka-za-mje%C5%A1alicu-betona\"><strong>sklopka za mje\u0161alicu betona&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/prevent-jacke\"><strong>prevent jacke&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/dita-logo-%D7%9E%D7%A9%D7%A7%D7%A4%D7%99-%D7%A9%D7%9E%D7%A9\"><strong>dita logo \u05de\u05e9\u05e7\u05e4\u05d9 \u05e9\u05de\u05e9&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%97%D7%96%D7%9F-%D7%A6%D7%95%D7%A7%D7%A8%D7%9E%D7%9F-%D7%A9%D7%9E%D7%9C%D7%95%D7%AA-%D7%9B%D7%9C%D7%94-%D7%9E%D7%97%D7%99%D7%A8%D7%99%D7%9D\"><strong>\u05d7\u05d6\u05df \u05e6\u05d5\u05e7\u05e8\u05de\u05df \u05e9\u05de\u05dc\u05d5\u05ea \u05db\u05dc\u05d4 \u05de\u05d7\u05d9\u05e8\u05d9\u05dd&nbsp;<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/liu-jo-muske-majice\"><strong>liu jo muske majice&nbsp;<\/strong><\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo mkdir Vault\/vault &amp;&amp; cd Vault\/vault\nsudo mkdir data policies logs config<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Con la creaci\u00f3n del <strong>Dockerfile<\/strong> &amp; el <strong>docker-compose.yaml <\/strong>quedaria de esta manera. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ubuntu:~\/Proyectos\/Vault$ tree\n.\n\u251c\u2500\u2500 docker-compose.yaml\n\u2514\u2500\u2500 vault\n    \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vault-config.json\n    \u251c\u2500\u2500 data\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 logs\n    \u2514\u2500\u2500 policies\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Creamos los archivos que nos estar\u00edan faltando. Por un lado el <strong>Dockerfile<\/strong>, que creara la imagen del container de Vault.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Imagen Base\nFROM alpine:3.11\n\n# Agregamos la Ultima version. \nENV VAULT_VERSION 1.6.3\n\n# Creacion de Directorio\nRUN mkdir \/vault\n\n# Descarga de Dependencias\nRUN apk --no-cache add \\\n      bash \\\n      ca-certificates \\\n      wget\n\n# Descarga de Vault y Configuracion\nRUN wget --quiet --output-document=\/tmp\/vault.zip https:\/\/releases.hashicorp.com\/vault\/${VAULT_VERSION}\/vault_${VAULT_VERSION}_linux_amd64.zip &amp;&amp; \\\n    unzip \/tmp\/vault.zip -d \/vault &amp;&amp; \\\n    rm -f \/tmp\/vault.zip &amp;&amp; \\\n    chmod +x \/vault\n\n# Path\nENV PATH=&quot;PATH=$PATH:$PWD\/vault&quot;\n\n# Agregar Archivos de Configuracion\nCOPY .\/config\/vault-config.json \/vault\/config\/vault-config.json\n\n# Exponemos el Port 8200\nEXPOSE 8200\n\n# Run Vault\nENTRYPOINT [&quot;vault&quot;]<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Dentro de config vamos a crear <strong>vault-config.json<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>{\n    &quot;backend&quot;: {\n      &quot;file&quot;: {\n        &quot;path&quot;: &quot;vault\/data&quot;\n      }\n    },\n    &quot;listener&quot;: {\n      &quot;tcp&quot;:{\n        &quot;address&quot;: &quot;0.0.0.0:8200&quot;,\n        &quot;tls_disable&quot;: 1\n      }\n    },\n    &quot;ui&quot;: true\n  }<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Como pueden ver para esta prueba hemos creado el Vault en Backend, esto no es una buena practica. Aca les dejo un <a href=\"https:\/\/www.vaultproject.io\/docs\/configuration\" target=\"_blank\" rel=\"noreferrer noopener\">enlace<\/a> para configuraci\u00f3n, como corresponde, un Backend. Agregamos el listener y la interfaz UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Por ultimo el <strong>docker-compose.yaml<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>version: '3.7'\n\nservices:\n\n  vault:\n    build:\n      context: .\/vault\n      dockerfile: Dockerfile\n    container_name: vault\n    ports:\n      - 8200:8200\n    volumes:\n      - .\/vault\/config:\/vault\/config\n      - .\/vault\/policies:\/vault\/policies\n      - .\/vault\/data:\/vault\/data\n      - .\/vault\/logs:\/vault\/logs\n    environment:\n      - VAULT_ADDR=http:\/\/127.0.0.1:8200\n      - VAULT_API_ADDR=http:\/\/127.0.0.1:8200\n    command: server -config=\/vault\/config\/vault-config.json\n    cap_add:\n      - IPC_LOCK<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear ese container con <strong>docker-compose up -d --build<\/strong> y revisamos si esta corriendo con <strong>docker ps<\/strong>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ubuntu:~\/Proyectos\/Vault$ docker-compose up -d --build\nBuilding vault\nStep 1\/9 : FROM alpine:3.11\n ---&gt; 4666da2f166f\nStep 2\/9 : ENV VAULT_VERSION 1.4.0\n ---&gt; Using cache\n ---&gt; 28751b3bdd2a\nStep 3\/9 : RUN mkdir \/vault\n ---&gt; Using cache\n ---&gt; 5add412a5e6d\nStep 4\/9 : RUN apk --no-cache add       bash       ca-certificates       wget\n ---&gt; Using cache\n ---&gt; 4ad54291195e\nStep 5\/9 : RUN wget --quiet --output-document=\/tmp\/vault.zip https:\/\/releases.hashicorp.com\/vault\/${VAULT_VERSION}\/vault_${VAULT_VERSION}_linux_amd64.zip &amp;&amp;     unzip \/tmp\/vault.zip -d \/vault &amp;&amp;     rm -f \/tmp\/vault.zip &amp;&amp;     chmod +x \/vault\n ---&gt; Using cache\n ---&gt; 0d57364580a7\nStep 6\/9 : ENV PATH=&quot;PATH=$PATH:$PWD\/vault&quot;\n ---&gt; Using cache\n ---&gt; 9c7f1ec59f98\nStep 7\/9 : COPY .\/config\/vault-config.json \/vault\/config\/vault-config.json\n ---&gt; Using cache\n ---&gt; bfe379075af6\nStep 8\/9 : EXPOSE 8200\n ---&gt; Using cache\n ---&gt; 58279a7c4316\nStep 9\/9 : ENTRYPOINT [&quot;vault&quot;]\n ---&gt; Using cache\n ---&gt; 0ba547c00ab3\n\nSuccessfully built 0ba547c00ab3\nSuccessfully tagged vault_vault:latest\nvault is up-to-date\nsantiago@ubuntu:~\/Proyectos\/Vault$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES\n276bf9952c73        vault_vault         &quot;vault server -confi\u2026&quot;   About a minute ago   Up About a minute   0.0.0.0:8200-&gt;8200\/tcp   vault\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos corriendo nuestro <strong>Vault<\/strong> para comenzar a gestionar nuestros secretos, est\u00e1ticos &amp; din\u00e1micos. Revisamos los logs, para poder iniciar nuestro Vault.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>santiago@ubuntu:~\/Proyectos\/Vault$ docker-compose logs\nAttaching to vault\nvault    | ==&gt; Vault server configuration:\nvault    | \nvault    |              Api Address: http:\/\/127.0.0.1:8200\nvault    |                      Cgo: disabled\nvault    |          Cluster Address: https:\/\/127.0.0.1:8201\nvault    |               Listener 1: tcp (addr: &quot;0.0.0.0:8200&quot;, cluster address: &quot;0.0.0.0:8201&quot;, max_request_duration: &quot;1m30s&quot;, max_request_size: &quot;33554432&quot;, tls: &quot;disabled&quot;)\nvault    |                Log Level: info\nvault    |                    Mlock: supported: true, enabled: true\nvault    |            Recovery Mode: false\nvault    |                  Storage: file\nvault    |                  Version: Vault v1.4.0\nvault    | \nvault    | 2021-03-08T19:33:11.303Z [INFO]  proxy environment: http_proxy= https_proxy= no_proxy=\nvault    | ==&gt; Vault server started! Log data will stream in below:\nvault    | \n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a conectarnos al Bash del contenedor para Inicializar el Vault con <strong>docker-compose exec vault bash<\/strong> y vamos a realizar estos comandos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>bash-5.0# vault operator init\nUnseal Key 1: 9+Vd1eK\/mU3wNUvyW08afht\/HImvk7TQ24uo7ZRCLRbp\nUnseal Key 2: rX\/3vOqY9sfiWTcA2xcHg18yD\/WtYwwjjUBBL2\/E\/3ft\nUnseal Key 3: ZvcCCQtk9S0O+wikzpfZN36b4O9zLnDFWfuyrUE6epJ7\nUnseal Key 4: qwboq8L9gLOkEJfRrmRxsxSgWN7cjx88lVc7cFt859kH\nUnseal Key 5: SagtdjGSd4LJ+btbhFigmXJldDtJkVWetlJtFvZs\/Deg\n\nInitial Root Token: s.nFx20EKUhNbwBuhjjFIbQQf9\n\nVault initialized with 5 key shares and a key threshold of 3. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated master key. Without at least 3 key to\nreconstruct the master key, Vault will remain permanently sealed!\n\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See &quot;vault operator rekey&quot; for more information.<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Tome nota de las claves de apertura y del token root. Deber\u00e1 proporcionar tres de las claves de apertura cada vez que se vuelva a sellar o reiniciar el servidor de Vault. \u00a1Arrancamos! Voy a copiar las 3 primeras. Para entender \u00bfporque 3 claves? ver este <a href=\"https:\/\/en.wikipedia.org\/wiki\/Shamir's_Secret_Sharing\" target=\"_blank\" rel=\"noreferrer noopener\">enlace<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>bash-5.0# vault operator unseal\nUnseal Key (will be hidden):\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    1\/3\nUnseal Nonce       4ebecbd8-126b-bb54-68fe-bdc0151ae02b\nVersion            1.6.3\nStorage Type       file\nHA Enabled         false\nbash-5.0# vault operator unseal\nUnseal Key (will be hidden):\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    2\/3\nUnseal Nonce       4ebecbd8-126b-bb54-68fe-bdc0151ae02b\nVersion            1.6.3\nStorage Type       file\nHA Enabled         false\nbash-5.0# vault operator unseal\nUnseal Key (will be hidden):\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    5\nThreshold       3\nVersion         1.6.3\nStorage Type    file\nCluster Name    vault-cluster-3deaf32c\nCluster ID      ae759a82-deec-e0b5-97de-265c7bac6a6a\nHA Enabled      false\nbash-5.0#<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Hecho! Ahora, usando el token root, podemos autenticarnos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>bash-5.0# vault login\nToken (will be hidden):\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run &quot;vault login&quot;\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                s.nFx20EKUhNbwBuhjjFIbQQf9\ntoken_accessor       KHACrJ4ej7gcw6c2JmQ30zD6\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [&quot;root&quot;]\nidentity_policies    []\npolicies             [&quot;root&quot;]<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vault ahora est\u00e1 abierto y listo para usar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a encender la Auditoria, para ello corremos este comando.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>bash-5.0# vault audit enable file file_path=\/vault\/logs\/audit.log\nSuccess! Enabled the file audit device at: file\/<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Crear los secretos para asegurar nuestra aplicaci\u00f3n Python. Para ello vamos a conectarnos a Vault, como ya sabemos y parametrizar las variables necesarias. Supongamos que necesitamos manejar el password de una API, en Flask &amp; Python, para que conecte a MySQL, ah\u00ed deber\u00edamos usar el m\u00f3dulo de database para que Vault haga la gesti\u00f3n en la BBDD y la APP. Para esta PoC usaremos KV, \u00f3sea Key Value. Levantamos el plugin y agregamos un valor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker exec -it vault bash\nbash-5.0# vault secrets enable kv\nSuccess! Enabled the kv secrets engine at: kv\/\nbash-5.0# vault kv put kv\/python password=tupassword\nSuccess! Data written to: kv\/python<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Lo listamos o revisamos UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>bash-5.0# vault kv get kv\/python\n====== Data ======\nKey         Value\n---         -----\npassword    tupassword<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":643,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/03\/Captura-de-Pantalla-2021-03-10-a-las-17.15.30.png\" alt=\"\" class=\"wp-image-643\"\/><figcaption class=\"wp-element-caption\">UI<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Excelente! Ya tenemos el valor en Vault. Ahora veamos la utilizaci\u00f3n de la libreria HVAC para la gestion del mismo en Python. A fines practicos estoy hardcodeando las variables, que deberian de ser variables de entorno.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"python\",\"mime\":\"text\/x-python\",\"theme\":\"cobalt\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>import os\n\nimport hvac\nimport json \n\nclient = hvac.Client()\nclient = hvac.Client(\n #url=os.environ['VAULT_URL'],\n #token=os.environ['VAULT_TOKEN']\n url='http:\/\/192.168.0.209:8200',\n token=&quot;s.tSz4Yjr58lZFrsQQTwDDYyMA&quot;\n)\n\njson_formatted_str = json.dumps(client.read('kv\/python'), indent=2)\n\nprint(json_formatted_str)\n\n# Escribo Token con un Lease de 1 Hora\n#client.write('kv\/python', type='pythons', lease='1h')\n# Imprimo Token\n#print(client.read('kv\/python'))<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Simplemente voy a leer y a imprimir el JSON con el valor. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":642,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/03\/Vault.png\" alt=\"\" class=\"wp-image-642\"\/><figcaption class=\"wp-element-caption\">Python<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Hay muchas cosas por hacer, como utilizar Consul para el resguardo de las llaves, agregar SSL, revisar los plugins ser\u00e1n necesarios para las diferentes implementaciones. Espero les sirva y comiencen a investigar.<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"\u00bfComo hacer para que los secretos, que manejan nuestros DevOps, no queden en los servicios hardcodeados?.\nLa soluci\u00f3n es centralizarlos en Vault. Este manejara secretos est\u00e1ticos y din\u00e1micos. Vamos a explorar el concepto de \"Encryption As a Service\"","Date":"2021-03-10 20:25:56","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=641"},{"ID":"654","Title":"Ofuscando datos con Kubeless","Content":"<!-- wp:paragraph -->\n<p>Hace unos d\u00edas estaba jugando con Lambdas, en AWS, y me dio cu<a href=\"https:\/\/www.loevenichhut.com\/\"><strong>loevenichhut<\/strong><\/a> <a href=\"https:\/\/www.marellaoutlet.com\/\"><strong>marellaoutlet<\/strong><\/a> <a href=\"https:\/\/www.negozigeox.com\/\"><strong>negozigeox<\/strong><\/a> <a href=\"https:\/\/www.diegodellapalma.org\/\"><strong>diegodellapalma<\/strong><\/a> <a href=\"https:\/\/www.chilloutshut.com\/\"><strong>chilloutshut<\/strong><\/a> <a href=\"https:\/\/www.von-dutch.org\/\"><strong>von-dutch<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.lamilanesaborse.com\/\"><strong>lamilanesaborse<\/strong><\/a> <a href=\"https:\/\/www.24bottles.org\/\"><strong>24bottles<\/strong><\/a> <a href=\"https:\/\/www.guardianiscarpe.com\/\"><strong>guardianiscarpe<\/strong><\/a> <a href=\"https:\/\/www.donkeyluckycat.com\/\"><strong>donkeyluckycat<\/strong><\/a> <a href=\"https:\/\/www.diego-dalla-palma.com\/\"><strong>diego-dalla-palma<\/strong><\/a>  <a href=\"https:\/\/www.blundstoneoutlet.org\/\"><strong>blundstoneoutlet<\/strong><\/a>  <a href=\"https:\/\/www.mandarinaducksaldi.com\/\"><strong>mandarinaducksaldi<\/strong><\/a>  <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> riosidad probar <a href=\"https:\/\/kubeless.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Kubeless<\/a>. No es ni m\u00e1s ni menos que Serverless en su estado agn\u00f3stico. Existen diferentes proyectos como <a href=\"https:\/\/www.openfaas.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">OpenFaaS<\/a> o Apache <a href=\"https:\/\/openwhisk.apache.org\/\" target=\"_blank\" rel=\"noreferrer noopener\">OpenWhisk<\/a>. Si todav\u00eda no tuviste un acercamiento a Serverless, es un buen momento para empezar<a href=\"https:\/\/www.anda-luzia-reisen.de\/porto-moniz-madeira-live-webcam\"><strong>porto moniz madeira live webcam\u00a0<\/strong><\/a> <a href=\"\u00a0https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%92%D7%A0%D7%95%D7%9C%D7%99%D7%94-%D7%A2%D7%92%D7%99%D7%9C%D7%99%D7%9D-%D7%A6%D7%99%D7%A4%D7%95%D7%99-%D7%96%D7%94%D7%91\"><strong>\u05de\u05d2\u05e0\u05d5\u05dc\u05d9\u05d4 \u05e2\u05d2\u05d9\u05dc\u05d9\u05dd \u05e6\u05d9\u05e4\u05d5\u05d9 \u05d6\u05d4\u05d1\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/conan-exiles-ps4\"><strong>conan exiles ps4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%90%D7%97-%D7%97%D7%A9%D7%9E%D7%9C%D7%99-%D7%A4%D7%9C%D7%96%D7%9E%D7%94\"><strong>\u05d0\u05d7 \u05d7\u05e9\u05de\u05dc\u05d9 \u05e4\u05dc\u05d6\u05de\u05d4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/btwin-dh\"><strong>btwin dh\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/be-cleany-%D0%BA%D1%8A%D1%80%D0%BF%D0%B8-wettask-%D1%80%D1%83%D0%BB%D0%BE\"><strong>be cleany \u043a\u044a\u0440\u043f\u0438 wettask \u0440\u0443\u043b\u043e\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/haider-maula-mp3\"><strong>haider maula mp3\u00a0<\/strong><\/a> <a href=\"https:\/\/www.associazioneautaut.it\/camiceria-turri-prezzi\"><strong>camiceria turri prezzi\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/rear-ram\"><strong>rear ram\u00a0<\/strong><\/a> <a href=\"https:\/\/www.idobusiness.net\/red-leather-shirt\"><strong>red leather shirt\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/pink-running-tights-nike\"><strong>pink running tights nike\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/webcam-brooklyn-bridge\"><strong>webcam brooklyn bridge\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/ar-drone-1.0\"><strong>ar drone 1.0\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%93%D7%90%D7%95%D7%9F-%D7%98%D7%90%D7%95%D7%9F-300-%D7%9E%D7%A9%D7%A7%D7%9C\"><strong>\u05d3\u05d0\u05d5\u05df \u05d8\u05d0\u05d5\u05df 300 \u05de\u05e9\u05e7\u05dc\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/nine-west-bags-sheer-genius-slgs\"><strong>nine west bags sheer genius slgs\u00a0<\/strong><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfQue es Serverless?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Si bien significa sin servidor no es tan as\u00ed. Dejas de usar un servidor f\u00edsico o uno en la nube, identificable, para pasar a utilizar contenedores ef\u00edmeros, temporales y sin estado donde se ejecutan los c\u00f3digos de las aplicaciones. Estos contenedores se crean en el momento que ejecutas la aplicaci\u00f3n y luego desaparecen, por lo que el servidor pasa a ser una parte menos visible del sistema.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Deber\u00edamos verlo como funciones que se ejecutaran antes nuestra llamada. Pasamos de arquitecturas monol\u00edticas a arquitecturas de micro servicios y seguramente pasaremos toda o casi toda nuestra arquitectura a este esquema de funciones, mas tarde o mas temprano. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prueba de Concepto<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ten\u00eda ganas de probar algo agn\u00f3stico, para salirme del vendor Lock In. Lo que vamos hacer es lo siguiente: Vamos a instalar, en nuestro cluster de Kubernetes, Kubeless. A trav\u00e9s de funciones consultar una Base de Datos MySQL y ofuscar parte del resultado. En este caso de uso lo que vamos a hacer es lo siguiente, vamos a presentar datos de negocio, como un OCR o PAM, ofuscados por la funci\u00f3n.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Primero vamos a revisar nuestra base de datos, que es la siguiente:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":655,\"width\":777,\"height\":570,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-20.56.48.png\" alt=\"\" class=\"wp-image-655\" width=\"777\" height=\"570\"\/><figcaption class=\"wp-element-caption\">Base de Datos<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Instalaci\u00f3n de Kubeless, UI &amp; Cliente <\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>En este caso voy a realizar la PoC con Minikube. Vamos a instalar en el cluster bajo el <em>namespace<\/em> kubeless.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>export RELEASE=$(curl -s https:\/\/api.github.com\/repos\/kubeless\/kubeless\/releases\/latest | grep tag_name | cut -d '&quot;' -f 4)\nkubectl create ns kubeless\nkubectl create -f https:\/\/github.com\/kubeless\/kubeless\/releases\/download\/$RELEASE\/kubeless-$RELEASE.yaml<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Revisamos nuestros pods.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":657,\"width\":977,\"height\":332,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-21.50.51.png\" alt=\"\" class=\"wp-image-657\" width=\"977\" height=\"332\"\/><figcaption class=\"wp-element-caption\">kubectl get all -n kubeless<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Para instalar el cliente ejecutamos los siguientes comandos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>export OS=$(uname -s| tr '[:upper:]' '[:lower:]')\ncurl -OL https:\/\/github.com\/kubeless\/kubeless\/releases\/download\/$RELEASE\/kubeless_$OS-amd64.zip &amp;&amp; \\\n  unzip kubeless_$OS-amd64.zip &amp;&amp; \\\n  sudo mv bundles\/kubeless_$OS-amd64\/kubeless \/usr\/local\/bin\/<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a instalar nuestra interfaz gr\u00e1fica y acceder. Para ello deberemos conocer la direcci\u00f3n ip del cluster minikube y el puerto de NodePort. En este caso es 192.168.172.17 con el puerto 32361.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":658,\"width\":953,\"height\":553,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-21.57.18.png\" alt=\"\" class=\"wp-image-658\" width=\"953\" height=\"553\"\/><figcaption class=\"wp-element-caption\">Ip de Minikube y NodePort<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Accedemos a la Interfaz!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":659,\"width\":805,\"height\":510,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-22.00.14.png\" alt=\"\" class=\"wp-image-659\" width=\"805\" height=\"510\"\/><figcaption class=\"wp-element-caption\">UI<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Aca les dejo el<a href=\"https:\/\/github.com\/safernandez666\/kubeless\"> proyecto<\/a>, para que tengan de guia. Es momento de subir nuestra funci\u00f3n Python. Temas importantes, el nombre del programa es <strong><em>app.py<\/em> <\/strong>y el handler es <strong><em>all<\/em><\/strong>. El programa conectar\u00e1 a la Base de Datos MySQL, para traer los datos, y luego con la funci\u00f3n <em>ofuscar<\/em> realizaremos bloqueo de ciertos caracteres. Vamos a revisar el programa y subiremos la funci\u00f3n. Siempre digo lo mismo: NO SOY DEV. \u00a1Es solo para jugar!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"python\",\"mime\":\"text\/x-python\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>import pymysql, json\n\nhost = '172.17.0.8' # Direccion IP del Pod con MySQL\nname = 'root'\npassword = 'password'\ndb_name = 'cards'\nport = 3306\n\nconn = pymysql.connect(host=host, port=port,user=name, passwd=password, db=db_name, connect_timeout=5)\n\ndef ofuscar(pam):\n    # Posiciones a Cambiar\n    posiciones = [5, 6, 7, 8, 10, 11, 12, 13]\n    # Caracter de Reemplazo\n    repl_char = '#'\n    temp = list(pam)\n    pam_ofuscado = [repl_char if idx in posiciones else ele for idx, ele in enumerate(temp)]\n    pam_ofuscado = ''.join(pam_ofuscado)\n    return pam_ofuscado\n\n\ndef all(event, context):\n    with conn.cursor() as cur:\n        cur.execute(&quot;select * from cardholder&quot;)\n        rv = cur.fetchall()\n        cardholder = []\n        content = {}\n        for result in rv:\n            content = {'id': result[0], 'name': result[2], 'surname': result[1], 'pam': result[3], 'cvv': result[4]}\n            content['pam'] = ofuscar(content['pam'])\n            cardholder.append(content)\n            content = {}\n        jsonStr = json.dumps(cardholder)\n        print(jsonStr)\n    return jsonStr<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Llego el momento de subirla! Para ello utilizamos el siguiente comando. El deploy que haremos se llamara <strong><em>cards<\/em><\/strong>, con el handler <strong><em>app.all <\/em><\/strong>y haremos referencia a la ruta del programa y el archivo de dependencias <em><strong>requeriments.txt<\/strong><\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"ambiance\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubeless function deploy cards --runtime python3.7 --handler app.all --from-file app.py --dependencies requirements.txt --servicePort 80 --namespace kubeless<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Realizamos el deploy &amp; listamos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":661,\"width\":937,\"height\":349,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-22.15.17.png\" alt=\"\" class=\"wp-image-661\" width=\"937\" height=\"349\"\/><figcaption class=\"wp-element-caption\">Deploy &amp; List<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Revisamos en la UI y observaremos c\u00f3mo se gener\u00f3 el Pod que ejecutara nuestra funci\u00f3n. Por ejemplo: <em><strong>cards-7ffbdccf7-nktjf<\/strong><\/em>. Segun nuestro consumo y nuestras configuraciones tendremos un escalamiento horizontal para poder soportar todas las consultas a nuestras funciones. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":662,\"width\":886,\"height\":559,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-22.16.46.png\" alt=\"\" class=\"wp-image-662\" width=\"886\" height=\"559\"\/><figcaption class=\"wp-element-caption\">UI &amp; Pod en Linea<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Lista la magia! Ahora haremos la consulta vi CLI y uala, tenemos el dato ofuscado. El JSON que nos devuelve, la funci\u00f3n, tiene el campo PAM con caracteres ocultos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":676,\"width\":1105,\"height\":570,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/06\/Captura-de-Pantalla-2021-06-20-a-las-22.22.23-1.png\" alt=\"\" class=\"wp-image-676\" width=\"1105\" height=\"570\"\/><figcaption class=\"wp-element-caption\">kubeless function call cards<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como pueden ver con muy poco podemos agregar una capa mas de seguridad, cuando compartimos datos. Las maneras de utilizar las funciones son inimaginables, depende de nosotros. Espero que les haya gustado y tengan ganas de investigar como asegurar esas funciones, consumirlas por HTTP, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Saludos!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si te gusta jugar con Kubernetes te dejo este <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/creando-nuestro-ci-cd-con-github-actions-y-okteto\/\" target=\"_blank\" rel=\"noreferrer noopener\">enlace<\/a> para que te diviertas con Okteto, un cluster gratis. <\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Como usar Serverless en Kubernetes con Kubeless.","Date":"2021-06-21 01:30:28","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=654"},{"ID":"702","Title":"Centralizando Secretos Din\u00e1micos con Hashicorp Vault","Content":"<!-- wp:paragraph -->\n<p>Hace un tiempo escrib\u00ed sobre el manejo de secretos est\u00e1ticos en <a href=\"https:\/\/www.vaultproject.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">HashiCorp Vault<\/a> en esta <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/centralizando-secretos-con-hashicorp-vault\/\" target=\"_blank\" rel=\"noreferrer noopener\">entrada<\/a>. \u00a1Hoy le tocan a los din\u00e1m<a href=\"https:\/\/www.24h-bottle.com\/\"><strong>24h-bottle<\/strong><\/a> <a href=\"https:\/\/www.lecosonnenschirm.com\/\"><strong>lecosonnenschirm<\/strong><\/a>  <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.and-camicie.com\/\"><strong>and-camicie<\/strong><\/a> <a href=\"https:\/\/www.andcamicienegozi.com\/\"><strong>andcamicienegozi<\/strong><\/a>  <a href=\"https:\/\/www.donkeywinkekatze.com\/\"><strong>donkeywinkekatze<\/strong><\/a>  <a href=\"https:\/\/www.loevenichhut.com\/\"><strong>loevenichhut<\/strong><\/a> <a href=\"https:\/\/www.lamilanesaborse.com\/\"><strong>lamilanesaborse<\/strong><\/a> <a href=\"https:\/\/www.lecopavillon.com\/\"><strong>lecopavillon<\/strong><\/a> <a href=\"https:\/\/www.ynotoutlet.org\/\"><strong>ynotoutlet<\/strong><\/a> <a href=\"https:\/\/www.lecopavillon.com\/\"><strong>lecopavillon<\/strong><\/a> <a href=\"https:\/\/www.capsvondutch.com\/\"><strong>capsvondutch<\/strong><\/a> <a href=\"https:\/\/www.ovyescarpe.com\/\"><strong>ovyescarpe<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a>  <a href=\"https:\/\/www.diegodellapalma.org\/\"><strong>diegodellapalma<\/strong><\/a> icos! Para ello vamos a usar un docker-compose donde levantare<a href=\"https:\/\/www.soupatricia.com\/%C3%B6rh%C3%A4nge-tatueringstudio\"><strong>\u00f6rh\u00e4nge tatueringstudio\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/lego-harry-potter-voldemort\"><strong>lego harry potter voldemort\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anda-luzia-reisen.de\/porto-moniz-madeira-live-webcam\"><strong>porto moniz madeira live webcam\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%A7%D7%9E%D7%99%D7%9C%D7%95%D7%98%D7%A8%D7%A7%D7%98-%D7%9E%D7%A1%D7%9B%D7%94-%D7%9C%D7%A9%D7%99%D7%A2%D7%A8-250-%D7%9E%26quot\"><strong>\u05e7\u05de\u05d9\u05dc\u05d5\u05d8\u05e8\u05e7\u05d8 \u05de\u05e1\u05db\u05d4 \u05dc\u05e9\u05d9\u05e2\u05e8 250 \u05de\"\u00a0<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/cacciaviti-elettricista-professionali-amazon\"><strong>cacciaviti elettricista professionali amazon\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/t-shirt-med-tryk-40-%C3%A5r\"><strong>t shirt med tryk 40 \u00e5r\u00a0<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/camas-mayor\"><strong>camas mayor\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/shein-vestidos-coctel\"><strong>shein vestidos coctel\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/t-shirt-med-tryk-40-%C3%A5r\"><strong>t shirt med tryk 40 \u00e5r\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/accessori-moda-menesello\"><strong>accessori moda menesello\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/conan-exiles-ps4\"><strong>conan exiles ps4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%93%D7%90%D7%95%D7%9F-%D7%98%D7%90%D7%95%D7%9F-300-%D7%9E%D7%A9%D7%A7%D7%9C\"><strong>\u05d3\u05d0\u05d5\u05df \u05d8\u05d0\u05d5\u05df 300 \u05de\u05e9\u05e7\u05dc\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/haider-maula-mp3\"><strong>haider maula mp3\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/%D8%A7%D8%B3%D8%A8%D8%A7%D8%A8-%D9%88%D8%AC%D8%B9-%D8%A7%D9%84%D8%AC%D9%86%D8%A8-%D9%84%D9%84%D8%AD%D8%A7%D9%85%D9%84\"><strong>\u0627\u0633\u0628\u0627\u0628 \u0648\u062c\u0639 \u0627\u0644\u062c\u0646\u0628 \u0644\u0644\u062d\u0627\u0645\u0644\u00a0<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/oggetti-per-arredamento-moderno-amazon\"><strong>oggetti per arredamento moderno amazon\u00a0<\/strong><\/a>mos un <strong>Vault<\/strong> + <strong>MySQL Server<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfQue es Vault?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Como su nombre lo indica es una b\u00f3veda que nos sirve para la administraci\u00f3n de secretos. Nos permite administrar el almacenamiento de los mismos como nombre de usuario, contrase\u00f1a y credenciales de Base de Datos. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Manos a la obra. Vamos a necesitar, para esta POC, tener instalado Docker &amp; Docker-Compose.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"duotone-dark\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>version: &quot;3.3&quot;\nservices:\n  vault:\n    image: vault\n    container_name: vault-dev\n    ports:\n      - '8200:8200'\n    restart: always\n    volumes:\n      - .\/vault\/config:\/vault\/config\n      - .\/vault\/policies:\/vault\/policies\n      - .\/vault\/data:\/vault\/data\n      - .\/vault\/logs:\/vault\/logs\n    environment:\n      - 'VAULT_ADDR=http:\/\/localhost:8200'\n      - 'VAULT_DEV_ROOT_TOKEN_ID=00000000-0000-0000-0000-000000000000'\n      - 'dev'\n\n    cap_add:\n      - IPC_LOCK\n  db:\n    image: mysql\/mysql-server:5.7\n    container_name: mysql-dev\n    restart: always\n    environment:\n     MYSQL_ROOT_PASSWORD: 's4nt1ag0'\n\n    ports:\n      - '3306:3306'\n    expose:\n      - '3306'\n    volumes:\n      - mysql-db:\/var\/lib\/mysql\nvolumes:\n  mysql-db:<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora corremos la configuraci\u00f3n, del manifiesto, con <strong>docker-compose up<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":703,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/09\/Captura-de-Pantalla-2021-09-29-a-las-10.17.06.png\" alt=\"\" class=\"wp-image-703\"\/><figcaption class=\"wp-element-caption\">docker-compose up<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Configuraci\u00f3n MySQL<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Podr\u00edamos utilizar el usuario <em><strong>root<\/strong><\/em>, para la PoC, pero como \"<em>Best Practice<\/em>\" vamos a crear un usuario llamado <strong><em>wordpress<\/em><\/strong> con todos los privilegios necesarios para la prueba. \u00a1Vamos a conectarnos a nuestro docker, via shell, para crearlo! Si revisan el manifiesto lo llamamos <em>container_name: mysql-dev<\/em>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"duotone-dark\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker exec -it mysql-dev  mysql -uroot -p's4nt1ag0'\nCREATE DATABASE 'wordpress_db';\nCREATE USER 'wordpress'@'%' IDENTIFIED BY 'wordpress';\nGRANT ALL PRIVILEGES ON *.* TO 'wordpress_db' WITH GRANT OPTION;<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Configuraci\u00f3n Vault<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a conectarnos al docker, si revisan el manifiesto lo llamamos <meta charset=\"utf-8\"><em>container_name: vault-dev<\/em>. Ya en el contendor vamos agregar las variables de entorno e instalar el plugin the MySQL.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"duotone-dark\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Conexion al Contenedor, como root.\ndocker exec -it -u 0 vault-dev sh\n\n# Configuracion de Variables de Entorno\nexport VAULT_TOKEN=00000000\u20130000\u20130000\u20130000\u2013000000000000\nexport VAULT_ADDR=http:\/\/127.0.0.1:8200\n\n# Habilitamos BBDD Generica\nvault secrets enable database<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":704,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/09\/Captura-de-Pantalla-2021-09-29-a-las-10.40.36.png\" alt=\"\" class=\"wp-image-704\"\/><figcaption class=\"wp-element-caption\">Vault GUI<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a configurar la base de datos y los roles para el consumo. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"duotone-dark\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Configurar Base de Datos para MySQL\nvault write database\/config\/my-mysql-database \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=&quot;wordpress:wordpress@tcp(mysql-dev:3306)\/&quot; \\\n    allowed_roles=&quot;*&quot; \\\n    username=&quot;wordpress&quot; \\\n    password=&quot;wordpress&quot; \\\n    default_ttl=&quot;1h&quot; \\\n\tmax_ttl=&quot;386h&quot;\n\n# Configurar Roles para Usuarios Dinamicos\nvault write database\/roles\/my-role \\\n    db_name=wordpress_db \\\n    creation_statements=&quot;CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';&quot; \\\n    default_ttl=&quot;1h&quot; \\\n    max_ttl=&quot;24h&quot;\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Listo! Ahora podemos consumir Vault y obtener los secretos din\u00e1micos con <strong><em>vault read database\/creds\/my-role<\/em><\/strong>. Aca les dejo una imagen como se popula la base de datos, con el usuarios &amp; password din\u00e1mico, y la forma de consumir los secretos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":706,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/09\/Captura-de-Pantalla-2021-09-29-a-las-11.29.05.png\" alt=\"\" class=\"wp-image-706\"\/><figcaption class=\"wp-element-caption\">vault read database\/creds\/my-role<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":705,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/09\/Captura-de-Pantalla-2021-09-29-a-las-11.28.59.png\" alt=\"\" class=\"wp-image-705\"\/><figcaption class=\"wp-element-caption\">select user from mysql.user;<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>En la primer imagen consultamos el rol y nos entrega el usuario &amp; password, mientras hacemos la query en la tabla de usuarios de MySQL encontramos el usuarios <meta charset=\"utf-8\">din\u00e1mico que tiene un lease de 1 hora. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Aca le dejo el comando curl para poder jugar con el JSON.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"duotone-dark\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>curl --header &quot;X-Vault-Token: $VAULT_TOKEN&quot; \\\n       --request GET \\\n       http:\/\/127.0.0.1:8200\/v1\/database\/creds\/my-role | jq<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":713,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/09\/Captura-de-Pantalla-2021-09-29-a-las-12.14.00.png\" alt=\"\" class=\"wp-image-713\"\/><figcaption class=\"wp-element-caption\">curl<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Espero que les sirva!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Vault es una b\u00f3veda que nos sirve para la administraci\u00f3n de secretos. Nos permite administrar el almacenamiento de los mismos como nombre de usuario, contrase\u00f1a y credenciales de Base de Datos. ","Date":"2021-09-29 14:49:07","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=702"},{"ID":"721","Title":"Acceso Seguro a nuestro servidores SSH via Teleport","Content":"<!-- wp:paragraph -->\n<p><a href=\"https:\/\/goteleport.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Teleport<\/a> es un Gateway para asegurar acceso remotos a servidores Linux o la API de<a href=\"https:\/\/www.scarpeovye.com\/\"><strong>scarpeovye<\/strong><\/a> <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> <a href=\"https:\/\/www.menairmaxsneaker.com\/air-max-goaterra-2-0\/\"><strong>air max  goaterra 2.0<\/strong><\/a> <a href=\"http:\/\/www.admeve-toys.com\/completini-intimi-molto-sexy\/\"><strong>completini  intimi molto sexy<\/strong><\/a> <a href=\"https:\/\/www.chilloutshut.com\/\"><strong>chilloutshut<\/strong><\/a> <a href=\"https:\/\/www.akuscarpe.com\/\"><strong>akuscarpe<\/strong><\/a> <a href=\"https:\/\/www.saldigeox.com\/\"><strong>saldigeox<\/strong><\/a> <a href=\"https:\/\/www.kleankanteentrinkflasche.com\/\"><strong>kleankanteentrinkflasche<\/strong><\/a>  <a href=\"https:\/\/www.andcamicienegozi.com\/\"><strong>andcamicienegozi<\/strong><\/a>  <a href=\"https:\/\/www.gabsoutlet.com\/\"><strong>gabsoutlet<\/strong><\/a> <a href=\"https:\/\/www.guardianialberto.com\/\"><strong>guardianialberto<\/strong><\/a>  <a href=\"https:\/\/www.scarpeovye.com\/\"><strong>scarpeovye<\/strong><\/a> <a href=\"https:\/\/www.chilloutsmutze.com\/\"><strong>chilloutsmutze<\/strong><\/a> <a href=\"https:\/\/www.akuschuhe.com\/\"><strong>akuschuhe<\/strong><\/a> <a href=\"https:\/\/www.borsegabsoutlet.com\/\"><strong>borsegabsoutlet<\/strong><\/a>  Kubernetes. Esta destinado a ser usado en lugar de <strong>OpenSSH<\/strong> para organizaciones que necesiten proteger su infraestructura, cumplir con las mejores practicas de seguridad y los requerimientos de compliance. Nos ayuda a tener visibilidad completa de la actividad que ocurre en la arquitectura, reduciendo el tiempo operativo de la administraci\u00f3n de acceso privilegiado sea en la <a href=\"https:\/\/www.autocarescarcesa.net\/suport-telefon-auto-allview\"><strong>suport telefon auto allview\u00a0<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/marine-stickers-for-boat\"><strong>marine stickers for boat\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%97%D7%A1%D7%A0%D7%99-%D7%97%D7%A9%D7%9E%D7%9C-%D7%9E%D7%91%D7%A6%D7%A2%D7%99%D7%9D-%D7%91%D7%90%D7%A8-%D7%A9%D7%91%D7%A2-%D7%9E%D7%9B%D7%95%D7%A0%D7%AA-%D7%9B%D7%91%D7%99%D7%A1%D7%94\"><strong>\u05de\u05d7\u05e1\u05e0\u05d9 \u05d7\u05e9\u05de\u05dc \u05de\u05d1\u05e6\u05e2\u05d9\u05dd \u05d1\u05d0\u05e8 \u05e9\u05d1\u05e2 \u05de\u05db\u05d5\u05e0\u05ea \u05db\u05d1\u05d9\u05e1\u05d4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.soupatricia.com\/k%C3%A4rring-moppe\"><strong>k\u00e4rring moppe\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/hp-%D7%9E%D7%93%D7%A4%D7%A1%D7%AA-%D7%A4%D7%A9%D7%95%D7%98%D7%94\"><strong>hp \u05de\u05d3\u05e4\u05e1\u05ea \u05e4\u05e9\u05d5\u05d8\u05d4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/pantalon-chino-homme-skinny\"><strong>pantalon chino homme skinny\u00a0<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/igi-e-co-sneakers-alte-amazon\"><strong>igi e co sneakers alte amazon\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/nike-free-x-metcon-2-vs-metcon-5\"><strong>nike free x metcon 2 vs metcon 5\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%9E%D7%96%D7%95%D7%95%D7%93%D7%95%D7%AA-%D7%A7%D7%A9%D7%99%D7%97%D7%95%D7%AA-%D7%A7%D7%95%D7%A4%D7%95%D7%9F\"><strong>\u05de\u05d6\u05d5\u05d5\u05d3\u05d5\u05ea \u05e7\u05e9\u05d9\u05d7\u05d5\u05ea \u05e7\u05d5\u05e4\u05d5\u05df\u00a0<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/%D0%B4%D0%B5%D1%82%D1%81%D0%BA%D0%B8-%D1%84%D0%BE%D0%BB%D0%BA%D0%BB%D0%BE%D1%80%D0%BD%D0%B8-%D0%BC%D1%83%D0%B7%D0%B8%D0%BA%D0%B0%D0%BB%D0%BD%D0%B8-%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B8\"><strong>\u0434\u0435\u0442\u0441\u043a\u0438 \u0444\u043e\u043b\u043a\u043b\u043e\u0440\u043d\u0438 \u043c\u0443\u0437\u0438\u043a\u0430\u043b\u043d\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438\u00a0<\/strong><\/a> <a href=\"https:\/\/www.degridiron.org\/3060-ti\"><strong>3060 ti\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/%D7%90%D7%A7%D7%95%D7%95%D7%A8%D7%99%D7%95%D7%9D-250-%D7%9C%D7%99%D7%98%D7%A8\"><strong>\u05d0\u05e7\u05d5\u05d5\u05e8\u05d9\u05d5\u05dd 250 \u05dc\u05d9\u05d8\u05e8\u00a0<\/strong><\/a> <a href=\"https:\/\/www.theverandasattimberglen.com\/aloe-vera-gel-da-bere-in-farmacia-amazon\"><strong>aloe vera gel da bere in farmacia amazon\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/%D7%9E%D7%A2%D7%91%D7%93-gb-ram\"><strong>\u05de\u05e2\u05d1\u05d3 gb ram\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/%CF%84%CE%B1-%CF%80%CE%B1%CF%80%CE%BF%CF%85%CF%84%CF%83%CE%B9%CE%B1-%CF%84%CE%BF%CF%85-%CF%80%CF%81%CE%BF%CF%83%CF%86%CF%85%CE%B3%CE%B1\"><strong>\u03c4\u03b1 \u03c0\u03b1\u03c0\u03bf\u03c5\u03c4\u03c3\u03b9\u03b1 \u03c4\u03bf\u03c5 \u03c0\u03c1\u03bf\u03c3\u03c6\u03c5\u03b3\u03b1\u00a0<\/strong><\/a>nube o en On Premises. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Teleport tiene como objetivo ser un proxy ssh y nos trae el concepto de entorno en lugar de servidores. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Caracter\u00edsticas<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Un solo Gateway para acceso SSH o Kubernetes, para toda la organizaci\u00f3n.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Autenticaci\u00f3n basada en certificados, en lugar de claves est\u00e1ticas. <\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Nos evita la distribuci\u00f3n de claves. Las llaves entregadas tienen caducidad automatica por la autoridad certificadora ( CA ).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Conectarse a clusters ubicados por detr\u00e1s de firewalls sin acceso directo a internet trav\u00e9s de bastiones SSH. <\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Capacidad de gestionar la confianza entre equipos, organizaciones y centros de datos.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Acceso SSH \/ Kubernetes a enternos sin necesidad de puertos abiertos. <\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Control de Acceso basado en Roles ( RBAC ).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Unica herramienta para administrar los accesos.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Registros de Auditoria y Grabaci\u00f3n de sesiones. <\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfComo funciona?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":723,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-16.58.35.png\" alt=\"\" class=\"wp-image-723\"\/><figcaption class=\"wp-element-caption\">Teleport How to?<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a configurar nuestro acceso SSH al master del cluster Kubernetes. En otra entrada haremos la configuraci\u00f3n a la API de Kubernetes para interactuar con <strong>kubectl<\/strong>. Para esto necesitaremos un servidor con el servicio SSH y un servidor, con Teleport, que hara de Proxy | <a href=\"https:\/\/www.techtarget.com\/searchsecurity\/definition\/privileged-access-management-PAM\" target=\"_blank\" rel=\"noreferrer noopener\">PAM<\/a> al servicio. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Mi escenario es el siguiente. Tengo 3 servidores, con Ubuntu 20.04:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td>master.local<\/td><td>192.168.205.138<\/td><\/tr><tr><td>worker01.local<\/td><td><meta charset=\"utf-8\">192.168.205.139<\/td><\/tr><tr><td>teleport.local<\/td><td><meta charset=\"utf-8\">192.168.205.135<\/td><\/tr><\/tbody><\/table><figcaption class=\"wp-element-caption\">Tabla<\/figcaption><\/figure>\n<!-- \/wp:table -->\n\n<!-- wp:paragraph -->\n<p>Si no sabes como instalar un cluster de Kubernetes, te dejo este <a href=\"https:\/\/computingforgeeks.com\/install-kubernetes-on-ubuntu-using-k3s\/\" target=\"_blank\" rel=\"noreferrer noopener\">articulo<\/a>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":724,\"width\":713,\"height\":136,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-16.36.01.png\" alt=\"\" class=\"wp-image-724\" width=\"713\" height=\"136\"\/><figcaption class=\"wp-element-caption\">Cluster Kubernetes<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Para instalar <strong>teleport<\/strong> en Ubuntu, <a href=\"https:\/\/goteleport.com\/docs\/getting-started\/linux-server\/\" target=\"_blank\" rel=\"noreferrer noopener\">podes hacerlo de esta manera<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Generaci\u00f3n de Usuario<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lo primero que tenemos que hacer es crear el usuario en nuestro servidor para comenzar las configuraciones. Vamos a usar el siguente comando, dentro del servidor de teleport.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo tctl users add teleport-ssh  --roles=editor,access --logins=root,santiago<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Creamos el usuario teleport-ssh con roles de editor y acceso, donde solo podr\u00e1 loggearse con root y santiago.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":726,\"width\":713,\"height\":136,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-17.14.33-1.png\" alt=\"\" class=\"wp-image-726\" width=\"713\" height=\"136\"\/><figcaption class=\"wp-element-caption\">tluser<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Con la URL que nos entrega terminamos de generar el usuario, para ello tenemos una hora. Sera necesario contar con un dispositivo m\u00f3vil para configurar el MFA. En mi caso usare <a href=\"https:\/\/authy.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Authy<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":727,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-17.19.12.png\" alt=\"\" class=\"wp-image-727\"\/><figcaption class=\"wp-element-caption\">Portal de Login<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Una vez loggin on, revisamos la consola y vemos nuestro usuario. Teleport siempre impondr\u00e1 el uso de autenticaci\u00f3n de dos factores de forma predeterminada. Admite contrase\u00f1as de un solo uso (OTP) y tokens de hardware (U2F). Este inicio r\u00e1pido utilizar\u00e1 OTP; necesitar\u00e1 una aplicaci\u00f3n compatible con OTP que pueda escanear un c\u00f3digo QR.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":728,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-17.21.15.png\" alt=\"\" class=\"wp-image-728\"\/><figcaption class=\"wp-element-caption\">usuario teleport-ssh<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Logging con Cliente tsh<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tenemos que instalar la maquina cliente para poder interactuar con nuestro Jump Server. Para ello debemos seguir este <a href=\"https:\/\/goteleport.com\/docs\/installation\/\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial<\/a>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vamos a probar nuestro login a <strong>teleport<\/strong>. Luego agregaremos un nodo, en este caso el master de Kubernetes. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":730,\"width\":645,\"height\":226,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-18.29.11.png\" alt=\"\" class=\"wp-image-730\" width=\"645\" height=\"226\"\/><figcaption class=\"wp-element-caption\">Login<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Agregando un Nodo<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Nos autenticamos en nuestro master de Teleport para generar el token de Join. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>sudo tctl tokens add -type=node --ttl=1h <\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":731,\"width\":645,\"height\":226,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-18.44.46.png\" alt=\"\" class=\"wp-image-731\" width=\"645\" height=\"226\"\/><figcaption class=\"wp-element-caption\">tctl tokens<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora nuestro master node de Kubernetes es parte de la granja de teleport.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":732,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-18.50.41.png\" alt=\"\" class=\"wp-image-732\"\/><figcaption class=\"wp-element-caption\">Join Server<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Revisamos en la GUI<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":733,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-18.52.03.png\" alt=\"\" class=\"wp-image-733\"\/><figcaption class=\"wp-element-caption\">Nodos<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Hacemos el logging SSH via tsh.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":734,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-19.03.11.png\" alt=\"\" class=\"wp-image-734\"\/><figcaption class=\"wp-element-caption\">tsh login<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Revisamos la auditoria...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":735,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2021\/12\/Captura-de-Pantalla-2021-12-12-a-las-19.03.14.png\" alt=\"\" class=\"wp-image-735\"\/><figcaption class=\"wp-element-caption\">Auditoria<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Esto es todo por ahora. Es una herramienta interesante para auditar a terceros o los mismos administradores de nuestro entorno. Les recomiendo leer la documentaci\u00f3n para grabar sesiones y otras caracter\u00edsticas. En la proxima entrada agregaremos la API de Kubernetes. \u00a1Espero les sirva!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Teleport es un Gateway para asegurar acceso remotos a servidores Linux o la API de Kubernetes. Esta destinado a ser usado en lugar de OpenSSH para organizaciones que necesiten proteger su infraestructura, cumplir con las mejores practicas de seguridad y los requerimientos de compliance. Nos ayuda a tener visibilidad completa de la actividad que ocurre en la arquitectura, reduciendo el tiempo operativo de la administraci\u00f3n de acceso privilegiado sea en la nube o en On Premises. ","Date":"2021-12-12 22:10:44","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=721"},{"ID":"757","Title":"Utilizando Keycloak como CIAM","Content":"<!-- wp:paragraph -->\n<p><strong>Keycloak<\/strong> es un producto de c\u00f3digo abierto que permite inicio inicio de sesi\u00f3n con <strong>Identity Managment<\/strong> y <strong>Access Management<\/strong> para aplicaciones y servicios modernos. Escrito en Java es compatible con protocolos de federaci\u00f3n de identidad <strong>SAML v2<\/strong> y <strong>OpenID Connect<\/strong> \/ <strong>OAuth2<\/strong>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>La finalidad del mismo es facilitar la protecci\u00f3n de aplicaciones y servicios con muy poca, o ninguna, codificaci\u00f3n. Una buena manera de \"quitarnos de encima\" lo concerniente a autenticaci\u00f3n y autorizaci\u00f3n. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Dentro de sus principales caracter\u00edsticas:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>inicio de sesi\u00f3n \u00fanico<\/li><li>Soporte para protocolos est\u00e1ndar<\/li><li>Cuenta aplicaciones seguras y servicio simplificado<\/li><li>LDAP compatible como repositorio de usuarios externo<\/li><li>delegaci\u00f3n de autenticaci\u00f3n (inicio de sesi\u00f3n social)<\/li><li>alto rendimiento: cl\u00faster de servidores, escalable, alta disponibilidad<\/li><li>totalmente compatible con la contenerizacion.<\/li><li>temas simples para implementar<\/li><li>autenticaci\u00f3n fuerte por c\u00f3digo nativo de un solo uso (OTP) a trav\u00e9s de FreeOTP o Google Authenticator<\/li><li>auto-soluci\u00f3n de problemas si olvida su contrase\u00f1a<\/li><li>auto-creaci\u00f3n de cuentas (por forma o las llamadas autenticaciones sociales)<\/li><li>extensible: base de usuarios, m\u00e9todos de autenticaci\u00f3n, protocolos.<\/li><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Para esta PoC vamos a usar <strong>Keycloak<\/strong> con MySQL en un <em>docker-compose<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"dockerfile\",\"mime\":\"text\/x-dockerfile\",\"theme\":\"3024-night\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>version: '3'\n\nvolumes:\n  mysql_data:\n      driver: local\n\nservices:\n  mysql:\n      image: mysql:5.7\n      volumes:\n        - mysql_data:\/var\/lib\/mysql\n      environment:\n        MYSQL_ROOT_PASSWORD: root\n        MYSQL_DATABASE: keycloak\n        MYSQL_USER: keycloak\n        MYSQL_PASSWORD: password\n  keycloak:\n      image: quay.io\/keycloak\/keycloak:legacy\n      environment:\n        DB_VENDOR: MYSQL\n        DB_ADDR: mysql\n        DB_DATABASE: keycloak\n        DB_USER: keycloak\n        DB_PASSWORD: password\n        KEYCLOAK_USER: admin\n        KEYCLOAK_PASSWORD: admin\n        #Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.\n        #JDBC_PARAMS: &quot;connectTimeout=30000&quot;\n      ports:\n        - 8080:8080\n      depends_on:\n        - mysql<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Una vez que tenemos arriba los contenedores con <em>docker-compose up<\/em>, vamos ir a la <a href=\"http:\/\/127.0.0.1:8080\/\" target=\"_blank\" rel=\"noreferrer noopener\">web<\/a> e iniciamos sesi\u00f3n con user: admin &amp; pass: admin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=757"},{"ID":"760","Title":"Pipeline con Gitlab & ArgoCD","Content":"<!-- wp:paragraph -->\n<p>Hac\u00eda mucho que no escrib\u00eda alguna entrada. Les propongo generar u<a href=\"https:\/\/www.blaineharmont.com\/\"><strong>blaineharmont<\/strong><\/a> <a href=\"https:\/\/www.fracominaabiti.com\/\"><strong>fracominaabiti<\/strong><\/a> <a href=\"https:\/\/www.ovyescarpe.com\/\"><strong>ovyescarpe<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.andcamiciesaldi.com\/\"><strong>andcamiciesaldi<\/strong><\/a> <a href=\"https:\/\/www.negozitata.com\/\"><strong>negozitata<\/strong><\/a> <a href=\"https:\/\/www.benettonoutlet.com\/\"><strong>benettonoutlet<\/strong><\/a> <a href=\"https:\/\/www.kleankanteentrinkflasche.com\/\"><strong>kleankanteentrinkflasche<\/strong><\/a>  <a href=\"https:\/\/www.loevenichhut.com\/\"><strong>loevenichhut<\/strong><\/a> <a href=\"https:\/\/www.geoxoutlet.com\/\"><strong>geoxoutlet<\/strong><\/a> <a href=\"https:\/\/www.cainsmooredonna.com\/\"><strong>cainsmooredonna<\/strong><\/a> <a href=\"https:\/\/www.diegodellapalma.org\/\"><strong>diegodellapalma<\/strong><\/a> <a href=\"https:\/\/www.lecopavillon.com\/\"><strong>lecopavillon<\/strong><\/a> <a href=\"http:\/\/www.admeve-toys.com\/completini-intimi-molto-sexy\/\"><strong>completini  intimi molto sexy<\/strong><\/a> <a href=\"https:\/\/www.geoxoutlet.com\/\"><strong>geoxoutlet<\/strong><\/a> n pipeline, como dice el t\u00edtulo, con Gitlab como <strong>Continuous Integration<\/strong> y ArgoCD para el <strong>Continuous Deployment<\/strong> &amp; <strong>Continuous Delivery<\/strong>. La diferencia en CD es que podemos hacer los pasajes autom\u00e1ticamente y\/o manualmente. Como buena pr\u00e1ctica vamos a pasar al ambiente de <strong>Dev<\/strong>, como <strong>Deployment<\/strong> o <strong>Autom\u00e1tico<\/strong>, y luego e<a href=\"https:\/\/www.associazioneautaut.it\/biglie-con-ciclisti\"><strong>biglie  con ciclisti\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%90%D7%99%D7%A8%D7%95%D7%A7%D7%94-%D7%9E%D7%A9%D7%A7%D7%A4%D7%99%D7%99%D7%9D-%D7%97%D7%95%D7%9C%D7%95%D7%9F\"><strong>\u05d0\u05d9\u05e8\u05d5\u05e7\u05d4  \u05de\u05e9\u05e7\u05e4\u05d9\u05d9\u05dd \u05d7\u05d5\u05dc\u05d5\u05df\u00a0<\/strong><\/a> <a href=\"https:\/\/www.anthonyvoevodin.com\/tutto-echarpes-feulles-enfant\"><strong>tutto  echarpes feulles enfant\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/nike-%D7%A2%D7%95%D7%93%D7%A4%D7%99%D7%9D-%D7%96%D7%9B%D7%A8%D7%95%D7%9F-%D7%99%D7%A2%D7%A7%D7%91\"><strong>nike  \u05e2\u05d5\u05d3\u05e4\u05d9\u05dd \u05d6\u05db\u05e8\u05d5\u05df \u05d9\u05e2\u05e7\u05d1\u00a0<\/strong><\/a> <a href=\"https:\/\/www.healthcutlet.com\/vintage-ikea-mushroom-lamp\"><strong>vintage  ikea mushroom lamp\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/adidas-adizero-a170-6050-s\"><strong>adidas  adizero a170 6050 s\u00a0<\/strong><\/a> <a href=\"https:\/\/www.autocarescarcesa.net\/cizme-lungi-sclipici\"><strong>cizme lungi  sclipici\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%AA%D7%A0%D7%95%D7%A8-%D7%A7%D7%A8%D7%99%D7%A1%D7%98%D7%9C-90\"><strong>\u05ea\u05e0\u05d5\u05e8  \u05e7\u05e8\u05d9\u05e1\u05d8\u05dc 90\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/bershka-zenske-kozne-jakne-cijena\"><strong>bershka  zenske kozne jakne cijena\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/%D0%B1%D0%BE%D1%8F-%D1%87%D0%B5%D1%80%D0%B2%D0%B5%D0%BD%D0%B0\"><strong>\u0431\u043e\u044f  \u0447\u0435\u0440\u0432\u0435\u043d\u0430\u00a0<\/strong><\/a> <a href=\"https:\/\/www.morduslerkitapligi.com\/%CF%86%CE%BF%CF%81%CE%B5%CE%BC%CE%B1%CF%84%CE%B1-%CF%84%CE%BF%CE%BC%CE%BC%CF%85\"><strong>\u03c6\u03bf\u03c1\u03b5\u03bc\u03b1\u03c4\u03b1  \u03c4\u03bf\u03bc\u03bc\u03c5\u00a0<\/strong><\/a> <a href=\"https:\/\/www.idobusiness.net\/marilyn-monroe-wallet-phone-case\"><strong>marilyn  monroe wallet phone case\u00a0<\/strong><\/a> <a href=\"https:\/\/www.briskdays.com\/%D7%9E%D7%A9%D7%97%D7%A7%D7%99%D7%9D-%D7%9C%D7%A9%D7%A0%D7%99%D7%99%D7%9D-%D7%9B%D7%93%D7%95%D7%A8%D7%92%D7%9C-1-%D7%A2%D7%9C-1\"><strong>\u05de\u05e9\u05d7\u05e7\u05d9\u05dd  \u05dc\u05e9\u05e0\u05d9\u05d9\u05dd \u05db\u05d3\u05d5\u05e8\u05d2\u05dc 1 \u05e2\u05dc 1\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%94%D7%92%D7%94-%D7%92%D7%96-%D7%95%D7%91%D7%A8%D7%A7%D7%A1-%D7%9C%D7%9E%D7%97%D7%A9%D7%91\"><strong>\u05d4\u05d2\u05d4  \u05d2\u05d6 \u05d5\u05d1\u05e8\u05e7\u05e1 \u05dc\u05de\u05d7\u05e9\u05d1<\/strong><\/a> <a href=\"https:\/\/www.skateplaceinc.com\/dulap-exterior-dedeman\"><strong>dulap  exterior dedeman\u00a0<\/strong><\/a> l pasaje a <strong>Prod<\/strong>, como <strong>Delivery<\/strong> o <strong>Manual<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter is-style-default\"><img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-a82fe747cc53bd5dadb0ccee0f02af5c-pjlq\" alt=\"What is the difference between continuous delivery and continuous deployment?  - Quora\"\/><figcaption class=\"wp-element-caption\">CD Diferencias<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfQue vamos a necesitar?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a instalar <strong>minikube<\/strong> para tener nuestro cluster de Kubernetes, donde tendremos ArgoCD y los diferentes Namespaces, Dev &amp; Prod. Usaremos <a href=\"https:\/\/hub.docker.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Dockerhub<\/a>, como Registry, y <a href=\"https:\/\/kustomize.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Kustomize<\/a> para modificar los manifiestos. La estructura de archivos, que se encuentra en este <a href=\"https:\/\/gitlab.com\/santiagoagustinfernandez\/devops\" target=\"_blank\" rel=\"noreferrer noopener\">repositorio<\/a>, es la siguiente:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 argocd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 argocd.yaml\n\u251c\u2500\u2500 deployment\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 deployment.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ingress.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kustomization.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 service.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 prod\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 deployment.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 ingress.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 kustomization.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 namespace.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 service.yaml\n\u251c\u2500\u2500 hello.conf\n\u2514\u2500\u2500 index.html<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Instalaci\u00f3n de ArgoCD<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Una vez que tenemos instalado y funcionando <strong>minikube<\/strong>, ac\u00e1 les dejo <a href=\"https:\/\/minikube.sigs.k8s.io\/docs\/start\/\" target=\"_blank\" rel=\"noreferrer noopener\">Step by Step<\/a>, vamos a echar a correr ArgoCD.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Antes que nada vamos instalar <strong>ingress<\/strong> a nuestro cluster que nos servira para el acceso al mismo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>minikube addons enable ingress<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Generaremos las entradas FQDN de nuestros ambientes. En mi caso voy a generar dos entradas con la direcci\u00f3n del cluster. La direcci\u00f3n con el comando <em><strong>minikube ip<\/strong><\/em>, la obtenemos, para generar los registros. Aca encontraras un tutorial, para modificar en cada Sistema Operativo. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>192.168.205.129 dev-webpage-app.local prod-webpage-app.local<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p> Generamos el namespace para <strong>argocd<\/strong> y aplicamos los manifiestos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubectl create ns argocd\nkubectl apply -n argocd -f https:\/\/raw.githubusercontent.com\/argoproj\/argo-cd\/stable\/manifests\/install.yaml<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Para acceder a ArgoCD vamos cambiar el servicio de ClusterIP a NodePort.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubectl patch svc argocd-server -n argocd --type='json' -p '[{&quot;op&quot;:&quot;replace&quot;,&quot;path&quot;:&quot;\/spec\/type&quot;,&quot;value&quot;:&quot;NodePort&quot;}]'<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a revisar el puerto, para ingresar a la interfaz UI. En nuestro caso abriremos un navegador en http:\/\/192.168.205.129:30738<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:gallery {\"linkTo\":\"none\"} -->\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped\"><!-- wp:image {\"id\":761,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/1.png\" alt=\"\" class=\"wp-image-761\"\/><\/figure>\n<!-- \/wp:image --><\/figure>\n<!-- \/wp:gallery -->\n\n<!-- wp:paragraph -->\n<p>Obtenemos el password, con este comando, y estamos listos para utilizar ArgoCD. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":762,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/Captura-de-Pantalla-2022-04-11-a-las-07.50.51.png\" alt=\"\" class=\"wp-image-762\"\/><figcaption class=\"wp-element-caption\">ArgoCD<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Gitlab<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Una vez que generemos nuestro repositorio vamos a necesitar cargar variables. Para ello vamos a Proyecto &gt; Settings &gt; CI\/CD &gt; Variables. En mi caso sume estas:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":763,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image.png\" alt=\"\" class=\"wp-image-763\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Carge las necesarias para conectarme a DockerHub, como CI_REGISTRY, CI_REGISTRY_USER y CI_REGISTRY_PASSWORD &amp; las necesarias para poder \"<em>pushear<\/em>\" en el repositorio. Para ello es necesario sacar un Token o PAT, aqui dejo <a href=\"https:\/\/docs.gitlab.com\/ee\/user\/profile\/personal_access_tokens.html\" target=\"_blank\" rel=\"noreferrer noopener\">instructivo<\/a>. \u00bfPor que es necesario, este ultimo? Para modificar el <strong>kustomize.yaml<\/strong> y cargar el nombre de la imagen docker, con referencia al TAG del Build. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Es hora de configurar nuestras aplicaciones en Kubernetes usando <strong>GitOps<\/strong>. Como mencion\u00e9 antes, Argo CD viene con ArgoCLI y ArgoCD GUI. Estos son los manifiestos que configuran aplicaciones web para entornos de DEV y PROD.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>---\napiVersion: argoproj.io\/v1alpha1\nkind: Application\nmetadata:\n  name: webpage-app-dev\n  namespace: argocd\nspec:\n  project: default \n  destination:\n    server: https:\/\/kubernetes.default.svc\n    namespace: dev\n  source:\n    repoURL: https:\/\/gitlab.com\/santiagoagustinfernandez\/devops.git\n    targetRevision: HEAD\n    path: deployment\/dev\n\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n\n    automated:\n      selfHeal: true\n      prune: true\n\n---\napiVersion: argoproj.io\/v1alpha1\nkind: Application\nmetadata:\n  name: webpage-app-prod\n  namespace: argocd\nspec:\n  project: default \n  destination:\n    server: https:\/\/kubernetes.default.svc\n    namespace: prod\n  source:\n    repoURL: https:\/\/gitlab.com\/santiagoagustinfernandez\/devops.git\n    targetRevision: HEAD\n    path: deployment\/prod\n\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n\n    automated:\n      selfHeal: true\n      prune: true\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Lo mas importante del manifiesto, que comparti, es lo siguiente:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>name&nbsp;<\/strong>\u2014 El nombre de nuestra aplicaci\u00f3n en ArgoCD<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>namespace<\/strong>&nbsp;\u2014 Tiene que ser el mismo que nuestra instancia ArgoCD<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>project<\/strong>&nbsp;\u2014 Donde sera configurada la aplicaci\u00f3n.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>repo URL<\/strong>&nbsp;\u2014 URL del c\u00f3digo fuente.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>target revision<\/strong>&nbsp;\u2014 \u00bfQue rama vamos usar?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>path&nbsp;<\/strong>\u2014 En que path, del repositorio, estan nuestros manifiestos Kubernetes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>destination<\/strong>&nbsp;\u2014 La direcci\u00f3n del Cluster, donde vamos a deployar. <\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Aplicamos el manifiesto!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":764,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/Captura-de-Pantalla-2022-04-11-a-las-10.18.35.png\" alt=\"\" class=\"wp-image-764\"\/><figcaption class=\"wp-element-caption\">kubectl apply -f argocd.yaml<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":765,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-1.png\" alt=\"\" class=\"wp-image-765\"\/><figcaption class=\"wp-element-caption\">Dev &amp; Prod<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":766,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-2.png\" alt=\"\" class=\"wp-image-766\"\/><figcaption class=\"wp-element-caption\">Ambiente Dev, Pods, Ingress, Service.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora manos a la obra, agregamos nuestro pipeline en <strong>gitlab-ci.yaml<\/strong>, que genera nuestro pipeline. Vamos a tener 3 stages, donde hacemos el build de la imagen docker y los de deploy en Dev &amp; Prod. Es importante diferenciar que el deploy en Prod necesita una aprobaci\u00f3n manual, primero debemos saber que en Dev no hay problemas. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>stages:\n  - build\n  - deploy-dev\n  - deploy-prod\n\nvariables:\n  IMAGE_NAME: &quot;webpage-app&quot;\n  CI_DOCKERHUB_USER: &quot;safernandez666&quot;\n\nbuild:\n  image: docker:19.03.12\n  stage: build\n  services:\n    - docker:19.03.12-dind\n  rules:\n    - if: $CI_PIPELINE_SOURCE == &quot;push&quot;\n  script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n\n    - docker build . -t $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\n\n    - docker tag $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:latest\n\n    # PUSH IMAGE COMMIT SHA and LATEST\n\n    - docker push $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\n    - docker push $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:latest\n\ndeploy-dev:\n  stage: deploy-dev\n  image: alpine:3.11\n  before_script:\n    - apk add --no-cache git curl bash\n    - curl -s &quot;https:\/\/raw.githubusercontent.com\/kubernetes-sigs\/kustomize\/master\/hack\/install_kustomize.sh&quot;  | bash\n    - mv kustomize \/usr\/local\/bin\/\n    - git remote set-url origin https:\/\/${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com\/santiagoagustinfernandez\/devops.git\n    - git config --global user.email &quot;santiagoagustinfernandez@gmail.com&quot;\n    - git config --global user.name &quot;santiagoagustinfernandez&quot;\n  script:\n    - git checkout -B main\n    - cd deployment\/dev\n    - kustomize edit set image $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\n    - cat kustomization.yaml\n    - git commit -am 'DEV image update'\n    - git push -f origin main\n  only:\n    - main\n\ndeploy-prod:\n  stage: deploy-prod\n  image: alpine:3.11\n  before_script:\n    - apk add --no-cache git curl bash\n    - curl -s &quot;https:\/\/raw.githubusercontent.com\/kubernetes-sigs\/kustomize\/master\/hack\/install_kustomize.sh&quot;  | bash\n    - mv kustomize \/usr\/local\/bin\/\n    - git remote set-url origin https:\/\/${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com\/santiagoagustinfernandez\/devops.git\n    - git config --global user.email &quot;santiagoagustinfernandez@gmail.com&quot;\n    - git config --global user.name &quot;santiagoagustinfernandez&quot;\n  script:\n    - git checkout -B main\n    - git pull origin main\n    - cd deployment\/prod\n    - kustomize edit set image $CI_REGISTRY\/$CI_DOCKERHUB_USER\/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\n    - cat kustomization.yaml\n    - git commit -am 'PROD image update'\n    - git push -f origin main\n  only:\n    - main\n  when: manual\n\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Un resumen de lo que estamos haciendo, es el siguiente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":767,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-3.png\" alt=\"\" class=\"wp-image-767\"\/><figcaption class=\"wp-element-caption\">Arquitectura<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos hacer una modificaci\u00f3n en el index.html y hacer el push.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":768,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-4.png\" alt=\"\" class=\"wp-image-768\"\/><figcaption class=\"wp-element-caption\">git push<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Empieza a correr nuestro pipeline, revisen que solo vamos a deployar sobre Dev. Para hacerlo en Prod sera necesario correrlo manualmente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":769,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-5.png\" alt=\"\" class=\"wp-image-769\"\/><figcaption class=\"wp-element-caption\">Pipeline<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Revisamos el Sync de ArgoCD y ya contamos con la nueva imagen en Dev.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":770,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-6.png\" alt=\"\" class=\"wp-image-770\"\/><figcaption class=\"wp-element-caption\">ArgoCD Tag de imagen 8873af5<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Si revisamos el tag de la imagen, que deployamos, tiene el tag: 8873af5. Revisamos en DockerHub y es el ultimo build. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":771,\"sizeSlug\":\"full\",\"linkDestination\":\"none\",\"className\":\"is-style-default\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-style-default\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-7.png\" alt=\"\" class=\"wp-image-771\"\/><figcaption class=\"wp-element-caption\">Dockerhub<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Si esta todo ok, podemos darle run al build en el ambiente Prod. En este estadio tenemos la version vieja y nueva corriendo, una en cada ambiente. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":774,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-9.png\" alt=\"\" class=\"wp-image-774\"\/><figcaption class=\"wp-element-caption\">Ambiente Dev<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":773,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-8.png\" alt=\"\" class=\"wp-image-773\"\/><figcaption class=\"wp-element-caption\">Webpage Dev<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Mientras que en Prod tenemos la web, en una version anterior.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":775,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-10.png\" alt=\"\" class=\"wp-image-775\"\/><figcaption class=\"wp-element-caption\">Webpage Prod<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Espero que les haya servidor, este es un escenario 100% GitOps con un Pipeline DevOps. \u00a1Espero que les sume!<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Les propongo generar un pipeline, como dice el t\u00edtulo, con Gitlab como Continuous Integration y ArgoCD para el Continuous Deployment & Continuous Delivery. La diferencia en CD es que podemos hacer los pasajes autom\u00e1ticamente y\/o manualmente. Como buena pr\u00e1ctica vamos a pasar al ambiente de Dev, como Deployment o Autom\u00e1tico, y luego el pasaje a Prod, como Delivery o Manual.","Date":"2022-04-11 15:21:16","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=760"},{"ID":"779","Title":"Secretos de Kubernetes con Hashicorp Vault & External Secrets Operator.","Content":"<!-- wp:paragraph -->\n<p>En entradas anteriores vimos como manejar secretos de manera <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/centralizando-secretos-dinamicos-con-hashicorp-vault\/\" target=\"_blank\" rel=\"noreferrer noopener\">dinamica<\/a> y <a href=\"https:\/\/blog.santiagoagustinfernandez.com\/centralizando-secretos-con-hashicorp-vault\/\" target=\"_blank\" rel=\"noreferrer noopener\">estatica<\/a>. En esta nueva entrada vamos a jugar con <a href=\"https:\/\/external-secrets.io\/v0.5.1\/\" target=\"_blank\" rel=\"noreferrer noopener\">External Secrets Operator<\/a> o ESO, para manejar secretos contra <a href=\"https:\/\/www.vaultproject.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Hashicorp Vault<\/a>. Una bue<a href=\"https:\/\/www.saldibenetton.com\/\"><strong>saldibenetton<\/strong><\/a> <a href=\"https:\/\/www.ynotsaldi.com\/\"><strong>ynotsaldi<\/strong><\/a> <a href=\"https:\/\/www.coralblueoutlet.com\/\"><strong>coralblueoutlet<\/strong><\/a> <a href=\"https:\/\/www.moorecains.com\/\"><strong>moorecains<\/strong><\/a> <a href=\"https:\/\/www.chilloutsmutze.com\/\"><strong>chilloutsmutze<\/strong><\/a> <a href=\"https:\/\/www.andcamiciesaldi.com\/\"><strong>andcamiciesaldi<\/strong><\/a> <a href=\"https:\/\/www.lesbiantoysstore.com\/corinne-abbigliamento-sexy\/\"><strong>corinne  abbigliamento sexy<\/strong><\/a> <a href=\"https:\/\/www.lecopavillon.com\/\"><strong>lecopavillon<\/strong><\/a> <a href=\"https:\/\/www.saldibenetton.com\/\"><strong>saldibenetton<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.vondutchmutzen.com\/\"><strong>vondutchmutzen<\/strong><\/a> <a href=\"https:\/\/www.blundstoneprezzi.com\/\"><strong>blundstoneprezzi<\/strong><\/a>  <a href=\"https:\/\/www.fracominaabiti.com\/\"><strong>fracominaabiti<\/strong><\/a> <a href=\"https:\/\/www.loevenichhut.com\/\"><strong>loevenichhut<\/strong><\/a> <a href=\"https:\/\/www.diegodallapalmaoutlet.com\/\"><strong>diegodallapalmaoutlet<\/strong><\/a>  na practica para que los desarrolladores no dejen los secretos en texto claro. <a href=\"https:\/\/www.anda-luzia-reisen.de\/gopro-app-windows-xp\"><strong>gopro app windows xp\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%90%D7%93%D7%99%D7%93%D7%A1-%D7%9E%D7%A2%D7%A6%D7%91%D7%99%D7%9D-%D7%A7%D7%98%D7%9C%D7%95%D7%92\"><strong>\u05d0\u05d3\u05d9\u05d3\u05e1 \u05de\u05e2\u05e6\u05d1\u05d9\u05dd \u05e7\u05d8\u05dc\u05d5\u05d2\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%A8%D7%A6%D7%95%D7%A2%D7%94-suunto\"><strong>\u05e8\u05e6\u05d5\u05e2\u05d4 suunto\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%AA%D7%A0%D7%94-%D7%9C%D7%97%D7%91%D7%A8%D7%94-%D7%94%D7%9B%D7%99-%D7%98%D7%95%D7%91%D7%94-%D7%92%D7%99%D7%9C-20\"><strong>\u05de\u05ea\u05e0\u05d4 \u05dc\u05d7\u05d1\u05e8\u05d4 \u05d4\u05db\u05d9 \u05d8\u05d5\u05d1\u05d4 \u05d2\u05d9\u05dc 20\u00a0<\/strong><\/a> <a href=\"https:\/\/www.ardecheimmobilier.net\/%D1%81%D0%BF%D0%B0%D0%BB%D0%BD%D0%B8_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%82%D0%B8_%D1%81_%D0%BD%D0%B0%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0\/liu-jo-muske-majice\"><strong>liu jo muske majice\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%A8%D7%A6%D7%95%D7%A2%D7%94-suunto\"><strong>\u05e8\u05e6\u05d5\u05e2\u05d4 suunto\u00a0<\/strong><\/a> <a href=\"https:\/\/www.kg-badenia.net\/%D7%94%D7%97%D7%9C%D7%99%D7%A4%D7%94-%D7%A9%D7%9C-%D7%9B%D7%93%D7%95%D7%A8%D7%92%D7%9C-%D7%A6%D7%A8%D7%A4%D7%AA\"><strong>\u05d4\u05d7\u05dc\u05d9\u05e4\u05d4 \u05e9\u05dc \u05db\u05d3\u05d5\u05e8\u05d2\u05dc \u05e6\u05e8\u05e4\u05ea\u00a0<\/strong><\/a> <a href=\"https:\/\/www.colegioconstitucion1978.com\/%D7%9E%D7%97%D7%A1%D7%A0%D7%99-%D7%97%D7%A9%D7%9E%D7%9C-%D7%9E%D7%91%D7%A6%D7%A2%D7%99%D7%9D-%D7%91%D7%90%D7%A8-%D7%A9%D7%91%D7%A2-%D7%9E%D7%9B%D7%95%D7%A0%D7%AA-%D7%9B%D7%91%D7%99%D7%A1%D7%94\"><strong>\u05de\u05d7\u05e1\u05e0\u05d9 \u05d7\u05e9\u05de\u05dc \u05de\u05d1\u05e6\u05e2\u05d9\u05dd \u05d1\u05d0\u05e8 \u05e9\u05d1\u05e2 \u05de\u05db\u05d5\u05e0\u05ea \u05db\u05d1\u05d9\u05e1\u05d4\u00a0<\/strong><\/a> <a href=\"https:\/\/www.dovafrica.com\/%D8%B1%D8%B3%D9%85-%D9%81%D9%86%D8%AC%D8%A7%D9%86-%D9%82%D9%87%D9%88%D8%A9-%D8%B3%D9%87%D9%84\"><strong>\u0631\u0633\u0645 \u0641\u0646\u062c\u0627\u0646 \u0642\u0647\u0648\u0629 \u0633\u0647\u0644\u00a0<\/strong><\/a> <a href=\"https:\/\/www.odishatourismguide.com\/adidas-logo-szines-%C3%A1r\"><strong>adidas logo szines \u00e1r\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/nine-west-black-flats-ebay\"><strong>nine west black flats ebay\u00a0<\/strong><\/a> <a href=\"https:\/\/www.idobusiness.net\/gfuel-shirt\"><strong>gfuel shirt\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%97%D7%96%D7%9F-%D7%A6%D7%95%D7%A7%D7%A8%D7%9E%D7%9F-%D7%A9%D7%9E%D7%9C%D7%95%D7%AA-%D7%9B%D7%9C%D7%94-%D7%9E%D7%97%D7%99%D7%A8%D7%99%D7%9D\"><strong>\u05d7\u05d6\u05df \u05e6\u05d5\u05e7\u05e8\u05de\u05df \u05e9\u05de\u05dc\u05d5\u05ea \u05db\u05dc\u05d4 \u05de\u05d7\u05d9\u05e8\u05d9\u05dd\u00a0<\/strong><\/a> <a href=\"https:\/\/www.3dprintkala.com\/%D7%98%D7%95%D7%99%D7%A1-%D7%90%D7%A8-%D7%90%D7%A1-%D7%90%D7%95%D7%A4%D7%A0%D7%99%D7%99%D7%9D-%D7%A4%D7%A8%D7%95%D7%96%D7%9F\"><strong>\u05d8\u05d5\u05d9\u05e1 \u05d0\u05e8 \u05d0\u05e1 \u05d0\u05d5\u05e4\u05e0\u05d9\u05d9\u05dd \u05e4\u05e8\u05d5\u05d6\u05df\u00a0<\/strong><\/a> <a href=\"https:\/\/www.orhanogluyapi.com\/%D7%A4%D7%90%D7%95%D7%9C%D7%99%D7%9F-%D7%A9%D7%9E%D7%9C%D7%95%D7%AA-%D7%9B%D7%9C%D7%94\"><strong>\u05e4\u05d0\u05d5\u05dc\u05d9\u05df \u05e9\u05de\u05dc\u05d5\u05ea \u05db\u05dc\u05d4\u00a0<\/strong><\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Este operador es capaz de conectarse a varias b\u00f3vedas de contrase\u00f1as, solo resta leer la documentaci\u00f3n.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Este es un esquema que resumen lo que vamos a realizar. Para ello vamos a usar un cluster en <strong>minikube<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"width\":564,\"height\":485} -->\n<figure class=\"wp-block-image aligncenter is-resized\"><img src=\"https:\/\/external-secrets.io\/pictures\/diagrams-provider-vault.png\" alt=\"HashiCorp Vault - External Secrets Operator\" width=\"564\" height=\"485\"\/><figcaption class=\"wp-element-caption\">Hashicorp &amp; ESO<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Instalaci\u00f3n de Hashicorp Vault<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a usar Helm Charts para la instalaci\u00f3n y luego configuramos el cliente para agregar una <em>key value<\/em>. <a href=\"https:\/\/github.com\/safernandez666\/ExternalSecretsOperator.git\" target=\"_blank\" rel=\"noreferrer noopener\">Aca<\/a> les dejo el repositorio con los archivos de configuraci\u00f3n necesarios. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>helm repo add hashicorp https:\/\/helm.releases.hashicorp.com\nhelm install vault hashicorp\/vault --namespace vault --create-namespace -f hashicorp-vault\/values.yaml<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Si revisamos <strong>values.yaml<\/strong> vamos a ver que el entorno es Dev con un <em>Token<\/em> para la conexi\u00f3n. Lo ideal es que este token sea desplegado por nuestro pipeline, esto es meramente para el PoC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hacemos el port forwarding, para conectarnos al ClusterIP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubectl port-forward vault-0 8200:8200 -n vault<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Una vez realizado el comando hacemos el login y agregamos la entrada.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>export VAULT_TOKEN=&quot;root&quot;\nexport VAULT_ADDR='http:\/\/127.0.0.1:8200'\n\nvault login -address=http:\/\/127.0.0.1:8200 -tls-skip-verify\n\nvault kv put secret\/dev\/app username=&quot;admin&quot; password=&quot;p4ssw0d&quot;<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Aca la entrada en UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":788,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/Captura-de-Pantalla-2022-04-18-a-las-17.23.36.png\" alt=\"\" class=\"wp-image-788\"\/><figcaption class=\"wp-element-caption\">UI secret\/dev\/app <\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora instalamos <strong>External Secrets Operator<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>helm repo add external-secrets https:\/\/charts.external-secrets.io\n\nhelm install external-secrets \\\n   external-secrets\/external-secrets \\\n    --namespace external-secrets \\\n    --create-namespace \\\n    --set installCRDs=true\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ya una vez desplegado <em>Vault<\/em> y <em>ESO<\/em>, desplegamos el <strong>Secret<\/strong> para autenticar contra Vault y sumamos la direcci\u00f3n del pod, de Vault, en <strong>ClusterSecretStore<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: vault-token-global\n  namespace: external-secrets\nstringData:\n  # Solo para prueba, no usar en ambientes productivos.\n  token: root\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Actualizamos la direcci\u00f3n ip del ClusterIP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":782,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-12.png\" alt=\"\" class=\"wp-image-782\"\/><figcaption class=\"wp-element-caption\">kubectl get all -n vault<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Cambiamos el server a la direcci\u00f3n del pod vualt-0.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apiVersion: external-secrets.io\/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: vault-backend-global\nspec:\n  provider:\n    vault:\n      server: &quot;http:\/\/172.17.0.3:8200&quot;\n      path: secret\n      version: v2\n      auth:\n        # Puntero al Secreto Token para accesar a Vault\n        # https:\/\/www.vaultproject.io\/docs\/auth\/token\n        tokenSecretRef:\n          name: &quot;vault-token-global&quot;\n          key: &quot;token&quot;\n          namespace: external-secrets\n<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ahora creamos un namespace app para desplegar el External Secret.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>kubectl create ns app\nnamespace\/app created\n\nkubectl apply -f basic-secret.yaml -n app\nexternalsecret.external-secrets.io\/basic-credentials created<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>El basic-secret.yaml contiene los siguientes campos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\",\"theme\":\"blackboard\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apiVersion: external-secrets.io\/v1alpha1\nkind: ExternalSecret\nmetadata:\n  name: basic-credentials\nspec:\n  refreshInterval: &quot;15s&quot; # Intervalo de Refresco\n  secretStoreRef: # Accesso a la Boveda\n    name: vault-backend-global\n    kind: ClusterSecretStore\n  target:\n    name: basic-credentials\n  data:\n  - secretKey: password\n    remoteRef:\n      key: dev\/app\n      property: password\n\n  - secretKey: username\n    remoteRef:\n      key: dev\/app\n      property: username<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Revisamos...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":784,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-13.png\" alt=\"\" class=\"wp-image-784\"\/><figcaption class=\"wp-element-caption\">kubectl get secret -n app<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora podemos revisar como se genero el <strong>Secret<\/strong> para ser usado.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":785,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2022\/04\/image-14.png\" alt=\"\" class=\"wp-image-785\"\/><figcaption class=\"wp-element-caption\">kubectl get secret basic-credentials -n app -o yaml<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>\u00a1Ya tenemos ESO trabajando con Vault, para tener nuestros secretos de Kubernetes protegidos! Ahora a probarlo.<\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2022-04-18 22:19:30","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=779"},{"ID":"799","Title":"\u00bfQue es CrowdSec? Federaci\u00f3n de Blue Teams","Content":"<!-- wp:paragraph -->\n<p>Los que estamos en esto hace tiempo, siempre escuchamos que la Seguridad es una cebolla y la suma de las capas nos otorgar\u00e1 una mejor <strong>defensa en profundidad<\/strong>. <a href=\"https:\/\/www.crowdsec.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">CrowdSec<\/a> llega para agregar una nueva capa de Seguridad, a nuestro servicios, con est\u00e9 nuevo concepto de \u201c<em>Federating Blue Teams<\/em>\u201d. Lo que plantea est\u00e1 herramientas de c\u00f3digo abierto es contribuir a elaborar una lista de bloqueo en tiempo real, a\u00f1adiendo y eliminado direcciones IP que los delincuentes utilizan y abandonan. Nutrirse de esas listas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para los vieja escuela deber\u00edan de verlo con un fail2ban, colaborativo y mejorado. Consume muy pocos recursos, es multi plataforma, mutualizaci\u00f3n de direcciones IP con una base de datos compartida entre todos los usuarios de <strong>Crowndsec<\/strong> pero sobre todo es f\u00e1cil de usar.&nbsp;<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>El proyecto posee un Marketplace donde se pueden descargar reglas para asegurar sus servidores, Nginx, Apache, Docker, Traefik, etc.!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Les paso a mostrar, antes de ir la prueba, la arquitectura. Es muy sencillo el concepto donde a trav\u00e9s de nuestras experiencias generamos evidencias de los ataques recibidos y enviamos los reportes a la comunidad, la misma que nos nutre para tomar nuestras decisiones.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":800,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image.png\" alt=\"\" class=\"wp-image-800\"\/><figcaption class=\"wp-element-caption\">CrowdSec<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Instalaci\u00f3n de CrowdSec<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Este paso es tan sencillo como cualquier otra instalaci\u00f3n, primero los repositorios.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>curl -s https:\/\/packagecloud.io\/install\/repositories\/crowdsec\/crowdsec\/script.deb.sh | sudo bash<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Hacemos el update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo apt-get update<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Instalamos CrowdSec.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo apt-get install crowdsec<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>El proceso de instalaci\u00f3n donde podemos ver el descubrimiento y la instalaci\u00f3n y configuraci\u00f3n autom\u00e1tica para sshd y linux. Ya tenemos CrowdSec listo para usar, en instalaci\u00f3n local. Si ya hubi\u00e9semos tenido Apache2 instalado, hubiese bajado la colecci\u00f3n correspondiente. Como no estaba, lo instalaremos posteriormente, mas adelante les muestro como hacerlo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":801,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/Captura-de-Pantalla-2023-01-15-a-las-11.03.54.png\" alt=\"\" class=\"wp-image-801\"\/><figcaption class=\"wp-element-caption\">Instalaci\u00f3n<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Antes de comenzar a configurar e instalar un bouncer, podemos jugar con el <strong>cscli client<\/strong> que sera de ayuda para reglas, m\u00e9tricas, listas y todo lo necesario.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":802,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/Captura-de-Pantalla-2023-01-15-a-las-11.14.02.png\" alt=\"\" class=\"wp-image-802\"\/><figcaption class=\"wp-element-caption\">cscli<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Voy agregar la coleccion para Apache2, en nuestro Web Server. Vamos a ver la consola de m\u00e9tricas. Como podemos ver en la captura, podemos ver los ficheros fuente utilizados y sus estad\u00edsticas y tambi\u00e9n los diferentes parsers utilizados que permiten detectar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":803,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/Captura-de-Pantalla-2023-01-15-a-las-11.17.31.png\" alt=\"\" class=\"wp-image-803\"\/><figcaption class=\"wp-element-caption\">Metrics<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Les dejo una lista de comandos, que les serviran para la PoC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>cscli alerts list<\/strong> | Listado de Alertas.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>cscli alerts inspect ID <\/strong>| Detalle de la Alerta, que deseamos investigar.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>cscli decisions list<\/strong> | Lista de los \"bans\" o bloqueados.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>cscli parsers list<\/strong> | Listado de parseadores, que no es ni mas ni menos lo que nos habilita a leer e interpretar logs.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>cscli scenarios list<\/strong> | Los escenarios son las configuraciones que detectar\u00e1n los comportamientos y las acciones a realizar.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>cscli postoverflows list <\/strong>| Lista de los servicios en \"Whitelist\" que except\u00faan el bloqueo. <\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Instalaci\u00f3n de Bouncer<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Los bouncers son quienes nos habilitaran a bloquear ataques. Les dejo el <a href=\"https:\/\/hub.crowdsec.net\/browse\/#collections\" target=\"_blank\" rel=\"noreferrer noopener\">enlace<\/a> para que revisen colecciones, configuraciones y bouncers. En esta PoC vamos a instalar <a href=\"https:\/\/hub.crowdsec.net\/author\/crowdsecurity\/bouncers\/cs-firewall-bouncer\" target=\"_blank\" rel=\"noreferrer noopener\">cs-firewall-bouncer<\/a> y ya que estamos la colecci\u00f3n de Apache2 con cscli, asi tiene algunas opciones.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo apt install crowdsec-firewall-bouncer-iptables<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Podemos ver la configuraci\u00f3n en la siguiente ruta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cat \/etc\/crowdsec\/bouncers\/crowdsec-firewall-bouncer.yaml<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Instalamos la colecci\u00f3n de Apache2 y le decimos donde deber\u00eda levantar los logs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli collections install crowdsecurity\/apache2\n\ncat &lt;&lt; EOF | sudo tee -a \/etc\/crowdsec\/acquis.yaml\nfilenames:\n  - \/var\/log\/apache2\/*.log\nlabels:\n  type: apache2\n---\nEOF<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Vamos a ver las m\u00e9tricas para confirmar que hemos agregado la fuente de logs de apache2, algo que antes no estaba sumado. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":814,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image-6.png\" alt=\"\" class=\"wp-image-814\"\/><figcaption class=\"wp-element-caption\">cscli metrics<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como he instalado <strong>Crowdsec<\/strong> en un servidor Web, vamos a instalar la lista blanca para los \"crawlers\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>En la p\u00e1gina de configuraci\u00f3n CrowdSec Hub encontramos la l\u00ednea a ejecutar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli postoverflows install crowdsecurity\/seo-bots-whitelist<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Ahora restart!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo systemctl reload crowdsec<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Antes de dejar esta secci\u00f3n voy a revisar que tenemos colecciones tenemos habilitadas con <strong>cscli hub list<\/strong>, ya estamos listos para estos diferentes ataques. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":806,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image-1.png\" alt=\"\" class=\"wp-image-806\"\/><figcaption class=\"wp-element-caption\">cscli hub list<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a parar la pelota, hasta ahora tenemos CrowdSec sobre un Web Server, que tenia Apache2, y estamos protegidos de ataques de Fuerza Bruta sobre SSH y Web. En los pr\u00f3ximos pasos emulamos un ataque, para ver como se comporta CrowdSec, en su hardening, y enviaremos los logs a unos tableros para tener visibilidad.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Ataque de Fuerza Bruta<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Para esta parte voy a utilizar un Ubuntu, como atacante, y vamos a hacernos de un <a href=\"https:\/\/github.com\/r4stl1n\/SSH-Brute-Forcer\" target=\"_blank\" rel=\"noreferrer noopener\">repositorio<\/a> de GitHub que tiene una herramienta para este menester. Si estas leyendo esto seguramente sabes clonar un repositorio, si no Google It! \ud83d\ude0e<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Primero revisamos nuestro lista de alarmas o decisiones, como ver\u00e1n esta vac\u00eda.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":807,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image-2.png\" alt=\"\" class=\"wp-image-807\"\/><figcaption class=\"wp-element-caption\">cscli decision list<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora desde la consola del atacante, vamos a lanzar SSHBrute.py con el comando:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>python3 ssh-brute.py -ip 192.168.1.12 -p 22<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":808,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/ataante.png\" alt=\"\" class=\"wp-image-808\"\/><figcaption class=\"wp-element-caption\">Ataque<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Van a notar que automaticamente nuestro servidor deja de responder, por que <strong>CrowdSec<\/strong> hizo su magia. Revisamos la lista de decisiones.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":809,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/Captura-de-Pantalla-2023-01-15-a-las-18.15.34.png\" alt=\"\" class=\"wp-image-809\"\/><figcaption class=\"wp-element-caption\">Lista de decisiones<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a probar, como trabaja con el Bouncer de Apache2. Primero tengo que eliminar ese banneo, para darle la chance al atacante \ud83d\ude04. Vamos a probar lo aprendido e intentar activar el escenario <em>crowdsecurity\/http-sensitive-files<\/em> accediendo a ficheros sensibles. Este escenario se activa tras 4 intentos de acceder a ficheros sensibles en menos de 5 segundos. Vamos a instalarlo y luego configurar el ataque.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli scenarios install crowdsecurity\/http-sensitive-files<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Del lado de atacante hacemos algunas b\u00fasquedas, con curl.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>URL=\"http:\/\/DIRECCIONDEWEBSERVER\"\n\ncurl \"$URL\"\/.git\ncurl \"$URL\"\/.htaccess\ncurl \"$URL\"\/.bashrc\ncurl \"$URL\"\/.bash_history\ncurl \"$URL\"\/.ssh<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Uala! Ahora vemos que se banneo la ip del atacante, nuevamente, pero por otro escenario.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":811,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image-4.png\" alt=\"\" class=\"wp-image-811\"\/><figcaption class=\"wp-element-caption\">Decision list, por directorios sencibles<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Esto es todo por ahora. Esto se puede visualizar, de una mejor manera en <a href=\"https:\/\/app.crowdsec.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">crowdsec.net<\/a>, solo debemos enrolar nuestros servidores. Ahi veremos el banneo por el ataque SSH y el scanneo de directorios sensibles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":812,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/01\/image-5.png\" alt=\"\" class=\"wp-image-812\"\/><figcaption class=\"wp-element-caption\">Dashboard app.crowdsec.net<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Creo que para cerrar seria interesante realizar una conexi\u00f3n a un canal de Telegram o Slack, esa parte la pueden ver <a href=\"https:\/\/docs.crowdsec.net\/docs\/notification_plugins\/slack\/\" target=\"_blank\" rel=\"noreferrer noopener\">aqui<\/a>.  Espero que les haya gustado. Creo que este IPs, tiene mucho potencial a la hora de hardenizar nuestros servicios.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Bonus Track<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Desiciones Manuales<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>L\u00f3gicamente tenemos la posibilidad de hacer elecciones, manuales, de cada regla. Les voy a dejar algunas que pueden hacerle la vida m\u00e1s sencilla.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Banneo de IP por 4 horas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli decisions add --ip XXX.XXX.XXX.XXX<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Banneo de IP por 24 horas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli decisions add --ip XXX.XXX.XXX.XXX --duration 24h<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Banneo de rango.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli decesions add --range XXX.XXX.XXX.XXX\/16<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Eliminar banneos de IP o rango.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"backgroundColor\":\"black\",\"textColor\":\"vivid-green-cyan\",\"fontSize\":\"small\"} -->\n<pre class=\"wp-block-code has-vivid-green-cyan-color has-black-background-color has-text-color has-background has-small-font-size\"><code>sudo cscli decisions delete --ip XXX.XXX.XXX.XXX\nsudo cscli decesions delete --range XXX.XXX.XXX.XXX\/16<\/code><\/pre>\n<!-- \/wp:code -->","Excerpt":"CrowdSec es un Open Source comunitario, para nutrir y nutrirse de listas de Blacklist. \n","Date":"2023-01-15 22:06:44","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=799"},{"ID":"842","Title":"Cloud Custodian el CSPM Open Source","Content":"<!-- wp:paragraph -->\n<p>Muchas veces me consultan sobre el Cloud, como asegurarlo. Siempre aconsejo herramientas como <a href=\"https:\/\/www.paloaltonetworks.com\/prisma\/cloud\" target=\"_blank\" rel=\"noreferrer noopener\">Prisma Cloud<\/a> o <a href=\"https:\/\/www.aquasec.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">AquaSec<\/a>, dependiendo la inversion que se quiera o pueda erogar. Ahora: \u00bfExisten alternativas?, la respuesta es Si! Para eso existe <a href=\"https:\/\/cloudcustodian.io\/\" target=\"_blank\" rel=\"noreferrer noopener\">Cloud Custodian<\/a>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Primero, \u00bfQue es un CSPM o Cloud Security Posture Managment? Es un conjunto de herramientas, practicas que nos dan una mano para evaluar, identificar y resolver errores de configuraci\u00f3n, alg\u00fan desvio en el cumplimiento o riesgos de seguridad. Hoy, por hoy, una herramienta fundamental en todo ambiente Cloud. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">\u00bfQue beneficios acarrea implementar un CSPM?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tareas:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Realizaci\u00f3n de escaneo continuo y determinaci\u00f3n de la postura de seguridad en tiempo real.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Permite a una organizaci\u00f3n obtener una visibilidad continua en todo el&nbsp;<a href=\"https:\/\/geekflare.com\/es\/cloud-infra-app-monitoring\/\" target=\"_blank\" rel=\"noreferrer noopener\">infraestructura de nube<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Detecci\u00f3n autom\u00e1tica y correcci\u00f3n de configuraciones incorrectas y problemas de cumplimiento<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Realizar evaluaciones comparativas y auditor\u00edas de cumplimiento para garantizar que la organizaci\u00f3n siga las mejores pr\u00e1cticas.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Tipicamente actua de la siguiente manera:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Supervise continuamente el entorno y los servicios de la nube y proporcione una visibilidad completa de los componentes y las configuraciones.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Compare las configuraciones y pol\u00edticas de la nube con un conjunto de pautas aceptables.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Detecte errores de configuraci\u00f3n y cambios de pol\u00edtica.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Identificar amenazas existentes, nuevas y potenciales.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Corrija las configuraciones incorrectas en funci\u00f3n de las reglas preconstruidas y los est\u00e1ndares de la industria. Esto ayuda a reducir los riesgos debido a errores humanos que podr\u00edan resultar en configuraciones incorrectas.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">\u00bfQue es Cloud Custodian?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lanzado en 2016, <a href=\"https:\/\/www.cncf.io\/projects\/cloud-custodian\/\" target=\"_blank\" rel=\"noreferrer noopener\">soportado por CNCF<\/a>, esta herramienta escrita en Python fue desarrollada por la gente de <a href=\"https:\/\/www.capitalone.com\/tech\/cloud\/cloud-custodian-cncf-donation\/\" target=\"_blank\" rel=\"noreferrer noopener\">Capital One<\/a>. Basicamente es un motor de reglas para el manejo de cuentas de Cloud o el gobierno de recursos. Utiliza manifiestos en YAML que componen la politica a aplicar. Vamos a realizar algunos ejemplos, pero tienen que tener en mente que consta de <strong>Recursos<\/strong> O <strong>Servicios<\/strong>, donde vamos a realizar la magia, <strong>Filtros<\/strong> &amp; <strong>Acciones<\/strong>. Puede sacarnos dolores de cabeza en varios dominios. Entre las caracter\u00edsticas mas interesantes nos encontramos que es Agentless &amp; multicloud.  <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":852,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/CC.webp\" alt=\"\" class=\"wp-image-852\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prueba de Concepto<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a poner manos a las obra. El primero caso de uso, que quiero hacer con uds. es el siguiente. Vamos a trabajar sobre AWS, apagando los ambientes de testing. Algo que la gente de FinOps, nos agradecera a la hora del billing. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Instalar Cloud Custodian<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yo uso Mac, en este caso, por ende:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>python3 -m venv custodian\nsource custodian\/bin\/activate\npip install c7n <\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Si vas a trabajar con otra plataforma, te dejo este <a href=\"https:\/\/cloudcustodian.io\/docs\/quickstart\/index.html#install-cc\" target=\"_blank\" rel=\"noreferrer noopener\">enlace<\/a> a la documentaci\u00f3n oficial. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Creaci\u00f3n de Usuario en AWS &amp; Rol<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a crear nuestro user <strong>cloudcustodian<\/strong>, darle acceso a EC2 y generar nuestras credenciales program\u00e1ticas para accesar a AWS. Si no sabes como crear usuarios e instalar el cliente program\u00e1tico de AWS, revisa los links de fuentes. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br><em>Para fines pr\u00e1cticos, agregue le Rol AmazonEC2FullAccess, algo que tienen que revisar por el principio de \"Least Privilege\".<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":844,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-1.png\" alt=\"IAM Rol\" class=\"wp-image-844\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a preparar el ambiente, generando una instancia EC2 con el tag de testing. Con eso estaremos listo para probar nuestra primer politica. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":846,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-2.png\" alt=\"\" class=\"wp-image-846\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a revisar nuestra politica. Pero antes quiero mostrarle los comandos para conocer sobre que recursos o servicios podemos trabajar, los filtros que podemos utilizar y las acciones. Para ello utilizaremos los comandos <strong>custodian schema<\/strong>, <strong>custodian schema ec2.filters<\/strong> &amp; <strong>custodian schema ec2.actions<\/strong>.<br><br>Vamos a la politica, para ello creamos <strong>ec2-policy.yaml<\/strong>. Es muy sencilla de leer, primero el recurso que queremos modificar, luego el filtro y por ultimo la acci\u00f3n. En nuestra politica no solo paramos la instancia, si no tambien que renombramos el tag. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":847,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-3.png\" alt=\"Policy\" class=\"wp-image-847\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a correr la politica, pero antes vamos a validarla. Para ello usaremos estos dos comandos: custodian validate y custodian run. En el run agregue el directorio para el output y tambien el flag --verbose para ver el paso a paso o en su defecto debbugear. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":848,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-4.png\" alt=\"custodian commands\" class=\"wp-image-848\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Uala! Revisamos los pasos, primero comenta que encontro 1 recurso con esa condici\u00f3n, despu\u00e9s paro la instancia y luego modifico el tag. Vamos a revisarlo!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":849,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-5.png\" alt=\"Post Policy\" class=\"wp-image-849\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a revisar otro caso de uso y agregar una integraci\u00f3n con Slack via <a href=\"https:\/\/cloudcustodian.io\/docs\/tools\/c7n-mailer.html\" target=\"_blank\" rel=\"noreferrer noopener\">c7n-mailer<\/a>. La arquitectura es la siguiente <strong>c7n-mailer<\/strong> crea una <strong>Lamdba Function<\/strong> y una <strong>CloudWatch Event Rule<\/strong> en tu cuenta de AWS. Esa regla se dispara cada 5 minutos. La Lambda leer\u00e1 el SQS para ver si tenemos o no mensajes, procesarlo y enviar la notificaci\u00f3n. Si llegaste hasta aca es por que sabes que vamos a tener que agregar nuevos parametros a la politica del tipo <strong>notify<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":856,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-6.png\" alt=\"\" class=\"wp-image-856\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos a ejecutar:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>pip install c7n-mailer<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":857,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-7.png\" alt=\"\" class=\"wp-image-857\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Generamos nuestro archivo <strong>mailer.yaml<\/strong> con la direcci\u00f3n de la cola SQS y a nuestro usuario le agregamos propiedades para que pueda leer la cola. Nos deberia quedar algo asi.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:gallery {\"linkTo\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-gallery aligncenter has-nested-images columns-default is-cropped\"><!-- wp:image {\"id\":867,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-15-1024x1024.png\" alt=\"\" class=\"wp-image-867\"\/><\/figure>\n<!-- \/wp:image --><\/figure>\n<!-- \/wp:gallery -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos actualizar la configuraci\u00f3n con el siguiente comando. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>c7n-mailer --config mailer.yaml --update-lambda<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Es importante que el Rol tenga los derechos sobre <strong>Lambda<\/strong>, <strong>SQS<\/strong>, <strong>Cloudwatch<\/strong> para poder funcionar. Revisamos nuestra lambda!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":859,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-9.png\" alt=\"\" class=\"wp-image-859\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Vamos agregar la acci\u00f3n a nuestra politica.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":861,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-11.png\" alt=\"\" class=\"wp-image-861\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos avisos en nuestro channel de Slack. Aca podes saber como <a href=\"https:\/\/api.slack.com\/messaging\/webhooks\" target=\"_blank\" rel=\"noreferrer noopener\">generar un webhook<\/a>. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":862,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/06\/image-12.png\" alt=\"Slack\" class=\"wp-image-862\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Las posibilidades son infinitas, solo revisar los documentos que hay en internet o la misma web oficial. Custodian puede trabajar con Security Hub, integrar con notificaciones o por que no generar un Dashboard en nuestro SIEM. A revisar!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Fuentes<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_users_create.html\">https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/id_users_create.html<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/geekflare.com\/es\/cloud-security-posture-management\/\">https:\/\/geekflare.com\/es\/cloud-security-posture-management\/<\/a><br><a href=\"https:\/\/dev.to\/sivatharsan\/multi-account-security-governance-as-code-with-cloud-custodian-on-aws-organization-hl8\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/dev.to\/sivatharsan\/multi-account-security-governance-as-code-with-cloud-custodian-on-aws-organization-hl8<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/medium.com\/@abhinav__singh\/slack-integration-with-cloud-custodian-66d33ae19908\">https:\/\/medium.com\/@abhinav__singh\/slack-integration-with-cloud-custodian-66d33ae19908<\/a><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2023-06-11 19:40:35","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=842"},{"ID":"881","Title":"Reforzando la Seguridad con un WAF Open Source, primera linea de defensa.","Content":"<!-- wp:paragraph -->\n<p>\u00bfCu\u00e1ntas veces escuchamos? Salimos as\u00ed, despu\u00e9s lo solucionamos. O cuando est\u00e1 en marcha, \u00bfPero solo se explota de manera interna o externa tambi\u00e9n? Algo que podemos utilizar es un Web Application Firewall, que nos servir\u00e1 para ganar tiempo, mientras solucionamos la causa ra\u00edz.\u00a0<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00bfQu\u00e9 es un WAF? No es ni m\u00e1s ni menos que un tipo de firewall que supervisa, filtra o bloquea el tr\u00e1fico HTTP hacia y desde una aplicaci\u00f3n web. Se diferencia de un firewall normal en que puede filtrar el contenido de aplicaciones web espec\u00edficas, mientras que un firewall de red protege el tr\u00e1fico entre los servidores.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Para est\u00e1 prueba de concepto vamos a utilizar Nginx que es un servidor web Open Source conocido y ampliamente utilizado que se puede utilizar como un servidor proxy, proxy inverso.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":882,\"width\":520,\"height\":291,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/11_AWS_waf_what_it_is_3_75023d5b21.png\" alt=\"https:\/\/d1tcczg8b21j1t.cloudfront.net\/strapi-assets\/11_AWS_waf_what_it_is_3_75023d5b21.png\" class=\"wp-image-882\" style=\"width:520px;height:291px\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Normalmente, el servidor Nginx se despliega en una red p\u00fablica y se utiliza un proxy inverso que enruta el tr\u00e1fico procedente de los clientes a la red interna donde se encuentran las aplicaciones web reales.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":883,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/Reverse.png\" alt=\"\" class=\"wp-image-883\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Tener las aplicaciones en una red interna es una buena pr\u00e1ctica, no est\u00e1 de m\u00e1s agregar una capa m\u00e1s de seguridad con un WAF que protege las aplicaciones de vulnerabilidades potenciales. Lo que vamos a utilizar es <strong>Nginx<\/strong> con <strong><a href=\"https:\/\/owasp.org\/www-project-modsecurity-core-rule-set\/\" target=\"_blank\" rel=\"noreferrer noopener\">ModSecurity<\/a><\/strong> como proxy inverso agregando el paquete de reglas de owasp-modsecurity y as\u00ed proteger una aplicaci\u00f3n vulnerable como <a href=\"https:\/\/github.com\/juice-shop\/juice-shop\" target=\"_blank\" rel=\"noreferrer noopener\">juice-shop<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Si te segu\u00eds preguntando \u00bfQue es ModSecurity? Es un firewall de aplicaciones web de c\u00f3digo abierto dise\u00f1ado para aumentar la seguridad de los servidores web al protegerlos contra una variedad de ataques y vulnerabilidades comunes en las aplicaciones web. Act\u00faa como una capa de seguridad entre las aplicaciones web y el servidor web, analizando el tr\u00e1fico entrante y saliente en busca de patrones sospechosos o maliciosos. ModSecurity puede detectar y bloquear intentos de inyecci\u00f3n SQL, cross-site scripting (XSS), ataques de fuerza bruta y otros tipos de ataques dirigidos a aplicaciones web. Se configura mediante reglas personalizables que permiten adaptar su comportamiento a las necesidades espec\u00edficas de cada sitio web.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PoC<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vamos a pullear las im\u00e1genes de Nginx+ModSecurity, para luego agregar la configuraci\u00f3n, y la de Juice Shop. Y creamos una red, en nuestro ambiente docker.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Imagen de Nginx con ModSecurity\ndocker pull owasp\/modsecurity-crs:3.3.5-nginx-202308071108\n# Imagen de Aplicativo\ndocker pull bkimminich\/juice-shop\n# Creacion de Red\ndocker network create backend --subnet 10.10.10.0\/24<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Generamos nuestro archivo de configuraci\u00f3n default.conf, para buildear nuestra imagen productiva.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre># Nginx configuration for both HTTP and SSL\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 80 default_server;\n\n    server_name localhost;\n    set $upstream http:\/\/owaspjuice.shop:3000; # Change this\n    set $always_redirect off;\n    location \/ {\n        client_max_body_size 0;\n\n        if ($always_redirect = on) {\n            return 301 https:\/\/$host$request_uri;\n        }\n\n        include includes\/proxy_backend.conf;\n\n        index index.html index.htm;\n        root \/usr\/share\/nginx\/html;\n    }\n\n    include includes\/location_common.conf;\n    #include includes\/custom_locations.conf;\n\n}\n\nserver {\n    listen 443 ssl;\n\n    server_name localhost;\n    set $upstream http:\/\/localhost:80;\n\n    ssl_certificate \/etc\/nginx\/conf\/server.crt;\n    ssl_certificate_key \/etc\/nginx\/conf\/server.key;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:MozSSL:10m;\n    ssl_session_tickets off;\n\n    ssl_dhparam \/etc\/ssl\/certs\/dhparam-2048.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    ssl_stapling off;\n    ssl_stapling_verify off;\n\n    ssl_verify_client off;\n\n    location \/ {\n        client_max_body_size 0;\n\n        include includes\/proxy_backend.conf;\n\n        index index.html index.htm;\n        root \/usr\/share\/nginx\/html;\n    }\n    include includes\/location_common.conf;\n    #include includes\/custom_locations.conf;\n}<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Ya tenemos la imagen del servidor y el archivo de configuraci\u00f3n. Nos resta el <strong>Dockerfile<\/strong> y ejecutar la construcci\u00f3n de la imagen. La llamaremos <strong>nginx-modsec<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>#Dockerfile\nFROM owasp\/modsecurity-crs:3.3.5-nginx-202308071108\nCOPY default.conf \/etc\/nginx\/templates\/conf.d\/default.conf.template<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker build -t nginx-modsec .<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a echar a correr los containers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"shell\",\"mime\":\"text\/x-sh\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>docker run -it --name juice_shop --hostname owaspjuice.shop --network backend --ip 10.10.10.100 -p 3000:3000 bkimminich\/juice-shop\ndocker run -it --name nginx-modsec --network backend --ip 10.10.10.200 -p 80:80 nginx-modsec<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":895,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/image-3.png\" alt=\"\" class=\"wp-image-895\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Como pueden ver en la imagen tenemos los dos servicios corriendo y conocemos sus direcciones para comenzar las pruebas. Podemos pegarle directo a JuiceShop puerto 3000 o ir  atraves del Proxy. Vamos a realizar un ataque para mostrar como el WAF hace su trabajo.<br><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":900,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/image-4.png\" alt=\"\" class=\"wp-image-900\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><br>Vamos a ver si la aplicaciones vulnerable a inyecci\u00f3n. Primero lo haremos directo a la aplicaci\u00f3n, donde hacemos la inyecci\u00f3n y obtenemos el token.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":903,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/InY1.png\" alt=\"\" class=\"wp-image-903\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":904,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/InY2.png\" alt=\"\" class=\"wp-image-904\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a pasar atraves del WAF y veremos como el mensaje cambia a <strong>403 Forbidden<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":905,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/Iny3.png\" alt=\"\" class=\"wp-image-905\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":906,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2023\/08\/Captura-de-pantalla-2023-08-15-a-las-17.13.08.png\" alt=\"\" class=\"wp-image-906\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Los mensajes son parametrizables, en las reglas. <a href=\"https:\/\/github.com\/coreruleset\/coreruleset\/blob\/v4.0\/dev\/rules\/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example\" target=\"_blank\" rel=\"noreferrer noopener\">Aca<\/a> les dejo una colecci\u00f3n de reglas para que agreguen. No se recomienda poner un WAF en producci\u00f3n sin antes observar que es lo que pasa, por ello se puede configurar en \/etc\/modsecurity\/modsecurity.conf para poner en modo monitor e investigar los logs que nos entrega en SecAuditLog. Importante redirigir los logs al SIEM para sumarizar y sacar el mejor tunning. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Referencias<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.nginx.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/www.nginx.com\/<\/a><br><a href=\"https:\/\/zeyad-abulaban.medium.com\/dockerized-mod-security-waf-c3e7233be002\">https:\/\/zeyad-abulaban.medium.com\/dockerized-mod-security-waf-c3e7233be002<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.linuxbabe.com\/security\/modsecurity-apache-debian-ubuntu\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/www.linuxbabe.com\/security\/modsecurity-apache-debian-ubuntu<\/a><br><a href=\"https:\/\/github.com\/coreruleset\/coreruleset\/blob\/v4.0\/dev\/rules\/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/github.com\/coreruleset\/coreruleset\/blob\/v4.0\/dev\/rules\/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example<\/a><\/p>\n<!-- \/wp:paragraph -->","Excerpt":"Proteger los problemas conocidos de una web, se puede. Para ello usamos un WAF.","Date":"2023-08-11 20:38:03","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=881"},{"ID":"963","Title":"Publicar nuestro ambientes Kubernetes mediante Cloudflare.","Content":"<!-- wp:paragraph -->\n<p>Muchas veces empezamos a jugar con nuestro cluster en nuestro equipo y llegamos a la necesidad, tal vez por gusto o ganas de mostrar nuestros conocimientos al mundo, de querer exponerlos. Una buena manera de hacerlo puede ser a traves de Cloudflare. <br><br>Con Cloudflare Tunnel se puede conectar el origen a Cloudflare y proporcionar servicio sin exponer ning\u00fan puerto en el servidor o cl\u00faster, minimizando as\u00ed la superficie de ataque.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":964,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/image.png\" alt=\"\" class=\"wp-image-964\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Para esta prueba vamos a tener que tener un dominio, configurado en Cloudflare. Vamos a ir a nuestro dominio, asociado, Access y luego lanzamos nuestra Zona de Confianza 0. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":965,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/1.png\" alt=\"\" class=\"wp-image-965\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora vamos a comentar con el deployment, en nuestro cluster de cloudfalred, que sera quien dialoge y genere los registros en la CDN. Les dejo el manifiesto, para poder aplicarlo en nuestro ambiente.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apiVersion: apps\/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: cloudflared\n  name: cloudflared\nspec:\n  selector:\n    matchLabels:\n      app: cloudflared\n  template:\n    metadata:\n      labels:\n        app: cloudflared\n    spec:\n      containers:\n      - name: cloudflared\n        image: cloudflare\/cloudflared:2022.7.1\n        # image: ghcr.io\/maggie0002\/cloudflared:2022.7.1\n        imagePullPolicy: Always\n        args: [&quot;tunnel&quot;, &quot;--no-autoupdate&quot;, &quot;run&quot;, &quot;--token=TOKEN&quot;]\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 60\n      <\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Vamos a necesitar el Token, para acceder a Clouflare. Para ello vamos a dar siguiente y seleccionar el despliegue de con Docker. Sustraemos el token y lo cambiamos en nuestro manifiesto. Con eso estamos listos para desplegar. <strong>Es importante entender que almacenar el token en el archivo yaml no es seguro<\/strong>. Para garantizar la seguridad puede almacenar el token en <a href=\"https:\/\/kubernetes.io\/docs\/concepts\/configuration\/secret\/#using-secrets-as-environment-variables\" data-type=\"link\" data-id=\"https:\/\/kubernetes.io\/docs\/concepts\/configuration\/secret\/#using-secrets-as-environment-variables\">Kubernetes Secrets<\/a> y utilizarlo a trav\u00e9s de la variable de entorno. Hay varias formas mas, pero para fines practicos vamos a seguir asi. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":966,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/2.png\" alt=\"\" class=\"wp-image-966\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":967,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/4.png\" alt=\"\" class=\"wp-image-967\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Aplicamos los el manifiesto de <strong>clouflared<\/strong>. Una vez aplicado, damos continuar para configurar nuestro registro. Pero antes vamos a desplegar nuestra aplicacion. En mi caso usare una imagen de microbot. Aca les dejo el deployment y el servicio, todo en uno. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:codemirror-blocks\/code-block {\"mode\":\"yaml\",\"mime\":\"text\/x-yaml\"} -->\n<div class=\"wp-block-codemirror-blocks-code-block code-block\"><pre>apiVersion: apps\/v1\nkind: Deployment\nmetadata:\n  name: microbot\nspec:\n  selector:\n    matchLabels:\n      app: microbot\n  template:\n    metadata:\n      labels:\n        app: microbot\n    spec:\n      containers:\n      - name: microbot\n        image: cdkbot\/microbot-amd64\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 80\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 60\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: microbot-svc\nspec:\n  type: ClusterIP\n  ports:\n    - targetPort: 80\n      port: 80\n  selector:\n      app: microbot<\/pre><\/div>\n<!-- \/wp:codemirror-blocks\/code-block -->\n\n<!-- wp:paragraph -->\n<p>Revisamos donde esta atendiendo el servicio, para configurar el tunel. En nuestro caso es <strong>microbot-svc:80<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":969,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/5.png\" alt=\"\" class=\"wp-image-969\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":970,\"width\":\"520px\",\"height\":\"auto\",\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full is-resized\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/6.png\" alt=\"\" class=\"wp-image-970\" style=\"width:520px;height:auto\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Salvamos! Vamos a revisar nuestros tuneles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":971,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image aligncenter size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/7.png\" alt=\"\" class=\"wp-image-971\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ahora revisamos y UALA! Nuestro deployment, local, publicado a internet via Cloudflare. Revisen en nuestra imagen el id del container, para chequear el funcionamiento. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":972,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https:\/\/blog.santiagoagustinfernandez.com\/wp-content\/uploads\/2024\/01\/8.png\" alt=\"\" class=\"wp-image-972\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Espero que les sirva, es una manera rapida y segura de tener nuestro ambiente de manera publica. <\/p>\n<!-- \/wp:paragraph -->","Excerpt":"","Date":"2024-01-28 17:08:30","Post Type":"post","Permalink":"https:\/\/blog.santiagoagustinfernandez.com\/?p=963"}]